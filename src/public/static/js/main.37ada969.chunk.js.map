{"version":3,"sources":["workers/TimeseriesData.worker.js","utilities/DeviceTypes.utility.ts","actions/DeviceDataDialog.action.ts","components/Overview/ParametersTableSVG.component.tsx","components/Overview/TransformerSVG.component.tsx","utilities/SiemensColors.utility.ts","actions/UniversalTabs.action.ts","components/Overview/CircuitBreakerSVG.component.tsx","components/Overview/GeneratorSVG.component.tsx","components/Overview/SectionSVG.component.tsx","components/UniversalTabs.component.tsx","utilities/DecodeState.utility.ts","utilities/PowerFactorCalculator.utility.ts","components/Overview.component.tsx","components/UniversalTable.component.tsx","hooks/useUpdateChartFontColor.hook.ts","hooks/useUpdateChartDatasets.hook.ts","components/LineChart.component.tsx","components/Powermonitor/LoadMonitoringTab.component.tsx","services/CustomAPI.service.ts","actions/Powermonitor.action.ts","actions/Backdrop.action.ts","components/Powermonitor/SettingsTab.component.tsx","components/Powermonitor.component.tsx","actions/Events.action.ts","components/TableWithSort.component.tsx","services/FetchEventsAPI.service.ts","components/Events.component.tsx","components/Elevation/PanelSVG.component.tsx","components/Elevation/CompartmentSVG.component.tsx","components/Elevation/CircuitBreaker3VAVerticalSVG.component.tsx","components/Elevation/CircuitBreaker3WLSVG.component.tsx","components/Elevation/CircuitBreaker3VAHorizontalSVG.component.tsx","components/Elevation/SwitchDisconnector3NP1VerticalSVG.component.tsx","components/Elevation/SwitchDisconnector3NJ6SVG.component.tsx","components/Elevation/SwitchDisconnector3NJ4SVG.component.tsx","components/Elevation.component.tsx","utilities/ExportPDF.utility.ts","components/PieChart.component.tsx","services/FetchTimeseriesAggregatesAPI.service.ts","actions/Reports/CommonReports.action.ts","utilities/GetUTCDate.utility.ts","components/Reports/EnergyConsumptionTab.component.tsx","components/StackedBarChart.component.tsx","hooks/useUpdateStackedChartDatasets.hook.ts","components/Reports/EnergyUsageProfileTab.component.tsx","services/FetchTimeseriesAPI.service.ts","components/Reports/PowerDemandTab.component.tsx","components/Reports/InfeedParametersTab.component.tsx","components/Reports/OutfeedParametersTab.component.tsx","components/Reports.component.tsx","routes/Drawer.routes.tsx","actions/LanguageDialog.action.ts","assets/sie-logo-petrol-rgb.svg","assets/sie-logo-white-rgb.svg","actions/SystemTopologyData.action.ts","actions/deviceDataDialogElevationDataSource.action.ts","actions/Overview.action.ts","actions/Elevation.action.ts","actions/Reports.action.ts","actions/Userdata.action.ts","components/Drawer.component.tsx","i18n.ts","translations.ts","reducers/UniversalTabs.reducer.ts","reducers/LanguageDialog.reducer.ts","reducers/DeviceDataDialog.reducer.ts","reducers/Backdrop.reducer.ts","reducers/Elevation.reducer.ts","reducers/Overview.reducer.ts","reducers/SystemTopologyData.reducer.ts","reducers/DeviceDataDialogElevationDataSource.reducer.ts","reducers/Events.reducer.ts","reducers/Reports.reducer.ts","reducers/Reports/CommonReports.reducer.ts","reducers/Reports/PowerDemandTab.reducer.ts","reducers/Userdata.reducer.ts","reducers/Powermonitor.reducer.ts","reducers/Root.reducer.ts","components/LanguageDialog.component.tsx","components/Backdrop.component.tsx","components/DeviceDataDialog/CurrentTab.component.tsx","components/DeviceDataDialog/OverviewTabCircuitBreakerSVG.component.tsx","components/DeviceDataDialog/OverviewTabTransformerSVG.component.tsx","components/DeviceDataDialog/OverviewTabGeneratorSVG.component.tsx","components/DeviceDataDialog/OverviewTab.component.tsx","components/DeviceDataDialog/PowerTab.component.tsx","components/DeviceDataDialog/THDITab.component.tsx","components/DeviceDataDialog/BreakerDevice.component.tsx","components/DeviceDataDialog/THDUTab.component.tsx","components/DeviceDataDialog/VoltageLNTab.component.tsx","components/DeviceDataDialog/VoltageLLTab.component.tsx","components/DeviceDataDialog/TransformerDevice.component.tsx","components/DeviceDataDialog.component.tsx","App.tsx","reportWebVitals.ts","serviceWorkerRegistration.ts","index.tsx","swReg.js"],"names":["addMethods","methods","module","exports","w","Worker","name","DeviceTypes","SET_DEVICE_DATA_DIALOG_OPEN","SET_DEVICE_DATA_DIALOG_DATE_FROM","setDeviceDataDialogOpen","params","type","open","deviceName","deviceType","breakerName","sectionName","assetID","switchboardAssetID","setDeviceDataDialogDateFrom","dateFrom","ParametersTableSVG","x","y","tableName","parameter1","parameter2","parameter3","classes","useStyles","dispatch","useDispatch","Fragment","width","lineLength","height","className","paramsTableTitleStyle","paramsTableRowStyle","paramsTableTitleTextStyle","paramsTableRowTextStyle","clickableOverlay","onClick","SiemensColors","SiemensColorsAlpha","SiemensAccentTeal","SiemensAccentBlue","SiemensAccentYellow","SiemensAccentRed","SiemensAccentGreen","TransformerSVG","activePower","current","powerFactor","voltageApplied","noTable","overview","infeedsNameStyle","x1","y1","x2","y2","lineStyleVoltageApplied","lineStyle","cx","cy","circleRadius","r","circleStyleVoltageApplied","circleStyle","transformer","overviewTabSVGTextsCentralLeftAnchor","SET_UNIVERSAL_TABS_NAME_INDEX","setUniversalTabsNameIndex","index","CircuitBreakerSVG","state","tableAbove","nextSwitchboardIndex","previousSwitchboardIndex","drawOut","voltageAbove","voltageBelow","circuitBreakersNameStyle","transform","closed","undefined","GeneratorSVG","generatorSymbolTextStyle","generator","decideDataColor","light2","light4","light6","dark2","light3","light5","dark1","dark3","SectionSVG","length","endCoupling","nextSectionVoltageApplied","TabPanel","children","value","other","role","hidden","id","aria-labelledby","Box","p","makeStyles","theme","root","flexGrow","paddingTop","spacing","UniversalTabs","tabs","tabsInstance","useSelector","universalTabs","AppBar","position","color","Tabs","onChange","event","variant","scrollButtons","indicatorColor","textColor","aria-label","map","tab","i","Tab","label","content","decodeState","tripped","drawnOut","Boolean","powerFactorCalculator","P","Q","result","parseFloat","Math","sqrt","pow","toFixed","isNaN","createStyles","stroke","palette","text","primary","strokeWidth","strokeLinecap","fill","fontSize","textAnchor","dominantBaseline","dark4","background","paper","letterSpacing","overviewTabSVGTextsCentralAnchor","svgContainer","overflowX","whiteSpace","svgElement","minWidth","Overview","t","useTranslation","systemTopologyData","svgViewBoxX","renderDiagramName","renderInfeed","sectionObject","breaker","Active_Power_Import","sumCurrent","Current_L1","Current_L2","Current_L3","Reactive_Power_Import","checkSectionVoltageApplied","checkBreakerState","renderBreaker","diagrams","findIndex","diagram","fixedState","infeedBreaker","circuitBreaker","drawOutCircuitBreaker","Breaker_State","checkVoltageApplied","renderSection","section","previousSectionUnderVoltage","nextSectionUnderVoltage","L1","L2","L3","max","deviceID","min","Voltage_L1_N","Voltage_L2_N","Voltage_L3_N","breakers","filter","Grid","container","item","xs","forEach","diagramIndex","viewBox","sections","sectionIndex","infeeds","infeed","infeedIndex","sectionLines","coupling","breakerIndex","nextSwitchboardName","push","renderTabsWithCircuitDiagrams","UniversalTable","rows","columns","small","noElevation","TableContainer","component","Paper","Table","size","TableHead","TableRow","col","TableCell","align","TableBody","row","cell","useUpdateChartFontColor","chartInstance","useTheme","useEffect","options","scales","ticks","title","plugins","legend","labels","useUpdateChartDatasets","data","locale","yAxisTitle","xAxisTitle","i18n","datasets","dataset","adapters","date","language","pl","enUS","update","LineChart","chartTitle","timeInterval","yAxisUnit","tooltipFormat","chartContainer","useRef","useState","setChartInstance","chartConfig","useMemo","responsive","interaction","intersect","mode","display","fontColor","Chart","defaults","font","tooltip","callbacks","context","parsed","weight","time","displayFormats","millisecond","second","minute","hour","unit","ref","marginTopBottom","marginTop","marginBottom","alignRight","textAlign","LoadMonitoringTab","chartData","powermonitorConfig","powermonitor","setDatasets","timetable","setTimetable","predictedPower","setPredictedPower","alertPoints","point","tickId","warningPoints","historicalPoints","predictedPoints","tableData","el","format","backgroundColor","borderColor","lineTension","pointRadius","borderDash","concat","enabled","Typography","gutterBottom","lg","xl","Alert","severity","alertLimit","warningLimit","setAlertType","AlertTitle","getCookie","document","cookie","xsrfCookies","split","c","trim","startsWith","decodeURIComponent","fetchMe","a","fetch","response","json","fetchPowermonitor","plantName","modifyPowerMonitorConfig","powermonitorId","body","method","headers","JSON","stringify","status","res","subscribeToNotification","unsubscribeToNotification","SET_POWERMONITOR_CONFIG","setPowermonitorConfig","config","SET_BACKDROP_OPEN","setBackdropOpen","divider","PowermonitorSettingsTab","userPlantData","userData","warningThreshold","setWarningThreshold","alarmThreshold","setAlarmThreshold","transformerPowerLoss","setTransformerPowerLoss","subscribed","setSubscribed","loadMonitorActive","checkboxes","setCheckboxes","mailList","setMailList","dialogOpen","setDialogOpen","formEmailAddress","setFormEmailAddress","powerLosses","mailingList","navigator","serviceWorker","ready","then","registration","pushManager","getSubscription","subscription","console","log","endpoint","email","urlBase64ToUint8Array","base64String","base64","repeat","replace","rawData","window","atob","outputArray","Uint8Array","charCodeAt","handleReset","useCallback","Dialog","fullWidth","maxWidth","onClose","aria-describedby","DialogTitle","DialogContent","TextField","autoFocus","margin","e","target","DialogActions","Button","added","addEmail","disabled","test","String","toLowerCase","alignItems","noValidate","autoComplete","FormGroup","FormControlLabel","control","Checkbox","checked","IconButton","toRemove","withRemoved","removeEmail","startIcon","unsubscribe","userId","subscriptionData","plantId","subscribe","userVisibleOnly","applicationServerKey","Divider","md","assetIds","Powermonitor","powermonitorChartData","setPowermonitorChartData","interval","setInterval","clearInterval","SET_EVENTS","setEvents","switchboardName","events","sortRowsBy","sortBy","order","orderDataType","sortByColumnIndex","sort","b","localeCompare","EnhancedTableHead","props","orderBy","onRequestSort","headCell","padding","sortDirection","style","TableSortLabel","active","direction","property","columnIndex","visuallyHidden","border","clip","overflow","top","TableWithSort","dense","defaultOrderColumnIndex","React","setOrder","setOrderDataType","setOrderBy","page","setPage","rowsPerPage","setRowsPerPage","isDate","element","toTimeString","emptyRows","isAsc","rowValue","toExponential","toUpperCase","isString","slice","hover","toLocaleString","colSpan","TablePagination","rowsPerPageOptions","count","onChangePage","newPage","onChangeRowsPerPage","parseInt","labelRowsPerPage","labelDisplayedRows","from","to","fetchEvents","fromDate","toDate","dataWithCustomFields","warning","info","error","select","Events","Date","setMonth","getMonth","changeDateFrom","dateTo","changeDateTo","dialogData","deviceDataDialogElevationDataSource","fetchEventsFromMS","toISOString","_embedded","catch","err","setSeverityIcon","tabPanel","allRows","parsedDate","parse","timestamp","parsedDescription","description","en","source","initializeTabs","justify","sm","DatePicker","cancelLabel","autoOk","maxDate","disableFuture","minDate","PanelSVG","empty","panelWidth","compartmentHeight","siemensLogoPlate","siemensLogoOutline","reservedTopSpace","panelHeight","panelBase","Children","child","isValidElement","panelName","CompartmentSVG","span","nonInteractive","connectionState","cbTrippedOverlay","transparent","cbOpenOverlay","compartmentNameVertical","compartmentNameHorizontal","noConnectionAlarmVertical","noConnectionAlarmHorizontal","CircuitBreaker3VAVerticalSVG","scale","transformOrigin","circuitBreaker3VAVerticalWidthPixels","circuitBreaker3VAVerticalHeightPixels","d","CircuitBreaker3WLSVG","circuitBreaker3WLWidthPixels","circuitBreaker3WLHeightPixels","fillRule","CircuitBreaker3VAHorizontalSVG","circuitBreaker3VAHorizontalWidthPixels","circuitBreaker3VAHorizontalHeightPixels","SwitchDisconnector3NP1VerticalSVG","switchDisconnector3NP1VerticalWidthPixels","switchDisconnector3NP1VerticalHeightPixels","SwitchDisconnector3NJ6SVG","switchDisconnector3NJ6WidthPixels","switchDisconnector3NJ6HeightPixels","SwitchDisconnector3NJ4SVG","switchDisconnector3NJ4WidthPixels","switchDisconnector3NJ4HeightPixels","strokeMiterlimit","light1","dark5","Elevation","elevation","renderCompartmentContent","compartmentX","compartmentY","scaleService","associateTypeWithDisplayData","obj","infeedType","infeedTableName","breakerType","breakerTableName","renderSwitchboardName","columnNumber","checkConnectionState","Connection_State","switchboards","switchboard","panels","panel","panelIndex","compartments","compartment","compartmentIndex","rowSpan","column","renderTabsWithSwitchboards","exportPDF","html2canvas","scrollX","scrollY","canvas","imgData","toDataURL","doc","jsPDF","orientation","addImage","save","PieChart","onDataClick","evt","dataSliceIndex","fontFamily","aspectRatio","fetchTimeseriesAggregates","aspectName","intervalUnit","intervalValue","SET_ASSETS_REPORTS_DATA","SET_REPORTS_DATE","setReportsDate","getUTCDate","startOfMonth","endOfMonth","add","months","startOfDay","endOfDay","days","EnergyConsumptionTab","assetsData","setAssetsData","reports","level1","setLevel1","level2","setLevel2","level3","setLevel3","referenceToCurrentChartForScrolling","setReferenceToCurrentChartForScrolling","level2DataSource","setLevel2DataSource","assetsNames","commonReports","assets","level2DataSourceRef","groupIndexRef","assetsDataRef","assetsNamesRef","Object","keys","promises","asset","Promise","all","chooseByLanguage","sentenceEN","sentencePL","calculateActiveEnergyImportSingleAsset","Active_Energy_Import","lastvalue","firstvalue","calculateAggregatedActiveEnergyImport","assetIDs","calculatedEnergy","reduce","getGroupOfGroupsAssetIDs","groupObject","arr","array","Array","isArray","group","subgroups","subgroup","createSubgroupsChart","groupIndex","level","enName","plName","values","createEndAssetsChart","feederName","createNextLevelChart","dataIndex","originLevel","groups","scrollIntoView","behavior","createChart","tableLabels","tableValues","sectionMargin","handleDateChange","views","StackedBarChart","numberOfPops","pop","removeExcessiveDatasets","useUpdateStackedChartDatasets","datasetIndex","stacked","EnergyUsageProfile","energyType","setEnergyType","calculateAggregatedValue","valueType","dailyValues","Reactive_Energy_Import","Reactive_Energy_Export","v","setChartComponentsBasedOnSelectedEnergyType","xLabels","assetDailyData","starttime","parseISO","xAxisLabels","feederDescription","FormControl","InputLabel","Select","labelId","MenuItem","fetchTimeseriesInterval","PowerDemandTab","outfeedsDate","setOutfeedsDate","infeedPowerDemandChartData","setInfeedPowerDemandChartData","infeedPowerDemandExceedings","setInfeedPowerDemandExceedings","warningLine","setWarningLine","alarmLine","setAlarmLine","outfeedChartData","setOutfeedChartData","powerDemandAssets","powerDemandTab","numberOfSamples","valueOf","activePowerValuesSum","single15Interval","timestampIndex","_time","exceedings","outfeeds","promisesOutfeeds","outfeed","promisesInfeeds","infeedsPart","respectiveDatasetsActivePowers","datasetsOutfeeds","outfeedGroupIndex","formattedDate","indexOf","datasetsInfeeds","outfeedsSum","restPower","singleVal","InfeedParametersTab","availableTransformers","setAvailableTransformers","setTransformer","transformerAggregatedData","setTransformerAggregatedData","transformerVoltageTableData","setTransformerVoltageTableData","transformerCurrentTableData","setTransformerCurrentTableData","monthly15minData","setMonthly15minData","monthly1minData","setMonthly1minData","powerFactorChartData","setPowerFactorChartData","currentAndTHDChartData","setCurrentAndTHDChartData","directOutfeeds","setDirectOutfeeds","setDialogData","directOutfeeds1MinData","setDirectOutfeeds1MinData","directOutfeedsTHDChartDataL1","setDirectOutfeedsTHDChartDataL1","directOutfeedsTHDChartDataL2","setDirectOutfeedsTHDChartDataL2","directOutfeedsTHDChartDataL3","setDirectOutfeedsTHDChartDataL3","buttonOnClickOpenDialog","tabIndex","renderButton","innerHTML","smallerFont","transformers","columnsVoltageTable","rowsVoltageTable","setValueUnit","setPrecision","average","maxvalue","maxtime","minvalue","mintime","Voltage_L1_L2","Voltage_L2_L3","Voltage_L3_L1","THD_U_L1","THD_U_L2","THD_U_L3","columnsCurrentTable","rowsCurrentTable","THD_I_L1","THD_I_L2","THD_I_L3","importPowerFactorData","dailyValue","exportPowerFactorData","Active_Power_Export","Reactive_Power_Export","importPFData","exportPFData","maxCurrentL1Data","maxCurrentL2Data","maxCurrentL3Data","avgCurrentL1Data","avgCurrentL2Data","avgCurrentL3Data","thdiL1","thdiL2","thdiL3","thduL1","thduL2","thduL3","maxCurrentL1","maxCurrentL2","maxCurrentL3","avgCurrentL1","avgCurrentL2","avgCurrentL3","trDiagramIndex","trSectionIndex","trInfeedIndex","infeedDirectOutfeeds","assetName","withNames","datasetsL1","datasetsL2","datasetsL3","outfeedName","outfeedData","find","tr","OutfeedParametersTab","availableSwitchboards","setAvailableSwitchboards","setSwitchboard","availableOutfeeds","setAvailableOutfeeds","outfeedAssetID","setOutfeedAssetID","outfeedAssetName","setOutfeedAssetName","outfeedMonthlyAggregatedData","setOutfeedMonthlyAggregatedData","outfeedMonthlyAggregatedDataCurrentTable","setOutfeedMonthlyAggregatedDataCurrentTable","outfeedMonthlyAggregatedDataTHDITable","setOutfeedMonthlyAggregatedDataTHDITable","switchboardContent","columnsTHDITable","rowsTHDITable","maxThdiL1","maxThdiL2","maxThdiL3","avgThdiL1","avgThdiL2","avgThdiL3","outfeedSectionIndex","outfeedBreakerIndex","Reports","gatherAssetIDs","assetObj","assetsObject","defineProperty","writable","enumerable","assetData","DrawerRoutes","path","SET_LANGUAGE_DIALOG_OPEN","setLanguageDialogOpen","SET_ASSET_DATA","SET_DEVICE_DATA_DIALOG","setDeviceDataDialog","parameters","SET_CIRCUIT_DIAGRAM","SET_ELEVATION","SET_REPORTS_STRUCTURE","SET_REPORTS_POWER_DEMAND_STRUCTURE","SET_USER_DATA","drawer","flexShrink","breakpoints","down","drawerOpen","transition","transitions","create","easing","sharp","duration","enteringScreen","drawerClose","leavingScreen","paddingBottom","paddingLeft","paddingRight","bottomNavi","bottom","borderTop","up","bottomNaviElement","siemensLogo","verticalAlign","marginLeft","expandDrawerArrow","TimeseriesWorker","createWorker","MiniDrawer","onThemeChange","setDrawerOpen","bottomNaviValue","setBottomNaviValue","location","useLocation","pathname","reportsStructure","powerDemandStructure","appId","plantsData","reportsPowerDemand","handleSetAssetData","message","device","addEventListener","removeEventListener","terminate","deviceData","postMessage","infeedName","breakerAssetID","CssBaseline","Drawer","clsx","src","siemensLogoWhite","siemensLogoPetrol","alt","List","ListItem","button","Link","selected","ListItemIcon","ListItemText","BottomNavigation","showLabels","BottomNavigationAction","icon","lookupQuerystring","lookupCookie","lookupLocalStorage","lookupFromPathIndex","lookupFromSubdomainIndex","caches","excludeCacheFor","htmlTag","documentElement","checkWhitelist","checkForSimilarInWhitelist","cookieOptions","use","LanguageDetector","initReactI18next","init","resources","translation","overviewRouteName","elevationRouteName","eventsRouteName","powermonitorRouteName","reportsRouteName","languageSelectionName","toggleDarkMode","toggleLightMode","languageDialog","polishLanguage","englishLanguage","eventsPage","dateFromLabel","dateToLabel","allDevices","refreshButton","startDate","endDate","powermonitorPage","loadMonitoringTab","settingsTab","energyUsage","transformersLosses","sendEventsActive","sendEmailsActive","notificationsActive","saveButton","resetButton","current15minInterval","tableValueColumn","tableTimeColumn","addAddressButton","notifications","notificationsRegister","notificationsDeregister","energyUsageLabel","predictedUsageLabel","emailAddress","addEmailLabel","confirm","cancel","powermonitorInactive","overviewPage","elevationPage","reportsPage","monthlyEnergyUsage","energyUsageProfile","powers15min","infeedParameters","outgoingFeederParameters","chooseMonth","exportToPDF","exportToCSV","activeEnergyUsage","groupName","totalValue","activeEnergyImport","reactiveEnergyExport","reactiveEnergyImport","totalActiveEnergyImport","totalReactiveEnergyImport","totalReactiveEnergyExport","averageActivePower15Min","powerExceedings","tableColumnTime","tableColumnPower","tableColumnExceeding","tableColumnAlarmWarning","alarm","outfeedAverageActivePower","othersDataTitle","transformerChoice","energyChoice","genericParameterTitle","averageValue","maxValue","minValue","currentParametersTitle","voltageParametersTitle","powerSupplyFrom","reactiveImportPowerFactor","reactiveExportPowerFactor","powerFactorChartTitle","maxCurrent","avgCurrent","currentFlows","totalTHD","currentTHDInPhase","switchboardChoice","outfeedChoice","singleOutfeedParameters","maximum","datePicker","cancelButton","deviceDataDialog","overviewTab","currentTab","powerTab","THDITab","voltageLNTab","voltageLLTab","THDUTab","switchingDeviceStateTitle","breakerClosed","breakerOpen","breakerTripped","breakerDrawnOut","lastTripTitle","noTrippingOrAcknowledged","power","reactivePower","apparentPower","voltageLL","voltageLN","voltageL1L2","voltageL2L3","voltageL3L1","voltageL1N","voltageL2N","voltageL3N","generatorReady","generatorStopped","generatorState","showChartTooltip","activePowerExport","activePowerImport","reactivePowerExport","reactivePowerImport","exportTitle","tableWithSort","chart","timeAxisLabel","valueAxisLabel","svgCompartment","noConnection","detection","fallbackLng","keySeparator","interpolation","escapeValue","initialState","transformerLosses","sampleTime","serviceType","tenant","rootReducer","combineReducers","action","backdrop","avatar","blue","LanguageDialog","chooseLanguage","changeLanguage","ListItemAvatar","Avatar","zIndex","SimpleBackdrop","Backdrop","CircularProgress","timePickersContainer","CurrentTab","l1","setL1","l2","setL2","l3","setL3","setHours","pointsL1","pointsL2","pointsL3","OverviewTabCircuitBreakerSVG","outgoingFeederName","bottomSection","topSection","OverviewTabTransformerSVG","OverviewTabGeneratorSVG","masonryLayout","columnGap","webkitColumnGap","columnCount","webkitColumnCount","masonryLayoutPanel","breakInside","WebkitColumnBreakInside","overviewTabSVGMaxHeight","maxHeight","boxShadow","OverviewTab","eventTable","ev","currentTable","Tooltip","placement","powerTable","thdiTable","thduTable","voltageLLTable","voltageLNTable","couplingBreaker","svgVisualization","breakerStateAlert","PowerTab","setActivePowerExport","setReactivePowerExport","setActivePowerImport","setRectivePowerImport","activePowerExportPoints","reactivePowerExportPoints","activePowerImportPoints","reactivePowerImportPoints","BreakerDevice","VoltageLNTab","VoltageLLTab","TransformerDevice","appBar","flex","Transition","forwardRef","Slide","DeviceDataDialog","fullScreen","TransitionComponent","Toolbar","edge","showTabsAccordingToDeviceType","store","createStore","themeLight","createMuiTheme","light","main","dark","contrastText","secondary","themeDark","dark6","App","localStorage","getItem","darkTheme","setDarkTheme","utils","DateFnsUtils","ThemeProvider","setItem","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","isLocalhost","hostname","match","registerValidSW","swUrl","register","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","ReactDOM","render","getElementById","URL","process","href","origin","contentType","get","unregister","reload","checkValidServiceWorker","serviceWorkerRegistration","swPath","scope","LocalServiceWorkerRegister"],"mappings":"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","file":"static/js/main.37ada969.chunk.js","sourcesContent":["\n\t\t\t\tvar addMethods = require(\"../../node_modules/workerize-loader/dist/rpc-wrapper.js\")\n\t\t\t\tvar methods = []\n\t\t\t\tmodule.exports = function() {\n\t\t\t\t\tvar w = new Worker(__webpack_public_path__ + \"f6529ac1287de0cf76f3.worker.js\", { name: \"[hash].worker.js\" })\n\t\t\t\t\taddMethods(w, methods)\n\t\t\t\t\t\n\t\t\t\t\treturn w\n\t\t\t\t}\n\t\t\t","export enum DeviceTypes {\r\n  circuitBreaker = 'circuitBreaker',\r\n  transformer = 'transformer',\r\n  generator = 'generator',\r\n  infeedBreaker = 'infeedBreaker',\r\n  drawOutCircuitBreaker = 'drawOutCircuitBreaker',\r\n  couplingBreaker = 'couplingBreaker'\r\n}","import { IDeviceDataDialog } from '../reducers/DeviceDataDialog.reducer';\r\n\r\nexport const SET_DEVICE_DATA_DIALOG_OPEN = 'SET_DEVICE_DATA_DIALOG_OPEN';\r\nexport const SET_DEVICE_DATA_DIALOG_DATE_FROM = 'SET_DEVICE_DATA_DIALOG_DATE_FROM';\r\n\r\nexport const setDeviceDataDialogOpen = (params: IDeviceDataDialog) => (\r\n  {\r\n    type: SET_DEVICE_DATA_DIALOG_OPEN,\r\n    open: params.open,\r\n    deviceName: params.deviceName,\r\n    deviceType: params.deviceType,\r\n    breakerName: params.breakerName,\r\n    sectionName: params.sectionName,\r\n    assetID: params.assetID,\r\n    switchboardAssetID: params.switchboardAssetID\r\n  }\r\n);\r\n\r\nexport const setDeviceDataDialogDateFrom = (dateFrom: Date | null) => ({ type: SET_DEVICE_DATA_DIALOG_DATE_FROM, dateFrom })","import React from 'react';\r\nimport { lineLength, useStyles } from '../Overview.component';\r\nimport { setDeviceDataDialogOpen } from '../../actions/DeviceDataDialog.action';\r\nimport { useDispatch } from 'react-redux';\r\n\r\nexport interface IParametersTableSVG {\r\n  x: number,\r\n  y: number,\r\n  tableName: string,\r\n  parameter1: string | number,\r\n  parameter2: string | number,\r\n  parameter3: string | number,\r\n  deviceType: string,\r\n  breakerName: string,\r\n  sectionName: string,\r\n  assetID: string,\r\n  switchboardAssetID: string\r\n}\r\n\r\nexport const ParametersTableSVG: React.FC<IParametersTableSVG> = ({ x, y, tableName, parameter1, parameter2, parameter3, deviceType, breakerName, sectionName, assetID, switchboardAssetID }) => {\r\n  const classes = useStyles();\r\n  const dispatch = useDispatch();\r\n\r\n  return (\r\n    <React.Fragment>\r\n      {/* parameters table */}\r\n      <rect\r\n        x={x}\r\n        y={y}\r\n        width={1.1 * lineLength}\r\n        height={0.3 * lineLength}\r\n        className={classes.paramsTableTitleStyle}\r\n      />\r\n      <rect\r\n        x={x}\r\n        y={y + 0.3 * lineLength}\r\n        width={1.1 * lineLength}\r\n        height={0.3 * lineLength}\r\n        className={classes.paramsTableRowStyle}\r\n      />\r\n      <rect\r\n        x={x}\r\n        y={y + 0.6 * lineLength}\r\n        width={1.1 * lineLength}\r\n        height={0.3 * lineLength}\r\n        className={classes.paramsTableRowStyle}\r\n      />\r\n      <rect\r\n        x={x}\r\n        y={y + 0.9 * lineLength}\r\n        width={1.1 * lineLength}\r\n        height={0.3 * lineLength}\r\n        className={classes.paramsTableRowStyle}\r\n      />\r\n      {/* parameters table text rows */}\r\n      <text\r\n        x={x + 0.55 * lineLength}\r\n        y={y + 0.15 * lineLength}\r\n        className={classes.paramsTableTitleTextStyle}\r\n      >\r\n        {tableName}\r\n      </text>\r\n      <text\r\n        x={x + 1.1 * lineLength}\r\n        y={y + 0.45 * lineLength}\r\n        className={classes.paramsTableRowTextStyle}\r\n      >\r\n        {parameter1}&nbsp;\r\n      </text>\r\n      <text\r\n        x={x + 1.1 * lineLength}\r\n        y={y + 0.75 * lineLength}\r\n        className={classes.paramsTableRowTextStyle}\r\n      >\r\n        {parameter2}&nbsp;\r\n      </text>\r\n      <text\r\n        x={x + 1.1 * lineLength}\r\n        y={y + 1.05 * lineLength}\r\n        className={classes.paramsTableRowTextStyle}\r\n      >\r\n        {parameter3}&nbsp;\r\n      </text>\r\n      {/* clickable overlay */}\r\n      <rect\r\n        x={x}\r\n        y={y}\r\n        width={1.1 * lineLength}\r\n        height={1.2 * lineLength}\r\n        className={classes.clickableOverlay}\r\n        onClick={() => {\r\n          dispatch(setDeviceDataDialogOpen({\r\n            open: true,\r\n            deviceName: tableName,\r\n            deviceType: deviceType,\r\n            breakerName: breakerName,\r\n            sectionName: sectionName,\r\n            assetID: assetID,\r\n            switchboardAssetID: switchboardAssetID\r\n          }))\r\n        }\r\n        }\r\n      />\r\n    </React.Fragment>\r\n  )\r\n}","import React from 'react';\r\nimport { lineLength, circleRadius, useStyles } from '../Overview.component';\r\nimport { ParametersTableSVG } from './ParametersTableSVG.component';\r\nimport { DeviceTypes } from '../../utilities/DeviceTypes.utility';\r\n\r\nexport interface ITransformerSVGProps {\r\n  x: number,\r\n  y: number,\r\n  name: string,\r\n  sectionName: string,\r\n  assetID: string,\r\n  tableName?: string,\r\n  activePower?: number,\r\n  current?: number,\r\n  powerFactor?: number,\r\n  voltageApplied?: boolean,\r\n  noTable?: boolean,\r\n  //for DeviceDataDialog.component's OverviewTab visualization\r\n  overview?: boolean,\r\n  breakerName: string,\r\n  switchboardAssetID: string\r\n}\r\n\r\nexport const TransformerSVG: React.FC<ITransformerSVGProps> = ({ x, y, name, sectionName, tableName, assetID, activePower, current, powerFactor, voltageApplied, noTable, overview, breakerName, switchboardAssetID }) => {\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <React.Fragment>\r\n      {/* top to bottom */}\r\n      {/* transformer name if not overview mode */}\r\n      {!overview ?\r\n        <text\r\n          x={x}\r\n          y={y}\r\n          className={classes.infeedsNameStyle}\r\n        >\r\n          {name}&nbsp;\r\n        </text>\r\n        : null\r\n      }\r\n      {/* main symbol - 2 lines & 2 circles */}\r\n      <line\r\n        x1={x}\r\n        y1={y}\r\n        x2={x}\r\n        y2={y + 0.5 * lineLength}\r\n        className={voltageApplied ? classes.lineStyleVoltageApplied : classes.lineStyle}\r\n      />\r\n      <circle\r\n        cx={x}\r\n        cy={y + 0.5 * lineLength + circleRadius}\r\n        r={circleRadius}\r\n        className={voltageApplied ? classes.circleStyleVoltageApplied : classes.circleStyle}\r\n      />\r\n      <circle\r\n        cx={x}\r\n        cy={y + 0.5 * lineLength + 2 * circleRadius}\r\n        r={circleRadius}\r\n        className={voltageApplied ? classes.circleStyleVoltageApplied : classes.circleStyle}\r\n      />\r\n      <line\r\n        x1={x}\r\n        y1={y + 0.5 * lineLength + 3 * circleRadius}\r\n        x2={x}\r\n        y2={y + 1.5 * lineLength + 3 * circleRadius}\r\n        className={voltageApplied ? classes.lineStyleVoltageApplied : classes.lineStyle}\r\n      />\r\n      {!noTable && tableName ?\r\n        <ParametersTableSVG\r\n          x={x + 0.7 * lineLength}\r\n          y={y + 0.5 * lineLength}\r\n          tableName={tableName}\r\n          parameter1={`${activePower} kW`}\r\n          parameter2={`${current} A`}\r\n          parameter3={`${powerFactor} PF`}\r\n          deviceType={DeviceTypes.transformer}\r\n          breakerName={breakerName}\r\n          sectionName={sectionName}\r\n          assetID={assetID}\r\n          switchboardAssetID={switchboardAssetID}\r\n        />\r\n        : null\r\n      }\r\n      {/* DeviceDataDialog's OverviewTab visualization */}\r\n      {overview ?\r\n        <text\r\n          x={x}\r\n          y={y}\r\n          className={classes.overviewTabSVGTextsCentralLeftAnchor}\r\n        >\r\n          &nbsp;&nbsp;{name}\r\n        </text>\r\n        : null\r\n      }\r\n    </React.Fragment>\r\n  )\r\n}","export enum SiemensColors {\r\n  tealLight = 'rgb(65, 170, 170)', // Siemens Accent Teal Light \r\n  greenLight = 'rgb(170, 180, 20)', // Siemens Accent Green Light\r\n  redLight = 'rgb(175, 35, 95)', // Siemens Accent Red Light\r\n  yellowLight = 'rgb(255, 185, 0)', // Siemens Accent Yellow Light\r\n  blueLight = 'rgb(80, 190, 215)', // Siemens Accent Blue Light\r\n  tealDark = 'rgb(0, 100, 110)', // Siemens Accent Teal Dark\r\n  greenDark = 'rgb(100, 125, 45)', // Siemens Accent Green Dark\r\n  redDark = 'rgb(100, 25, 70)', // Siemens Accent Red Dark\r\n  yellowDark = 'rgb(235, 120, 10)', // Siemens Accent Yellow Dark\r\n  blueDark = 'rgb(0, 95, 135)', // Siemens Accent Blue Dark\r\n}\r\n\r\nexport enum SiemensColorsAlpha {\r\n  tealLightAlpha = 'rgba(65, 170, 170, 0.5)', // Siemens Accent Teal Light Alpha 50%\r\n  greenLightAlpha = 'rgba(170, 180, 20, 0.5)', // Siemens Accent Green Light Alpha 50%\r\n  redLightAlpha = 'rgba(175, 35, 95, 0.5)', // Siemens Accent Red Light Alpha 50%\r\n  yellowLightAlpha = 'rgba(255, 185, 0, 0.5)', // Siemens Accent Yellow Light Alpha 50%\r\n  blueLightAlpha = 'rgba(80, 190, 215, 0.5)', // Siemens Accent Blue Light Alpha 50%\r\n  tealDarkAlpha = 'rgba(0, 100, 110, 0.5)', // Siemens Accent Teal Dark Alpha 50%\r\n  greenDarkAlpha = 'rgba(100, 125, 45, 0.5)', // Siemens Accent Green Dark Alpha 50%\r\n  redDarkAlpha = 'rgba(100, 25, 70, 0.5)', // Siemens Accent Red Dark Alpha 50%\r\n  yellowDarkAlpha = 'rgba(235, 120, 10, 0.5)', // Siemens Accent Yellow Dark Alpha 50%\r\n  blueDarkAlpha = 'rgba(0, 95, 135, 0.5)', // Siemens Accent Blue Dark Alpha 50%\r\n}\r\n\r\nexport enum SiemensAccentTeal {\r\n  dark1 = '#003c46',\r\n  dark2 = '#004b55',\r\n  dark3 = '#00646e',\r\n  dark4 = '#00737d',\r\n  dark5 = '#0f8287',\r\n  dark6 = '#239196',\r\n  light1 = '#32a0a0',\r\n  light2 = '#41aaaa',\r\n  light3 = '#4bb9b9',\r\n  light4 = '#78cdcd',\r\n  light5 = '#a5e1e1',\r\n  light6 = '#c3f0f0'\r\n}\r\n\r\nexport enum SiemensAccentBlue {\r\n  dark1 = '#003750',\r\n  dark2 = '#004669',\r\n  dark3 = '#00557d',\r\n  dark4 = '#005f87',\r\n  dark5 = '#0f789b',\r\n  dark6 = '#2387aa',\r\n  light1 = '#3296b9',\r\n  light2 = '#41aac8',\r\n  light3 = '#50bed7',\r\n  light4 = '#7dd2e6',\r\n  light5 = '#aae6f5',\r\n  light6 = '#c8f5ff'\r\n}\r\n\r\nexport enum SiemensAccentYellow {\r\n  dark1 = '#7d2d1e',\r\n  dark2 = '#a03c23',\r\n  dark3 = '#b44b28',\r\n  dark4 = '#c85a1e',\r\n  dark5 = '#dc6914',\r\n  dark6 = '#eb780a',\r\n  light1 = '#f58c14',\r\n  light2 = '#faa50a',\r\n  light3 = '#ffb900',\r\n  light4 = '#ffcd50',\r\n  light5 = '#ffe178',\r\n  light6 = '#fff09b'\r\n}\r\n\r\nexport enum SiemensAccentRed {\r\n  dark1 = '#411432',\r\n  dark2 = '#50143c',\r\n  dark3 = '#641946',\r\n  dark4 = '#781e4b',\r\n  dark5 = '#871e50',\r\n  dark6 = '#9b1e5a',\r\n  light1 = '#af235f',\r\n  light2 = '#c34673',\r\n  light3 = '#d7698c',\r\n  light4 = '#e687a5',\r\n  light5 = '#f0aac3',\r\n  light6 = '#f5c8dc'\r\n}\r\n\r\nexport enum SiemensAccentGreen {\r\n  dark1 = '#37500f',\r\n  dark2 = '#465f19',\r\n  dark3 = '#556e28',\r\n  dark4 = '#647d28',\r\n  dark5 = '#738732',\r\n  dark6 = '#879628',\r\n  light1 = '#96a51e',\r\n  light2 = '#aab414',\r\n  light3 = '#bec328',\r\n  light4 = '#d2d741',\r\n  light5 = '#e6e65f',\r\n  light6 = '#f0f08c'\r\n}\r\n\r\nexport const decideDataColor = (index: number) => {\r\n  switch (index) {\r\n    case 0: return SiemensAccentTeal.light2\r\n    case 1: return SiemensAccentYellow.light2\r\n    case 2: return SiemensAccentGreen.light2\r\n    case 3: return SiemensAccentRed.light2\r\n    case 4: return SiemensAccentBlue.light2\r\n    case 5: return SiemensAccentTeal.light4\r\n    case 6: return SiemensAccentYellow.light4\r\n    case 7: return SiemensAccentGreen.light4\r\n    case 8: return SiemensAccentRed.light4\r\n    case 9: return SiemensAccentBlue.light4\r\n    case 10: return SiemensAccentTeal.light6\r\n    case 11: return SiemensAccentYellow.light6\r\n    case 12: return SiemensAccentGreen.light6\r\n    case 13: return SiemensAccentRed.light6\r\n    case 14: return SiemensAccentBlue.light6\r\n    case 15: return SiemensAccentTeal.dark2\r\n    case 16: return SiemensAccentYellow.dark2\r\n    case 17: return SiemensAccentGreen.dark2\r\n    case 18: return SiemensAccentBlue.dark2\r\n    case 20: return SiemensAccentTeal.light3\r\n    case 21: return SiemensAccentYellow.light3\r\n    case 22: return SiemensAccentGreen.light3\r\n    case 23: return SiemensAccentRed.light3 \r\n    case 24: return SiemensAccentBlue.light3\r\n    case 25: return SiemensAccentTeal.light5 \r\n    case 26: return SiemensAccentYellow.light5 \r\n    case 27: return SiemensAccentGreen.light5 \r\n    case 28: return SiemensAccentRed.light5\r\n    case 29: return SiemensAccentBlue.light5 \r\n    case 30: return SiemensAccentTeal.dark1 \r\n    case 31: return SiemensAccentYellow.dark1 \r\n    case 32: return SiemensAccentGreen.dark1 \r\n    case 33: return SiemensAccentRed.dark1 \r\n    case 34: return SiemensAccentBlue.dark1\r\n    case 35: return SiemensAccentTeal.dark3 \r\n    case 36: return SiemensAccentYellow.dark3 \r\n    case 37: return SiemensAccentGreen.dark3\r\n    case 38: return SiemensAccentRed.dark3 \r\n    case 39: return SiemensAccentBlue.dark3\r\n    default: return SiemensAccentRed.dark1\r\n  }\r\n}","export const SET_UNIVERSAL_TABS_NAME_INDEX = 'SET_UNIVERSAL_TABS_NAME_INDEX';\r\n\r\nexport const setUniversalTabsNameIndex = (name: string, index: number) => ({ type: SET_UNIVERSAL_TABS_NAME_INDEX, name: name, index: index })","import React from 'react';\r\nimport { lineLength, useStyles } from '../Overview.component';\r\nimport { ParametersTableSVG } from './ParametersTableSVG.component';\r\nimport { useDispatch } from 'react-redux';\r\nimport { setUniversalTabsNameIndex } from '../../actions/UniversalTabs.action';\r\n\r\ninterface ICircuitBreakerSVG {\r\n  x: number,\r\n  y: number,\r\n  state: {\r\n    closed: boolean,\r\n    tripped: boolean,\r\n    drawnOut: boolean\r\n  },\r\n  name: string,\r\n  deviceType: string,\r\n  sectionName: string,\r\n  assetID: string,\r\n  tableName?: string,\r\n  activePower?: number,\r\n  current?: number,\r\n  powerFactor?: number,\r\n  voltageApplied?: boolean,\r\n  noTable?: boolean,\r\n  tableAbove?: boolean,\r\n  nextSwitchboardIndex?: number,\r\n  previousSwitchboardIndex?: number,\r\n  drawOut?: boolean,\r\n  voltageAbove?: boolean,\r\n  voltageBelow?: boolean,\r\n  switchboardAssetID: string\r\n}\r\n\r\nexport const CircuitBreakerSVG: React.FC<ICircuitBreakerSVG> = (\r\n  {\r\n    x,\r\n    y,\r\n    state,\r\n    name,\r\n    deviceType,\r\n    sectionName,\r\n    assetID,\r\n    tableName,\r\n    activePower,\r\n    current,\r\n    powerFactor,\r\n    noTable,\r\n    tableAbove,\r\n    nextSwitchboardIndex,\r\n    previousSwitchboardIndex,\r\n    drawOut,\r\n    voltageAbove,\r\n    voltageBelow,\r\n    switchboardAssetID\r\n  }\r\n) => {\r\n  const classes = useStyles();\r\n  const dispatch = useDispatch();\r\n\r\n  return (\r\n    <React.Fragment>\r\n      {/* top to bottom */}\r\n      <text\r\n        x={x}\r\n        y={y + 0.07 * lineLength}\r\n        className={classes.circuitBreakersNameStyle}\r\n      >\r\n        {name}&nbsp;\r\n        </text>\r\n      {/* top line */}\r\n      <line\r\n        x1={x}\r\n        y1={y}\r\n        x2={x}\r\n        y2={y + lineLength}\r\n        className={voltageAbove ? classes.lineStyleVoltageApplied : classes.lineStyle}\r\n      />\r\n      {drawOut ?\r\n        /* top dashes if drawOut - 4 * 90deg connected lines */\r\n        <React.Fragment>\r\n          <line\r\n            x1={x}\r\n            y1={y + 0.25 * lineLength}\r\n            x2={x}\r\n            y2={y + 0.5 * lineLength}\r\n            className={voltageAbove ? classes.lineStyleVoltageApplied : classes.lineStyle}\r\n            transform={`rotate(45 ${x} ${y + 0.25 * lineLength})`}\r\n          />\r\n          <line\r\n            x1={x}\r\n            y1={y + 0.25 * lineLength}\r\n            x2={x}\r\n            y2={y + 0.5 * lineLength}\r\n            className={voltageAbove ? classes.lineStyleVoltageApplied : classes.lineStyle}\r\n            transform={`rotate(315 ${x} ${y + 0.25 * lineLength})`}\r\n          />\r\n          <line\r\n            x1={x}\r\n            y1={y + 0.15 * lineLength}\r\n            x2={x}\r\n            y2={y + 0.4 * lineLength}\r\n            className={voltageAbove ? classes.lineStyleVoltageApplied : classes.lineStyle}\r\n            transform={`rotate(135 ${x} ${y + 0.4 * lineLength})`}\r\n          />\r\n          <line\r\n            x1={x}\r\n            y1={y + 0.15 * lineLength}\r\n            x2={x}\r\n            y2={y + 0.4 * lineLength}\r\n            className={voltageAbove ? classes.lineStyleVoltageApplied : classes.lineStyle}\r\n            transform={`rotate(225 ${x} ${y + 0.4 * lineLength})`}\r\n          />\r\n          {/* bottom dashes - 4 * 90deg connected lines */}\r\n          <line\r\n            x1={x}\r\n            y1={y + 2.6 * lineLength}\r\n            x2={x}\r\n            y2={y + 2.85 * lineLength}\r\n            className={voltageBelow ? classes.lineStyleVoltageApplied : classes.lineStyle}\r\n            transform={`rotate(135 ${x} ${y + 2.6 * lineLength})`}\r\n          />\r\n          <line\r\n            x1={x}\r\n            y1={y + 2.6 * lineLength}\r\n            x2={x}\r\n            y2={y + 2.85 * lineLength}\r\n            className={voltageBelow ? classes.lineStyleVoltageApplied : classes.lineStyle}\r\n            transform={`rotate(225 ${x} ${y + 2.6 * lineLength})`}\r\n          />\r\n          <line\r\n            x1={x}\r\n            y1={y + 2.5 * lineLength}\r\n            x2={x}\r\n            y2={y + 2.75 * lineLength}\r\n            className={voltageBelow ? classes.lineStyleVoltageApplied : classes.lineStyle}\r\n            transform={`rotate(45 ${x} ${y + 2.75 * lineLength})`}\r\n          />\r\n          <line\r\n            x1={x}\r\n            y1={y + 2.5 * lineLength}\r\n            x2={x}\r\n            y2={y + 2.75 * lineLength}\r\n            className={voltageBelow ? classes.lineStyleVoltageApplied : classes.lineStyle}\r\n            transform={`rotate(315 ${x} ${y + 2.75 * lineLength})`}\r\n          />\r\n        </React.Fragment>\r\n        : null\r\n      }\r\n      {/* 'X' symbol - 2 * 90deg crossed lines*/}\r\n      <line\r\n        x1={x}\r\n        y1={y + 0.75 * lineLength}\r\n        x2={x}\r\n        y2={y + 1.25 * lineLength}\r\n        className={voltageAbove ? classes.lineStyleVoltageApplied : classes.lineStyle}\r\n        transform={`rotate(45 ${x} ${y + lineLength})`}\r\n      />\r\n      <line\r\n        x1={x}\r\n        y1={y + 0.75 * lineLength}\r\n        x2={x}\r\n        y2={y + 1.25 * lineLength}\r\n        className={voltageAbove ? classes.lineStyleVoltageApplied : classes.lineStyle}\r\n        transform={`rotate(-45 ${x} ${y + lineLength})`}\r\n      />\r\n      {/* breaker's rotating element */}\r\n      <line\r\n        x1={x}\r\n        y1={y + lineLength}\r\n        x2={x}\r\n        y2={y + 2 * lineLength}\r\n        transform={state.closed ? `rotate(0 ${x} ${y + 2 * lineLength})` : `rotate(-45 ${x} ${y + 2 * lineLength})`}\r\n        className={voltageBelow ? classes.lineStyleVoltageApplied : classes.lineStyle}\r\n      />\r\n      {/* end line */}\r\n      <line\r\n        x1={x}\r\n        y1={y + 2 * lineLength}\r\n        x2={x}\r\n        y2={y + 3 * lineLength}\r\n        className={voltageBelow ? classes.lineStyleVoltageApplied : classes.lineStyle}\r\n      />\r\n      {/* params table */}\r\n      {\r\n        !noTable && tableName ? <ParametersTableSVG\r\n          x={x - 1.1 * lineLength / 2}\r\n          y={tableAbove ? y - 1.25 * lineLength : y + 3 * lineLength}\r\n          tableName={tableName}\r\n          parameter1={`${activePower} kW`}\r\n          parameter2={`${current} A`}\r\n          parameter3={`${powerFactor} PF`}\r\n          deviceType={deviceType}\r\n          breakerName={name}\r\n          sectionName={sectionName}\r\n          assetID={assetID}\r\n          switchboardAssetID={switchboardAssetID}\r\n        /> : null\r\n      }\r\n      {/* arrow top if tableAbove */}\r\n      {!noTable && tableName && tableAbove && previousSwitchboardIndex !== undefined ?\r\n        <React.Fragment>\r\n          {/* top arrow */}\r\n          <line\r\n            x1={x}\r\n            x2={x}\r\n            y1={y - 2.2 * lineLength}\r\n            y2={y - 1.3 * lineLength}\r\n            className={voltageAbove ? classes.lineStyleVoltageApplied : classes.lineStyle}\r\n          />\r\n          {/* 2 crossed lines forming arrow */}\r\n          <line\r\n            x1={x}\r\n            y1={y - 2.2 * lineLength}\r\n            x2={x}\r\n            y2={y - 1.95 * lineLength}\r\n            className={voltageAbove ? classes.lineStyleVoltageApplied : classes.lineStyle}\r\n            transform={`rotate(45 ${x} ${y - 2.2 * lineLength})`}\r\n          />\r\n          <line\r\n            x1={x}\r\n            y1={y + -2.2 * lineLength}\r\n            x2={x}\r\n            y2={y - 1.95 * lineLength}\r\n            className={voltageAbove ? classes.lineStyleVoltageApplied : classes.lineStyle}\r\n            transform={`rotate(315 ${x} ${y - 2.2 * lineLength})`}\r\n          />\r\n          {/* clickable overlay */}\r\n          <rect\r\n            onClick={() => dispatch(setUniversalTabsNameIndex('overview', previousSwitchboardIndex))}\r\n            x={x - 0.55 * lineLength}\r\n            y={y - 2.3 * lineLength}\r\n            width={1.1 * lineLength}\r\n            height={1.05 * lineLength}\r\n            className={classes.clickableOverlay}\r\n          />\r\n        </React.Fragment>\r\n        : null\r\n      }\r\n      {/* arrow to next diagram if the circuit breaker infeeds next switchboard */}\r\n      {nextSwitchboardIndex !== undefined ?\r\n        <React.Fragment>\r\n          {/* top arrow */}\r\n          <line\r\n            x1={x}\r\n            x2={x}\r\n            y1={y + 4.25 * lineLength}\r\n            y2={y + 4.75 * lineLength}\r\n            className={voltageBelow ? classes.lineStyleVoltageApplied : classes.lineStyle}\r\n          />\r\n          {/* 2 crossed lines forming arrow */}\r\n          <line\r\n            x1={x}\r\n            y1={y + 4.75 * lineLength}\r\n            x2={x}\r\n            y2={y + 5 * lineLength}\r\n            className={voltageBelow ? classes.lineStyleVoltageApplied : classes.lineStyle}\r\n            transform={`rotate(135 ${x} ${y + 4.75 * lineLength})`}\r\n          />\r\n          <line\r\n            x1={x}\r\n            y1={y + 4.75 * lineLength}\r\n            x2={x}\r\n            y2={y + 5 * lineLength}\r\n            className={voltageBelow ? classes.lineStyleVoltageApplied : classes.lineStyle}\r\n            transform={`rotate(225 ${x} ${y + 4.75 * lineLength})`}\r\n          />\r\n          {/* clickable overlay */}\r\n          <rect\r\n            onClick={() => dispatch(setUniversalTabsNameIndex('overview', nextSwitchboardIndex))}\r\n            x={x - 0.55 * lineLength}\r\n            y={y + 4.2 * lineLength}\r\n            width={1.1 * lineLength}\r\n            height={0.75 * lineLength}\r\n            className={classes.clickableOverlay}\r\n          />\r\n        </React.Fragment>\r\n        : null\r\n      }\r\n    </React.Fragment>\r\n  )\r\n}","import React from 'react';\r\nimport { lineLength, circleRadius, useStyles } from '../Overview.component';\r\nimport { ParametersTableSVG } from './ParametersTableSVG.component';\r\nimport { DeviceTypes } from '../../utilities/DeviceTypes.utility';\r\nimport { ITransformerSVGProps } from './TransformerSVG.component';\r\n\r\nexport const GeneratorSVG: React.FC<ITransformerSVGProps> = ({ x, y, name, sectionName, tableName, assetID, activePower, current, powerFactor, voltageApplied, noTable, overview, breakerName, switchboardAssetID }) => {\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <React.Fragment>\r\n      {/* top to bottom */}\r\n      {/* generator name if not overview mode */}\r\n      {!overview ?\r\n        <text\r\n          x={x + 2 * lineLength}\r\n          y={y}\r\n          className={classes.infeedsNameStyle}\r\n        >\r\n          {name}&nbsp;\r\n      </text>\r\n        : null\r\n      }\r\n      {/* circle, 'G' symbol & end line */}\r\n      <circle\r\n        cx={x}\r\n        cy={y + circleRadius}\r\n        r={circleRadius}\r\n        className={voltageApplied ? classes.circleStyleVoltageApplied : classes.circleStyle}\r\n      />\r\n      <text\r\n        x={x}\r\n        y={y + circleRadius}\r\n        className={classes.generatorSymbolTextStyle}\r\n      >\r\n        G\r\n      </text>\r\n      <line\r\n        x1={x}\r\n        y1={y + 2 * circleRadius}\r\n        x2={x}\r\n        y2={y + 2 * circleRadius + 2 * lineLength}\r\n        className={voltageApplied ? classes.lineStyleVoltageApplied : classes.lineStyle}\r\n      />\r\n      {!noTable && tableName ?\r\n        <ParametersTableSVG\r\n          x={x + 0.7 * lineLength}\r\n          y={y + 0.5 * lineLength}\r\n          tableName={tableName}\r\n          parameter1={`${activePower} kW`}\r\n          parameter2={`${current} A`}\r\n          parameter3={`${powerFactor} PF`}\r\n          deviceType={DeviceTypes.generator}\r\n          breakerName={breakerName}\r\n          sectionName={sectionName}\r\n          assetID={assetID}\r\n          switchboardAssetID={switchboardAssetID}\r\n        />\r\n        : null\r\n      }\r\n      {/* DeviceDataDialog's OverviewTab visualization */}\r\n      {overview ?\r\n        <text\r\n          x={x + circleRadius}\r\n          y={y}\r\n          className={classes.overviewTabSVGTextsCentralLeftAnchor}\r\n        >\r\n          &nbsp;&nbsp;{name}\r\n        </text>\r\n        : null\r\n      }\r\n    </React.Fragment>\r\n  )\r\n}","import React from 'react';\r\nimport { lineLength, useStyles } from '../Overview.component';\r\n\r\ninterface ISectionSVG {\r\n  x: number,\r\n  y: number,\r\n  length: number,\r\n  voltageApplied?: boolean,\r\n  endCoupling?: React.ReactNode,\r\n  nextSectionVoltageApplied?: boolean\r\n}\r\n\r\nexport const SectionSVG: React.FC<ISectionSVG> = ({ x, y, length, voltageApplied, endCoupling, nextSectionVoltageApplied }) => {\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <React.Fragment>\r\n      {/* top to bottom */}\r\n      <line\r\n        x1={x - 0.25 * lineLength}\r\n        y1={y}\r\n        x2={x + length + 0.25 * lineLength}\r\n        y2={y}\r\n        className={voltageApplied ? classes.lineStyleVoltageApplied : classes.lineStyle}\r\n      />\r\n      {/* breaker component passed as a prop, if coupling */}\r\n      {endCoupling ?\r\n        endCoupling\r\n        : null\r\n      }\r\n      {/* line connection to next section */}\r\n      {endCoupling ?\r\n        <React.Fragment>\r\n          {/* horizontal line */}\r\n          <line\r\n            x1={x + length}\r\n            y1={y - 3 * lineLength}\r\n            x2={x + length + lineLength}\r\n            y2={y - 3 * lineLength}\r\n            className={nextSectionVoltageApplied ? classes.lineStyleVoltageApplied : classes.lineStyle}\r\n          />\r\n          {/* vertical line */}\r\n          <line\r\n            x1={x + length + lineLength}\r\n            y1={y - 3 * lineLength}\r\n            x2={x + length + lineLength}\r\n            y2={y}\r\n            className={nextSectionVoltageApplied ? classes.lineStyleVoltageApplied : classes.lineStyle}\r\n          />\r\n        </React.Fragment>\r\n        : null\r\n      }\r\n    </React.Fragment>\r\n  )\r\n}\r\n","// universal tabs component with tabpanels, only horizontal\r\n//pass required prop 'tabs' to it with [{label: yourlabeltext, content: yourcontent}, ...]\r\n// prop required 'name' required for redux active tab index storage\r\n\r\nimport React from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Tabs from '@material-ui/core/Tabs';\r\nimport Tab from '@material-ui/core/Tab';\r\nimport Box from '@material-ui/core/Box';\r\nimport { setUniversalTabsNameIndex } from '../actions/UniversalTabs.action';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { RootState } from '../reducers/Root.reducer';\r\n\r\ninterface ITabPanelProps {\r\n  children?: React.ReactNode,\r\n  value: number,\r\n  index: number,\r\n  other?: any,\r\n}\r\n\r\nconst TabPanel: React.FC<ITabPanelProps> = ({ children, value, index, other }) => {\r\n  return (\r\n    <div\r\n      role=\"tabpanel\"\r\n      hidden={value !== index}\r\n      id={`scrollable-force-tabpanel-${index}`}\r\n      aria-labelledby={`scrollable-force-tab-${index}`\r\n      }\r\n      {...other}\r\n    >\r\n      { value === index && (\r\n        <Box p={1}>\r\n          {children}\r\n        </Box>\r\n      )}\r\n    </div >\r\n  );\r\n}\r\n\r\nconst a11yProps = (index: number) => {\r\n  return {\r\n    id: `scrollable-force-tab-${index}`,\r\n    'aria-controls': `scrollable-force-tabpanel-${index}`,\r\n  };\r\n}\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    flexGrow: 1,\r\n    '& > * + *': {\r\n      paddingTop: theme.spacing(2),\r\n    },\r\n  }\r\n}));\r\n\r\nexport interface IUniversalTabsProps {\r\n  name: string,\r\n  tabs: Array<{ label: string; content: React.ReactNode; }>\r\n}\r\n\r\nexport const UniversalTabs: React.FC<IUniversalTabsProps> = ({ name, tabs }) => {\r\n  const classes = useStyles();\r\n  const tabsInstance = useSelector((state: RootState) => state.universalTabs)\r\n  const dispatch = useDispatch();\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <AppBar position=\"static\" color=\"default\">\r\n        <Tabs\r\n          value={tabsInstance[name] || 0} //currently selected tab\r\n          onChange={(event, value) => dispatch(setUniversalTabsNameIndex(name, value))}\r\n          variant=\"scrollable\"\r\n          scrollButtons=\"auto\"\r\n          indicatorColor=\"secondary\"\r\n          textColor=\"secondary\"\r\n          aria-label=\"scrollable force tabs\"\r\n        >\r\n          {tabs.map((tab, i) => {\r\n            return <Tab key={`tab-${i}`} label={tab.label} {...a11yProps(i)} />\r\n          })}\r\n        </Tabs>\r\n      </AppBar>\r\n      {tabs.map((tab, i) => {\r\n        return <TabPanel key={`tabpanel-${i}`} value={tabsInstance[name] || 0} index={i}>\r\n          {tab.content}\r\n        </TabPanel>\r\n      })}\r\n    </div>\r\n  );\r\n}\r\n","export const decodeState = (state: number) => {\r\n  let closed: boolean = false;\r\n  let tripped: boolean = false;\r\n  let drawnOut: boolean = false;\r\n  if (Boolean(state & 1)) {\r\n    closed = true\r\n  }\r\n  if (Boolean(state & 2)) {\r\n    tripped = true\r\n  }\r\n  if (Boolean(state & 4)) {\r\n    drawnOut = true\r\n  }\r\n  return {\r\n    closed,\r\n    tripped,\r\n    drawnOut\r\n  }\r\n}","export const powerFactorCalculator = (P: number, Q: number) => {\r\n  const result = parseFloat((P / (Math.sqrt(Math.pow(P, 2) + Math.pow(Q, 2)))).toFixed(3))\r\n  if (isNaN(result)) {\r\n    return 0\r\n  }\r\n  else {\r\n    return result\r\n  }\r\n}","import React from 'react';\r\nimport { makeStyles, createStyles, Theme } from '@material-ui/core/styles';\r\nimport { useTranslation } from 'react-i18next';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport { TransformerSVG } from './Overview/TransformerSVG.component';\r\nimport { CircuitBreakerSVG } from './Overview/CircuitBreakerSVG.component';\r\nimport { GeneratorSVG } from './Overview/GeneratorSVG.component';\r\nimport { SiemensAccentBlue, SiemensAccentTeal, SiemensAccentYellow } from '../utilities/SiemensColors.utility';\r\nimport { SectionSVG } from './Overview/SectionSVG.component';\r\nimport { useSelector } from 'react-redux';\r\nimport { RootState } from '../reducers/Root.reducer';\r\nimport { UniversalTabs } from './UniversalTabs.component';\r\nimport { DeviceTypes } from '../utilities/DeviceTypes.utility';\r\nimport { decodeState } from '../utilities/DecodeState.utility';\r\nimport { powerFactorCalculator } from '../utilities/PowerFactorCalculator.utility';\r\n\r\n//common constants for SVGs to import /////////////////\r\nexport const lineLength = 6;\r\nexport const circleRadius = 0.5 * lineLength;\r\n\r\nexport const useStyles = makeStyles((theme: Theme) =>\r\n  createStyles({\r\n    lineStyle: {\r\n      stroke: theme.palette.type === 'dark' ? theme.palette.text.primary : '#000000',\r\n      strokeWidth: lineLength / 25,\r\n      strokeLinecap: 'round'\r\n    },\r\n    circleStyle: {\r\n      stroke: theme.palette.type === 'dark' ? theme.palette.text.primary : '#000000',\r\n      strokeWidth: lineLength / 25,\r\n      strokeLinecap: 'round',\r\n      fill: 'none'\r\n    },\r\n    lineStyleVoltageApplied: {\r\n      strokeWidth: lineLength / 25,\r\n      strokeLinecap: 'round',\r\n      stroke: '#10b115',\r\n    },\r\n    circleStyleVoltageApplied: {\r\n      strokeWidth: lineLength / 25,\r\n      strokeLinecap: 'round',\r\n      fill: 'none',\r\n      stroke: '#10b115',\r\n    },\r\n    generatorSymbolTextStyle: {\r\n      fontSize: `${circleRadius / 10}em`,\r\n      fill: theme.palette.type === 'dark' ? theme.palette.text.primary : SiemensAccentTeal.dark3,\r\n      textAnchor: 'middle',\r\n      dominantBaseline: 'central'\r\n    },\r\n    paramsTableTitleStyle: {\r\n      stroke: theme.palette.type === 'dark' ? SiemensAccentYellow.light3 : SiemensAccentBlue.dark4,\r\n      strokeWidth: lineLength / 64,\r\n      fill: theme.palette.type === 'dark' ? theme.palette.background.paper : SiemensAccentBlue.dark4,\r\n    },\r\n    paramsTableRowStyle: {\r\n      stroke: theme.palette.type === 'dark' ? SiemensAccentYellow.light3 : SiemensAccentBlue.dark4,\r\n      strokeWidth: lineLength / 64,\r\n      fill: theme.palette.type === 'dark' ? theme.palette.background.paper : SiemensAccentBlue.light6,\r\n    },\r\n    paramsTableTitleTextStyle: {\r\n      fontSize: `${circleRadius / 39}em`,\r\n      fill: theme.palette.type === 'dark' ? theme.palette.text.primary : '#ffffff',\r\n      textAnchor: 'middle',\r\n      dominantBaseline: 'central',\r\n      letterSpacing: '-0.03em'\r\n    },\r\n    paramsTableRowTextStyle: {\r\n      fontSize: `${circleRadius / 36}em`,\r\n      fill: theme.palette.text.primary,\r\n      textAnchor: 'end',\r\n      dominantBaseline: 'central',\r\n      letterSpacing: '-0.02em',\r\n    },\r\n    infeedsNameStyle: {\r\n      fontSize: `${circleRadius / 15}em`,\r\n      fill: theme.palette.type === 'dark' ? theme.palette.text.primary : SiemensAccentTeal.dark3,\r\n      textAnchor: 'end',\r\n      dominantBaseline: 'hanging',\r\n      letterSpacing: '-0.05em'\r\n    },\r\n    circuitBreakersNameStyle: {\r\n      fill: theme.palette.type === 'dark' ? theme.palette.text.primary : SiemensAccentTeal.dark3,\r\n      textAnchor: 'end',\r\n      dominantBaseline: 'hanging',\r\n      letterSpacing: '-0.05em',\r\n      fontSize: `${circleRadius / 26}em`,\r\n    },\r\n    clickableOverlay: {\r\n      fill: 'rgba(255, 255, 255, 0)',\r\n      \"&:hover, &:focus\": {\r\n        stroke: SiemensAccentYellow.light3,\r\n        strokeWidth: lineLength / 32,\r\n      }\r\n    },\r\n    overviewTabSVGTextsCentralAnchor: {\r\n      fontSize: `${circleRadius / 32}em`,\r\n      fill: theme.palette.text.primary,\r\n      textAnchor: 'middle',\r\n      dominantBaseline: 'central',\r\n      letterSpacing: '-0.02em'\r\n    },\r\n    overviewTabSVGTextsCentralLeftAnchor: {\r\n      fontSize: `${circleRadius / 32}em`,\r\n      fill: theme.palette.text.primary,\r\n      textAnchor: 'start',\r\n      dominantBaseline: 'hanging',\r\n      letterSpacing: '-0.02em'\r\n    },\r\n    svgContainer: {\r\n      overflowX: 'auto',\r\n      whiteSpace: 'nowrap'\r\n    },\r\n    svgElement: {\r\n      minWidth: '1500px',\r\n    }\r\n  }));\r\n///////////////////////////////////////////////////\r\n\r\nconst negativeOffsetX = -4;\r\nconst negativeOffsetY = -3;\r\n\r\nexport const Overview = () => {\r\n  const { t } = useTranslation();\r\n  const classes = useStyles();\r\n  const overview = useSelector((state: RootState) => state.overview);\r\n  const systemTopologyData = useSelector((state: RootState) => state.systemTopologyData);\r\n\r\n  const svgViewBoxX = 150;\r\n  const svgViewBoxY = 74;\r\n\r\n  const renderTabsWithCircuitDiagrams = (): Array<{ label: string, content: React.ReactNode }> => {\r\n    let tabs: Array<{ label: string, content: React.ReactNode }> = [];\r\n    overview.diagrams.forEach((diagram, diagramIndex) => {\r\n      const content = (\r\n        <div className={classes.svgContainer}>\r\n          <svg viewBox={`${negativeOffsetX} ${negativeOffsetY} ${svgViewBoxX} ${svgViewBoxY}`} className={classes.svgElement}>\r\n            {renderDiagramName(diagram.name, svgViewBoxX + negativeOffsetX, 0 + negativeOffsetY)}\r\n            {diagram.sections.map((section: any, sectionIndex: any) => {\r\n              const infeeds = section.infeeds?.map((infeed: any, infeedIndex: any) => {\r\n                return renderInfeed(infeed.name,\r\n                  `${t('deviceDataDialog.section')} ${section.name}`,\r\n                  section,\r\n                  infeed.tableName,\r\n                  infeed.breaker,\r\n                  infeed.type,\r\n                  ((svgViewBoxX / diagram.sections.length) / section.infeeds.length) / 2 + infeedIndex * (svgViewBoxX / diagram.sections.length) / section.infeeds.length + sectionIndex * (svgViewBoxX / diagram.sections.length),\r\n                  0,\r\n                  diagram.assetID ? diagram.assetID : '') //switchboard name\r\n              })\r\n              ///////////////////////////\r\n              const sectionLines = renderSection(sectionIndex * svgViewBoxX / diagram.sections.length + lineLength / 2, // x\r\n                6 * lineLength, // y\r\n                svgViewBoxX / diagram.sections.length - lineLength, // length\r\n                section, //voltageApplied\r\n                diagram.sections[sectionIndex - 1] !== undefined ? checkSectionVoltageApplied(diagram.sections[sectionIndex - 1]) : false, // previousSectionUnderVoltage\r\n                diagram.assetID ? diagram.assetID : '', //switchboard name\r\n                section.coupling ? {\r\n                  assetID: section.coupling.assetID,\r\n                  name: section.coupling.name,\r\n                  type: section.coupling.type,\r\n                  nextSectionUnderVoltage: diagram.sections[sectionIndex + 1] !== undefined ? checkSectionVoltageApplied(diagram.sections[sectionIndex + 1]) : false,\r\n                  fixedState: section.coupling.state,\r\n                  tableName: section.coupling.name\r\n                } :\r\n                  false)\r\n              const breakers = section.breakers?.map((breaker: any, breakerIndex: any) => {\r\n                const nextSwitchboardIndex = overview.diagrams.findIndex(diagram => diagram.name === breaker.nextSwitchboardName);\r\n                return renderBreaker(breaker.name,\r\n                  `${diagram.name} ${t('deviceDataDialog.section')} ${section.name}`,\r\n                  section,\r\n                  breaker.tableName,\r\n                  breaker.type,\r\n                  breaker.assetID,\r\n                  sectionIndex * svgViewBoxX / diagram.sections.length + lineLength / 2 + breakerIndex * lineLength * 1.2,\r\n                  6 * lineLength,\r\n                  nextSwitchboardIndex !== -1 ? nextSwitchboardIndex : undefined,\r\n                  undefined,\r\n                  undefined,\r\n                  breaker.state,\r\n                  undefined,\r\n                  diagram.assetID ? diagram.assetID : ''\r\n                )\r\n              })\r\n              return <React.Fragment key={sectionIndex}>{infeeds}{sectionLines}{breakers}</React.Fragment>\r\n\r\n            })}\r\n          </svg>\r\n        </div>\r\n      )\r\n      return tabs.push({ label: diagram.name, content: content })\r\n    })\r\n    return tabs\r\n  }\r\n\r\n  const renderDiagramName = (name: string, x: number, y: number) => {\r\n    return (\r\n      <text\r\n        x={x}\r\n        y={y}\r\n        className={classes.infeedsNameStyle}\r\n      >\r\n        {`${t('overviewPage.switchboard')} ${name}`}\r\n      </text>\r\n    )\r\n  }\r\n\r\n  const renderInfeed = (name: string,\r\n    sectionName: string,\r\n    sectionObject: object,\r\n    tableName: string,\r\n    breaker: {\r\n      name: string,\r\n      type: string,\r\n      tableName: string,\r\n      assetID: string,\r\n      state?: number\r\n    },\r\n    type: string,\r\n    x: number,\r\n    y: number,\r\n    switchboardAssetID: string) => {\r\n    switch (type) {\r\n      case DeviceTypes.transformer:\r\n        return (\r\n          <React.Fragment key={`${x}-${y}`}>\r\n            <TransformerSVG\r\n              x={x}\r\n              y={y}\r\n              name={name}\r\n              tableName={tableName}\r\n              assetID={breaker.assetID}\r\n              activePower={systemTopologyData[breaker.assetID]?.Active_Power_Import || 0}\r\n              current={sumCurrent(systemTopologyData[breaker.assetID]?.Current_L1, systemTopologyData[breaker.assetID]?.Current_L2, systemTopologyData[breaker.assetID]?.Current_L3)}\r\n              powerFactor={powerFactorCalculator(systemTopologyData[breaker.assetID]?.Active_Power_Import, systemTopologyData[breaker.assetID]?.Reactive_Power_Import)}\r\n              breakerName={breaker.name}\r\n              sectionName={sectionName}\r\n              voltageApplied={checkSectionVoltageApplied(sectionObject) && checkBreakerState(breaker.assetID).closed}\r\n              switchboardAssetID={switchboardAssetID}\r\n            />\r\n            {renderBreaker(breaker.name,\r\n              sectionName,\r\n              sectionObject,\r\n              '',\r\n              breaker.type,\r\n              breaker.assetID,\r\n              x,\r\n              y + 3 * lineLength,\r\n              undefined,\r\n              undefined,\r\n              undefined,\r\n              breaker.state,\r\n              true,\r\n              switchboardAssetID)}\r\n          </React.Fragment>\r\n        )\r\n      case DeviceTypes.generator:\r\n        return (\r\n          <React.Fragment key={`${x}-${y}`}>\r\n            <GeneratorSVG\r\n              x={x}\r\n              y={y}\r\n              name={name}\r\n              tableName={tableName}\r\n              assetID={breaker.assetID}\r\n              activePower={systemTopologyData[breaker.assetID]?.Active_Power_Import || 0}\r\n              current={sumCurrent(systemTopologyData[breaker.assetID]?.Current_L1, systemTopologyData[breaker.assetID]?.Current_L2, systemTopologyData[breaker.assetID]?.Current_L3)}\r\n              powerFactor={powerFactorCalculator(systemTopologyData[breaker.assetID]?.Active_Power_Import, systemTopologyData[breaker.assetID]?.Reactive_Power_Import)}\r\n              breakerName={breaker.name}\r\n              sectionName={sectionName}\r\n              voltageApplied={checkSectionVoltageApplied(sectionObject) && checkBreakerState(breaker.assetID).closed}\r\n              switchboardAssetID={switchboardAssetID}\r\n            />\r\n            {renderBreaker(breaker.name,\r\n              sectionName,\r\n              sectionObject,\r\n              '',\r\n              breaker.type,\r\n              breaker.assetID,\r\n              x,\r\n              y + 3 * lineLength,\r\n              undefined,\r\n              undefined,\r\n              undefined,\r\n              breaker.state,\r\n              true,\r\n              switchboardAssetID)}\r\n          </React.Fragment>\r\n        )\r\n      case '': //no infeed - for distribution boards to not show gen/tr and table above cb\r\n        const previousSwitchboardIndex = overview.diagrams.findIndex(diagram => diagram.name === breaker.tableName)\r\n        return renderBreaker(breaker.name,\r\n          sectionName,\r\n          sectionObject,\r\n          breaker.tableName,\r\n          breaker.type,\r\n          breaker.assetID,\r\n          x,\r\n          y + 3 * lineLength,\r\n          undefined,\r\n          true,\r\n          previousSwitchboardIndex !== -1 ? previousSwitchboardIndex : undefined,\r\n          breaker.state,\r\n          undefined,\r\n          switchboardAssetID)\r\n      default:\r\n        return null\r\n    }\r\n  }\r\n\r\n  const renderBreaker = (name: string,\r\n    sectionName: string,\r\n    sectionObject: object,\r\n    tableName: string | undefined,\r\n    type: string,\r\n    assetID: string,\r\n    x: number,\r\n    y: number,\r\n    nextSwitchboardIndex: number | undefined = undefined,\r\n    tableAbove: boolean | undefined = undefined,\r\n    previousSwitchboardIndex: number | undefined = undefined,\r\n    fixedState: number | undefined = undefined,\r\n    infeedBreaker: boolean | undefined = undefined, // reversed voltageAbove with voltageBelow\r\n    switchboardAssetID: string\r\n  ) => {\r\n    //console.log(name, sectionName, sectionObject, tableName, type, assetID)\r\n    switch (type) {\r\n      case DeviceTypes.circuitBreaker:\r\n      case DeviceTypes.infeedBreaker:\r\n      case DeviceTypes.drawOutCircuitBreaker:\r\n        return (\r\n          <CircuitBreakerSVG\r\n            key={`${x}-${y}`}\r\n            x={x}\r\n            y={y}\r\n            state={fixedState !== undefined ? decodeState(fixedState) : decodeState(systemTopologyData[assetID]?.Breaker_State) || false}\r\n            name={name}\r\n            tableName={tableName}\r\n            assetID={assetID}\r\n            activePower={systemTopologyData[assetID]?.Active_Power_Import || 0}\r\n            current={sumCurrent(systemTopologyData[assetID]?.Current_L1, systemTopologyData[assetID]?.Current_L2, systemTopologyData[assetID]?.Current_L3)}\r\n            powerFactor={powerFactorCalculator(systemTopologyData[assetID]?.Active_Power_Import, systemTopologyData[assetID]?.Reactive_Power_Import)}\r\n            noTable={tableName === undefined}\r\n            nextSwitchboardIndex={nextSwitchboardIndex}\r\n            previousSwitchboardIndex={previousSwitchboardIndex}\r\n            tableAbove={tableAbove}\r\n            sectionName={sectionName}\r\n            deviceType={type}\r\n            drawOut={type === DeviceTypes.drawOutCircuitBreaker}\r\n            voltageBelow={infeedBreaker ? checkSectionVoltageApplied(sectionObject) : decodeState(systemTopologyData[assetID]?.Breaker_State).closed && checkSectionVoltageApplied(sectionObject)}\r\n            voltageAbove={infeedBreaker ? checkVoltageApplied(assetID) : checkSectionVoltageApplied(sectionObject)}\r\n            switchboardAssetID={switchboardAssetID}\r\n          />\r\n        )\r\n      default:\r\n        return null\r\n    }\r\n  }\r\n\r\n  const renderSection = (x: number,\r\n    y: number,\r\n    length: number,\r\n    section: object,\r\n    previousSectionUnderVoltage: boolean,\r\n    switchboardAssetID: string,\r\n    endCoupling?: {\r\n      assetID: string,\r\n      name: string,\r\n      type: string,\r\n      nextSectionUnderVoltage: boolean,\r\n      fixedState: number,\r\n      tableName?: string,\r\n    } | false\r\n  ) => {\r\n\r\n    return (\r\n      <SectionSVG\r\n        key={`${x}-${y}`}\r\n        x={x}\r\n        y={y}\r\n        length={length}\r\n        voltageApplied={checkSectionVoltageApplied(section)}\r\n        nextSectionVoltageApplied={endCoupling ? endCoupling.nextSectionUnderVoltage : false}\r\n        endCoupling={endCoupling ?\r\n          <CircuitBreakerSVG\r\n            x={x + length}\r\n            y={y - 3 * lineLength}\r\n            state={endCoupling.fixedState !== undefined ? decodeState(endCoupling.fixedState) : decodeState(systemTopologyData[endCoupling.assetID]?.Breaker_State)}\r\n            name={endCoupling.name}\r\n            assetID={endCoupling.assetID}\r\n            activePower={systemTopologyData[endCoupling.assetID]?.Active_Power_Import || 0}\r\n            current={sumCurrent(systemTopologyData[endCoupling.assetID]?.Current_L1, systemTopologyData[endCoupling.assetID]?.Current_L2, systemTopologyData[endCoupling.assetID]?.Current_L3)}\r\n            powerFactor={powerFactorCalculator(systemTopologyData[endCoupling.assetID]?.Active_Power_Import, systemTopologyData[endCoupling.assetID]?.Reactive_Power_Import)}\r\n            drawOut={endCoupling.type === DeviceTypes.drawOutCircuitBreaker}\r\n            deviceType={endCoupling.type}\r\n            noTable={true}\r\n            tableName={endCoupling.tableName}\r\n            tableAbove\r\n            sectionName=''\r\n            voltageBelow={checkSectionVoltageApplied(section) || previousSectionUnderVoltage}\r\n            voltageAbove={endCoupling ? endCoupling.nextSectionUnderVoltage : false}\r\n            switchboardAssetID={switchboardAssetID}\r\n          />\r\n          : false}\r\n      />\r\n    )\r\n  }\r\n\r\n  const sumCurrent = (L1: number, L2: number, L3: number) => {\r\n    const result = parseFloat(Math.max(L1,L2,L3).toFixed(2))\r\n    if (isNaN(result)) {\r\n      return 0\r\n    }\r\n    else {\r\n      return result\r\n    }\r\n  }\r\n\r\n  const checkVoltageApplied = (deviceID: string) => {\r\n    const voltage = Math.min(systemTopologyData[deviceID]?.Voltage_L1_N, systemTopologyData[deviceID]?.Voltage_L2_N, systemTopologyData[deviceID]?.Voltage_L3_N)\r\n    return voltage > 0 ? true : false\r\n  }\r\n\r\n  const checkSectionVoltageApplied = (section: any) => {\r\n    return section.breakers.filter((breaker: any) => checkVoltageApplied(breaker.assetID)).length > 0 ? true : false\r\n  }\r\n\r\n  const checkBreakerState = (assetID: string) => {\r\n    return decodeState(systemTopologyData[assetID]?.Breaker_State)\r\n  }\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <Grid container spacing={2}>\r\n        <Grid item xs={12}>\r\n          <UniversalTabs\r\n            name='overview'\r\n            tabs={renderTabsWithCircuitDiagrams()}\r\n          />\r\n        </Grid>\r\n      </Grid>\r\n    </React.Fragment>\r\n  )\r\n}","import React from 'react';\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableContainer from '@material-ui/core/TableContainer';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport Paper from '@material-ui/core/Paper';\r\n\r\ninterface IUniversalTableProps {\r\n  rows: Array<Array<string | number | React.ReactNode>>,\r\n  columns: Array<string | number | React.ReactNode>,\r\n  small?: boolean,\r\n  noElevation?: boolean\r\n}\r\n\r\n\r\nexport const UniversalTable: React.FC<IUniversalTableProps> = ({ rows, columns, small = false, noElevation = false }) => {\r\n  return (\r\n    <TableContainer component={noElevation ? \"div\" : Paper}>\r\n      <Table aria-label=\"simple table\" size={small ? \"small\" : \"medium\"}>\r\n        <TableHead>\r\n          <TableRow>\r\n            {columns.map((col, index) => <TableCell \r\n            align={index > 0 ? \"right\" : \"left\"} \r\n            //style={{ width: `${100 / columns.length}%` }}\r\n             key={index}>{col}</TableCell>\r\n            )}\r\n          </TableRow>\r\n        </TableHead>\r\n        <TableBody>\r\n          {rows.map((row, i) => {\r\n            return (\r\n              <TableRow key={i}>\r\n                {row.map((cell, index) => <TableCell align={index > 0 ? \"right\" : \"left\"} key={index}>{cell !== undefined ? cell : ''}</TableCell>\r\n                )}\r\n              </TableRow>\r\n            )\r\n          }\r\n          )}\r\n        </TableBody>\r\n      </Table>\r\n    </TableContainer>\r\n  );\r\n}","import { useEffect } from 'react';\r\nimport { useTheme } from '@material-ui/core/styles';\r\n\r\nexport const useUpdateChartFontColor = (chartInstance: any | null, color: string) => {\r\n  const theme = useTheme()\r\n\r\n  useEffect(() => {\r\n    //update font colors on theme change\r\n    if (chartInstance?.options?.scales?.y) {\r\n      chartInstance.options.scales.y = {\r\n        ...chartInstance.options.scales.y,\r\n        ticks: {\r\n          ...chartInstance.options.scales.y.ticks,\r\n          color: theme.palette.type === 'dark' ? color : '#666'\r\n        },\r\n        title: {\r\n          ...chartInstance.options.scales.y.title,\r\n          color: theme.palette.type === 'dark' ? color : '#666',\r\n        }\r\n      }\r\n    }\r\n    if (chartInstance?.options?.scales?.x) {\r\n      chartInstance.options.scales.x = {\r\n        ...chartInstance.options.scales.x,\r\n        ticks: {\r\n          ...chartInstance.options.scales.x.ticks,\r\n          color: theme.palette.type === 'dark' ? color : '#666'\r\n        },\r\n        title: {\r\n          ...chartInstance.options.scales.x.title,\r\n          color: theme.palette.type === 'dark' ? color : '#666',\r\n        }\r\n      }\r\n    }\r\n    if (chartInstance?.options?.plugins?.legend?.title) {\r\n      chartInstance.options.plugins.legend.title = {\r\n        ...chartInstance.options.plugins.legend.title,\r\n        color: theme.palette.type === 'dark' ? color : '#666',\r\n      }\r\n    }\r\n    if(chartInstance?.options?.plugins?.legend?.labels) {\r\n      chartInstance.options.plugins.legend.labels = {\r\n        ...chartInstance.options.plugins.legend.labels,\r\n        color: theme.palette.type === 'dark' ? color : '#666',\r\n      }\r\n    }\r\n\r\n    \r\n\r\n  }, [theme, chartInstance?.options, color])\r\n}","import { useEffect } from 'react';\r\nimport Chart from 'chart.js/auto';\r\nimport 'chartjs-adapter-date-fns';\r\nimport { pl, enUS } from 'date-fns/locale';\r\nimport { useTranslation } from 'react-i18next';\r\n\r\nexport const useUpdateChartDatasets = (chartInstance: Chart | null,\r\n  data: {\r\n    labels?: Array<string>,\r\n    datasets: Array<{ label: string, backgroundColor: Array<string> | string, borderColor?: Array<string> | string, borderWidth?: number, data: Array<{ x: number | Date, y: number }> | Array<number> }>\r\n  },\r\n  locale?: string,\r\n  yAxisTitle?: string,\r\n  xAxisTitle?: string) => {\r\n  const { i18n } = useTranslation();\r\n\r\n  useEffect(() => {\r\n    //update in case of datasets change\r\n    if (chartInstance) {\r\n      if (chartInstance.data && chartInstance.data.datasets) {\r\n        //replace datasets data one by one\r\n        data.datasets.forEach((dataset, i) => {\r\n          if (chartInstance.data.datasets && chartInstance.data.datasets[i] !== undefined) {\r\n            chartInstance.data.datasets[i].data = dataset.data\r\n            chartInstance.data.datasets[i].label = dataset.label\r\n          }\r\n        })\r\n        chartInstance.data.labels = data.labels;\r\n      }\r\n      if (chartInstance?.options?.scales?.x?.adapters?.date?.locale && locale) {\r\n        chartInstance.options.scales.x.adapters.date.locale = i18n.language === 'pl' ? pl : enUS\r\n      }\r\n      if (chartInstance?.options?.scales?.x?.title && xAxisTitle) {\r\n        chartInstance.options.scales.x.title.text = xAxisTitle\r\n      }\r\n      if (chartInstance?.options?.scales?.y?.title && yAxisTitle) {\r\n        chartInstance.options.scales.y.title.text = yAxisTitle\r\n      }\r\n      chartInstance.update()\r\n    }\r\n  }, [chartInstance, data, i18n.language, locale, yAxisTitle, xAxisTitle])\r\n}","import Chart from 'chart.js/auto';\r\nimport { ChartType } from 'chart.js';\r\nimport React, { useRef, useState, useEffect, useMemo } from 'react';\r\nimport { useTheme } from '@material-ui/core/styles';\r\nimport { useUpdateChartFontColor } from '../hooks/useUpdateChartFontColor.hook';\r\nimport { useUpdateChartDatasets } from '../hooks/useUpdateChartDatasets.hook';\r\nimport 'chartjs-adapter-date-fns';\r\nimport { useTranslation } from 'react-i18next';\r\nimport { pl, enUS } from 'date-fns/locale';\r\n\r\ninterface LineChartProps {\r\n  data: {\r\n    datasets: Array<{\r\n      label: string,\r\n      backgroundColor: string\r\n      borderColor: string,\r\n      lineTension: number,\r\n      fill: boolean,\r\n      borderDash?: Array<number>,\r\n      data: Array<{\r\n        x: number | Date,\r\n        y: number\r\n      }>,\r\n      pointRadius?: number\r\n    }>\r\n  },\r\n  timeInterval?: string,\r\n  chartTitle?: string,\r\n  xAxisTitle?: string,\r\n  yAxisTitle?: string,\r\n  yAxisUnit?: string,\r\n  tooltipFormat?: string\r\n}\r\n\r\nexport const LineChart: React.FC<LineChartProps> = ({ data, chartTitle, xAxisTitle, yAxisTitle, timeInterval, yAxisUnit, tooltipFormat }) => {\r\n  const chartContainer = useRef() as React.MutableRefObject<HTMLCanvasElement>;\r\n  const [chartInstance, setChartInstance] = useState<any>(null);\r\n  const theme = useTheme();\r\n  const { i18n } = useTranslation();\r\n  useUpdateChartFontColor(chartInstance, '#fff');\r\n  useUpdateChartDatasets(chartInstance, data, i18n.language, yAxisTitle, xAxisTitle)\r\n\r\n  const chartType: ChartType = 'line'\r\n  const chartConfig = useMemo(() => {\r\n    return {\r\n      type: chartType,\r\n      data,\r\n      options: {\r\n        responsive: true,\r\n        interaction: {\r\n          intersect: false,\r\n          mode: 'index',\r\n        },\r\n        plugins: {\r\n          title: {\r\n            display: chartTitle ? true : false,\r\n            text: chartTitle ? chartTitle : '',\r\n            fontColor: theme.palette.text.primary,\r\n            color: Chart.defaults.color\r\n          },\r\n          legend: {\r\n            labels: {\r\n              color: Chart.defaults.color,\r\n              font: {\r\n                size: 14\r\n              }\r\n            }\r\n          },\r\n          tooltip: {\r\n            callbacks: {\r\n              label: function (context: any) {\r\n                let label = context.dataset.label || '';\r\n                if (label) {\r\n                  label += ': ';\r\n                }\r\n                if (context.parsed.y !== null) {\r\n                  label += context.parsed.y\r\n                }\r\n                if (label && yAxisUnit) {\r\n                  label += ` ${yAxisUnit}`;\r\n                }\r\n                return label;\r\n              }\r\n            }\r\n          },\r\n        },\r\n        scales: {\r\n          x: {\r\n            type: 'time',\r\n            title: {\r\n              display: true,\r\n              text: xAxisTitle ? xAxisTitle : '',\r\n              font: {\r\n                size: 18,\r\n                weight: 400\r\n              },\r\n            },\r\n            ticks: {\r\n              color: Chart.defaults.color,\r\n\r\n            },\r\n            time: {\r\n              displayFormats: {\r\n                millisecond: 'HH:mm:ss.SSS',\r\n                second: 'HH:mm:ss',\r\n                minute: 'HH:mm',\r\n                hour: 'HH',\r\n              },\r\n              tooltipFormat: tooltipFormat ? tooltipFormat : 'PPpp',\r\n              unit: timeInterval ? timeInterval : false\r\n            },\r\n            adapters: {\r\n              date: {\r\n                locale: i18n.language === 'pl' ? pl : enUS,\r\n              }\r\n            }\r\n          },\r\n          y: {\r\n            title: {\r\n              display: true,\r\n              text: yAxisTitle ? yAxisTitle : '',\r\n              font: {\r\n                size: 18,\r\n                weight: 400\r\n              },\r\n            },\r\n            ticks: {\r\n              color: Chart.defaults.color\r\n            }\r\n          }\r\n        },\r\n      },\r\n    }\r\n  }, [data, chartTitle, theme.palette.text.primary, i18n.language, xAxisTitle, yAxisTitle, yAxisUnit, timeInterval, tooltipFormat]);\r\n\r\n\r\n\r\n  useEffect(() => {\r\n    //instantiate chart with first given data\r\n    if (chartInstance === null) {\r\n      setChartInstance(new Chart(chartContainer.current, chartConfig))\r\n    }\r\n  }, [data, chartInstance, chartTitle, chartConfig])\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <canvas ref={chartContainer} />\r\n    </React.Fragment>\r\n  )\r\n}","import React, { useEffect, useState } from 'react';\r\nimport { UniversalTable } from '../UniversalTable.component';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport { LineChart } from '../LineChart.component';\r\nimport { decideDataColor } from '../../utilities/SiemensColors.utility';\r\nimport { useTranslation } from 'react-i18next';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport { Alert, AlertTitle } from '@material-ui/lab';\r\nimport { makeStyles, Theme, createStyles } from '@material-ui/core/styles';\r\nimport { format } from 'date-fns';\r\nimport { useSelector } from 'react-redux';\r\nimport { RootState } from '../../reducers/Root.reducer';\r\n\r\ninterface ILoadMonitoringTab {\r\n  chartData: any\r\n}\r\n\r\nexport const useStyles = makeStyles((theme: Theme) =>\r\n  createStyles({\r\n    marginTopBottom: {\r\n      marginTop: theme.spacing(2),\r\n      marginBottom: theme.spacing(2)\r\n    },\r\n    marginBottom: {\r\n      marginBottom: theme.spacing(2)\r\n    },\r\n    marginTop: {\r\n      marginTop: theme.spacing(2)\r\n    },\r\n    alignRight: {\r\n      textAlign: 'right'\r\n    }\r\n  })\r\n)\r\n\r\nexport const LoadMonitoringTab: React.FC<ILoadMonitoringTab> = ({ chartData }) => {\r\n  const { t } = useTranslation();\r\n  const classes = useStyles();\r\n  const powermonitorConfig = useSelector((state: RootState) => state.powermonitor);\r\n  const [datasets, setDatasets] = useState<Array<{\r\n    label: string,\r\n    backgroundColor: string,\r\n    borderColor: string,\r\n    fill: boolean,\r\n    lineTension: number,\r\n    data: Array<{\r\n      x: number,\r\n      y: number\r\n    }>,\r\n    pointRadius: number,\r\n    borderDash?: Array<number>\r\n  }>>()\r\n  const [timetable, setTimetable] = useState<Array<Array<string | number | Date>>>()\r\n  const [predictedPower, setPredictedPower] = useState<number>()\r\n\r\n  useEffect(() => {\r\n    if (chartData) {\r\n      const data = []\r\n      const alertPoints = chartData.alertPoints.map((point: any) => {\r\n        return {\r\n          x: point.tickId,\r\n          y: parseFloat((point.value).toFixed(3))\r\n        }\r\n      })\r\n      const warningPoints = chartData.warningPoints.map((point: any) => {\r\n        return {\r\n          x: point.tickId,\r\n          y: parseFloat((point.value).toFixed(3))\r\n        }\r\n      })\r\n      const historicalPoints = chartData.historicalPoints.map((point: any) => {\r\n        return {\r\n          x: point.tickId,\r\n          y: parseFloat((point.value).toFixed(3))\r\n        }\r\n      })\r\n      const predictedPoints = chartData.predictedPoints.map((point: any) => {\r\n        return {\r\n          x: point.tickId,\r\n          y: parseFloat((point.value).toFixed(3))\r\n        }\r\n      })\r\n\r\n      const historicalPointsWithoutZero = historicalPoints.filter((el: any, index: number) => index !== 0)\r\n      const tableData = historicalPointsWithoutZero.map((point: any, index: number) => {\r\n        return [format(point.x, 'HH:mm:ss'), `${parseFloat((point.y * 60 / (index + 1)).toFixed(3))} kW`]\r\n      })\r\n      data.push({\r\n        label: t('reportsPage.warningThreshold'),\r\n        backgroundColor: 'orange',\r\n        borderColor: 'orange',\r\n        fill: false,\r\n        lineTension: 0,\r\n        data: warningPoints,\r\n        pointRadius: 0,\r\n        borderDash: [5],\r\n      })\r\n      data.push({\r\n        label: t('reportsPage.alarmThreshold'),\r\n        backgroundColor: 'red',\r\n        borderColor: 'red',\r\n        fill: false,\r\n        lineTension: 0,\r\n        data: alertPoints,\r\n        pointRadius: 0,\r\n        borderDash: [5],\r\n      })\r\n      data.push({\r\n        label: t('powermonitorPage.energyUsageLabel'),\r\n        backgroundColor: decideDataColor(0),\r\n        borderColor: decideDataColor(0),\r\n        fill: true,\r\n        lineTension: 0,\r\n        data: historicalPoints,\r\n        pointRadius: 0,\r\n      })\r\n\r\n      data.push({\r\n        label: t('powermonitorPage.predictedUsageLabel'),\r\n        backgroundColor: 'rgba(65, 170, 170, 0.5)',\r\n        borderColor: 'rgba(65, 170, 170, 0.5)',\r\n        fill: true,\r\n        lineTension: 0,\r\n        data: historicalPoints.filter((el: any, index: number) => index !== historicalPoints.length - 1).concat(predictedPoints),\r\n        pointRadius: 0,\r\n      })\r\n      setPredictedPower(parseFloat(chartData.predictedPower.toFixed(3)))\r\n      setDatasets(data)\r\n      setTimetable(tableData)\r\n    }\r\n  }, [chartData, setDatasets, t])\r\n\r\n  const setAlertType = () => {\r\n    if (predictedPower !== undefined && powermonitorConfig) {\r\n      if (predictedPower > powermonitorConfig.alertLimit) {\r\n        return 'error'\r\n      }\r\n      else if (predictedPower > powermonitorConfig.warningLimit) {\r\n        return 'warning'\r\n      }\r\n      return 'success'\r\n    }\r\n  }\r\n\r\n  return (\r\n    <React.Fragment>\r\n      {powermonitorConfig && powermonitorConfig.enabled ?\r\n        <Grid container spacing={2}>\r\n          <Grid item xs={12}>\r\n            <Typography gutterBottom variant='h5'>{t('powermonitorPage.current15minInterval')}</Typography>\r\n          </Grid>\r\n          {timetable ?\r\n            <Grid item xs={12} lg={6} xl={5}>\r\n              <UniversalTable\r\n                columns={[t('powermonitorPage.tableTimeColumn'), t('powermonitorPage.tableValueColumn')]}\r\n                rows={timetable}\r\n              />\r\n              <Alert severity={setAlertType()} className={classes.marginTop}>\r\n                <AlertTitle>{t('powermonitorPage.predictedPower')}: {predictedPower || 0} kW</AlertTitle>\r\n                <p>{t('powermonitorPage.warningThreshold')}: <strong>{powermonitorConfig.warningLimit || 0} kW</strong></p>\r\n                <p>{t('powermonitorPage.alarmThreshold')}: <strong>{powermonitorConfig.alertLimit || 0} kW</strong></p>\r\n              </Alert>\r\n            </Grid>\r\n            : null}\r\n          {datasets ?\r\n            <Grid item xs={12} lg={6} xl={7}>\r\n              <LineChart\r\n                data={{\r\n                  datasets: datasets\r\n                }}\r\n                xAxisTitle={t('chart.timeAxisLabel')}\r\n                yAxisTitle={t('powermonitorPage.energyUsage')}\r\n                timeInterval='minute'\r\n                tooltipFormat='kk:mm:ss'\r\n                yAxisUnit='kWh'\r\n              />\r\n            </Grid>\r\n            : null}\r\n        </Grid>\r\n        :\r\n        <Grid container spacing={2}>\r\n          <Grid item xs={12}>\r\n            <Typography gutterBottom variant='h5'>{t('powermonitorPage.powermonitorInactive')}</Typography>\r\n          </Grid>\r\n        </Grid>\r\n      }\r\n\r\n    </React.Fragment>\r\n  )\r\n}","const getCookie = (name: string) => {\r\n  if (!document.cookie) {\r\n    return '';\r\n  }\r\n\r\n  const xsrfCookies = document.cookie.split(';')\r\n    .map(c => c.trim())\r\n    .filter(c => c.startsWith(name + '='));\r\n\r\n  if (xsrfCookies.length === 0) {\r\n    return '';\r\n  }\r\n  return decodeURIComponent(xsrfCookies[0].split('=')[1]);\r\n}\r\n\r\nexport const fetchMe = async () => {\r\n  const response = await fetch('/customApi/config/me')\r\n  const data = await response.json()\r\n  return data\r\n}\r\n\r\nexport const fetchPowermonitor = async (plantName: string) => {\r\n  const response = await fetch(`/customApi/service/me/${plantName}`)\r\n  const data = await response.json()\r\n  return data\r\n}\r\n\r\nexport const modifyPowerMonitorConfig = async (plantName: string, powermonitorId: string, body: object) => {\r\n  const response = await fetch(`/customApi/service/me/${plantName}/${powermonitorId}`, {\r\n    method: 'PUT',\r\n    headers: {\r\n      'credentials': 'include',\r\n      'Content-Type': 'application/json',\r\n      'X-XSRF-TOKEN': getCookie('XSRF-TOKEN')\r\n    },\r\n    body: JSON.stringify(body)\r\n  })\r\n  if (response.status === 200) {\r\n    const res = await response.json()\r\n    return {\r\n      status: response.status,\r\n      response: res\r\n    }\r\n  }\r\n  else {\r\n    return { status: response.status }\r\n  }\r\n}\r\n\r\nexport const subscribeToNotification = async (plantName: string, powermonitorId: string, body: object) => {\r\n  const response = await fetch(`/customApi/subscription/me/${plantName}/${powermonitorId}`, {\r\n    method: 'POST',\r\n    headers: {\r\n      'credentials': 'include',\r\n      'Content-Type': 'application/json',\r\n      'X-XSRF-TOKEN': getCookie('XSRF-TOKEN')\r\n    },\r\n    body: JSON.stringify(body)\r\n  })\r\n  if (response.status === 200) {\r\n    const res = await response.json()\r\n    return {\r\n      status: response.status,\r\n      response: res\r\n    }\r\n  }\r\n  else {\r\n    return { status: response.status }\r\n  }\r\n}\r\n\r\nexport const unsubscribeToNotification = async (plantName: string, powermonitorId: string, body: object) => {\r\n  const response = await fetch(`/customApi/subscription/me/${plantName}/${powermonitorId}`, {\r\n    method: 'DELETE',\r\n    headers: {\r\n      'credentials': 'include',\r\n      'Content-Type': 'application/json',\r\n      'X-XSRF-TOKEN': getCookie('XSRF-TOKEN')\r\n    },\r\n    body: JSON.stringify(body)\r\n  })\r\n  if (response.status === 200) {\r\n    const res = await response.json()\r\n    return {\r\n      status: response.status,\r\n      response: res\r\n    }\r\n  }\r\n  else {\r\n    return { status: response.status }\r\n  }\r\n}","import { IPowermonitorConfig } from '../reducers/Powermonitor.reducer';\r\n\r\nexport const SET_POWERMONITOR_CONFIG = 'SET_POWERMONITOR_CONFIG';\r\nexport const setPowermonitorConfig = (config: IPowermonitorConfig) => ({ type: SET_POWERMONITOR_CONFIG, config })","export const SET_BACKDROP_OPEN = 'SET_BACKDROP_OPEN';\r\nexport const setBackdropOpen = (open: boolean) => ({ type: SET_BACKDROP_OPEN, open })","import React, { useState, useEffect, useCallback } from 'react';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport { createStyles, makeStyles, Theme } from '@material-ui/core/styles';\r\nimport { useTranslation } from 'react-i18next';\r\nimport FormGroup from '@material-ui/core/FormGroup';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport Checkbox from '@material-ui/core/Checkbox';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Button from '@material-ui/core/Button';\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\nimport AddIcon from '@material-ui/icons/Add';\r\nimport { UniversalTable } from '../UniversalTable.component';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport { modifyPowerMonitorConfig, subscribeToNotification, unsubscribeToNotification } from '../../services/CustomAPI.service';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { RootState } from '../../reducers/Root.reducer';\r\nimport { setPowermonitorConfig } from '../../actions/Powermonitor.action';\r\nimport Divider from '@material-ui/core/Divider';\r\nimport { setBackdropOpen } from '../../actions/Backdrop.action';\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n  createStyles({\r\n    root: {\r\n      '& .MuiTextField-root': {\r\n        marginTop: theme.spacing(1),\r\n        marginBottom: theme.spacing(1),\r\n      },\r\n    },\r\n    divider: {\r\n      marginTop: theme.spacing(1),\r\n      marginBottom: theme.spacing(2),\r\n    }\r\n  }),\r\n);\r\n\r\nexport const PowermonitorSettingsTab = () => {\r\n  const classes = useStyles();\r\n  const { t, i18n } = useTranslation();\r\n  const dispatch = useDispatch();\r\n  const powermonitorConfig = useSelector((state: RootState) => state.powermonitor);\r\n  const userPlantData = useSelector((state: RootState) => state.userData);;\r\n  const [warningThreshold, setWarningThreshold] = useState<string>(\"0\")\r\n  const [alarmThreshold, setAlarmThreshold] = useState<string>(\"0\")\r\n  const [transformerPowerLoss, setTransformerPowerLoss] = useState<string>(\"0\")\r\n  const [subscribed, setSubscribed] = useState<boolean>(false)\r\n\r\n  const [checkboxes, setCheckboxes] = useState({\r\n    loadMonitorActive: false,\r\n  });\r\n  const [mailList, setMailList] = useState<Array<{\r\n    email: string,\r\n    language: string\r\n  }>>()\r\n  const [dialogOpen, setDialogOpen] = useState(false);\r\n  const [formEmailAddress, setFormEmailAddress] = useState<string>('')\r\n\r\n  useEffect(() => {\r\n    if (powermonitorConfig) {\r\n      setWarningThreshold(`${powermonitorConfig.warningLimit}`)\r\n      setAlarmThreshold(`${powermonitorConfig.alertLimit}`)\r\n      setTransformerPowerLoss(`${powermonitorConfig.powerLosses}`)\r\n      setCheckboxes(c => ({\r\n        ...c,\r\n        loadMonitorActive: powermonitorConfig.enabled\r\n      }))\r\n      setMailList(powermonitorConfig.mailingList)\r\n    }\r\n  }, [setWarningThreshold, setAlarmThreshold, setTransformerPowerLoss, setCheckboxes, powermonitorConfig])\r\n\r\n  useEffect(() => {\r\n    navigator.serviceWorker.ready\r\n      .then(function (registration) {\r\n        return registration.pushManager.getSubscription();\r\n      }).then(function (subscription) {\r\n        if (subscription) {\r\n          setSubscribed(true)\r\n          console.log('Already subscribed', subscription.endpoint);\r\n        } else {\r\n          setSubscribed(false)\r\n        }\r\n      });\r\n  }, [])\r\n\r\n  const urlBase64ToUint8Array = (base64String: string) => {\r\n    const padding = \"=\".repeat((4 - (base64String.length % 4)) % 4);\r\n    const base64 = (base64String + padding)\r\n      .replace(/\\-/g, \"+\") //eslint-disable-line\r\n      .replace(/_/g, \"/\"); //eslint-disable-line\r\n\r\n    const rawData = window.atob(base64);\r\n    const outputArray = new Uint8Array(rawData.length);\r\n\r\n    for (let i = 0; i < rawData.length; ++i) {\r\n      outputArray[i] = rawData.charCodeAt(i);\r\n    }\r\n    return outputArray;\r\n  }\r\n  const subscribe = () => {\r\n    navigator.serviceWorker.ready\r\n      .then(async function (registration) {\r\n\r\n        return registration.pushManager.subscribe({\r\n          userVisibleOnly: true,\r\n          applicationServerKey: urlBase64ToUint8Array(\"BNko5cJqNEYyTIBl3ydohj-XUhk3qg74Rq_ELD4p1vlY4aj5Wl4X45yHR4YUhBnHL7BKdg3cDrMOWzu7eadIIhU\")\r\n        });\r\n      }).then(function (subscription) {\r\n        console.log('Subscribed', subscription);\r\n        const body = {\r\n          language: i18n.language,\r\n          userId: userPlantData.userId,\r\n          subscriptionData: subscription\r\n        }\r\n        subscribeToNotification(powermonitorConfig.plantId, powermonitorConfig.id, body).then(res => {\r\n          setSubscribed(true)\r\n        })\r\n      });\r\n  }\r\n\r\n  const unsubscribe = () => {\r\n    navigator.serviceWorker.ready\r\n      .then(function (registration) {\r\n        return registration.pushManager.getSubscription();\r\n      }).then(function (subscription) {\r\n        if (subscription) {\r\n          return subscription.unsubscribe()\r\n            .then(function () {\r\n              console.log('Unsubscribed', subscription.endpoint);\r\n              const body = {\r\n                language: i18n.language,\r\n                userId: userPlantData.userId,\r\n                subscriptionData: subscription\r\n              }\r\n              unsubscribeToNotification(powermonitorConfig.plantId, powermonitorConfig.id, body).then(res => {\r\n                setSubscribed(false)\r\n              })\r\n            });\r\n        }\r\n      });\r\n  }\r\n\r\n  const validateEmail = (email: string) => {\r\n    const re = /^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\r\n    return re.test(String(email).toLowerCase());\r\n  }\r\n\r\n  const handleChange = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n    setCheckboxes({ ...checkboxes, [event.target.name]: event.target.checked });\r\n  };\r\n\r\n  const handleReset = useCallback(() => {\r\n    setWarningThreshold(`${powermonitorConfig.warningLimit}`)\r\n    setAlarmThreshold(`${powermonitorConfig.alertLimit}`)\r\n    setTransformerPowerLoss(`${powermonitorConfig.powerLosses}`)\r\n    setCheckboxes(c => ({\r\n      ...c,\r\n      loadMonitorActive: powermonitorConfig.enabled\r\n    }))\r\n    setMailList(powermonitorConfig.mailingList)\r\n  }, [setWarningThreshold, setAlarmThreshold, setTransformerPowerLoss, setCheckboxes, setMailList, powermonitorConfig])\r\n\r\n  const handleChangePowermonitorConfig = () => {\r\n    if (powermonitorConfig.assetIds.length > 0) {\r\n      dispatch(setBackdropOpen(true))\r\n      modifyPowerMonitorConfig(powermonitorConfig.plantId, powermonitorConfig.id, {\r\n        ...powermonitorConfig,\r\n        warningLimit: parseFloat(warningThreshold),\r\n        alertLimit: parseFloat(alarmThreshold),\r\n        powerLosses: parseFloat(transformerPowerLoss),\r\n        enabled: checkboxes.loadMonitorActive,\r\n        mailingList: mailList\r\n\r\n      }).then((res: any) => {\r\n        dispatch(setBackdropOpen(false))\r\n        if (res.response.config) {\r\n          dispatch(setPowermonitorConfig(res.response.config))\r\n        }\r\n      })\r\n    }\r\n  }\r\n\r\n  const addEmail = () => {\r\n    if (mailList && formEmailAddress) {\r\n      const added = mailList.concat({ email: formEmailAddress, language: i18n.language })\r\n      setMailList(added)\r\n      setDialogOpen(false)\r\n      setFormEmailAddress('')\r\n    }\r\n  }\r\n\r\n  const removeEmail = (toRemove: string) => {\r\n    if (mailList) {\r\n      const withRemoved = mailList.filter(el => el.email !== toRemove)\r\n      setMailList(withRemoved)\r\n      setDialogOpen(false)\r\n    }\r\n  }\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <Dialog\r\n        fullWidth\r\n        maxWidth=\"sm\"\r\n        open={dialogOpen}\r\n        onClose={() => setDialogOpen(false)}\r\n        aria-labelledby=\"alert-dialog-title\"\r\n        aria-describedby=\"alert-dialog-description\"\r\n      >\r\n        <DialogTitle id=\"alert-dialog-title\">{t('powermonitorPage.addEmailLabel')}</DialogTitle>\r\n        <DialogContent>\r\n          <TextField\r\n            autoFocus\r\n            margin=\"dense\"\r\n            value={formEmailAddress}\r\n            onChange={(e) => setFormEmailAddress(e.target.value)}\r\n            label={t('powermonitorPage.emailAddress')}\r\n            type=\"email\"\r\n            fullWidth\r\n          />\r\n        </DialogContent>\r\n        <DialogActions>\r\n          <Button onClick={() => addEmail()} color=\"primary\" disabled={formEmailAddress ? !validateEmail(formEmailAddress) : true}>\r\n            {t('powermonitorPage.confirm')}\r\n          </Button>\r\n          <Button onClick={() => setDialogOpen(false)} color=\"primary\" autoFocus>\r\n            {t('powermonitorPage.cancel')}\r\n          </Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n\r\n      <Grid container spacing={4} alignItems=\"flex-start\">\r\n        {powermonitorConfig ?\r\n          <React.Fragment>\r\n            <Grid container spacing={1} item xs={12} lg={4}>\r\n              <Grid item xs={12}>\r\n                <Typography gutterBottom variant='h5'>{t('powermonitorPage.settingsTab')}</Typography>\r\n              </Grid>\r\n              <Grid item xs={12}>\r\n                <form className={classes.root} noValidate autoComplete=\"off\">\r\n                  <TextField\r\n                    fullWidth\r\n                    label={`${t('powermonitorPage.warningThreshold')} [kWh]`}\r\n                    value={warningThreshold}\r\n                    onChange={(e) => setWarningThreshold(e.target.value)}\r\n                    type=\"number\"\r\n                  />\r\n                  <TextField\r\n                    fullWidth\r\n                    label={`${t('powermonitorPage.alarmThreshold')} [kWh]`}\r\n                    value={alarmThreshold}\r\n                    onChange={(e) => setAlarmThreshold(e.target.value)}\r\n                    type=\"number\"\r\n                  />\r\n                  <TextField\r\n                    fullWidth\r\n                    label={`${t('powermonitorPage.transformersLosses')} [kW]`}\r\n                    value={transformerPowerLoss}\r\n                    onChange={(e) => setTransformerPowerLoss(e.target.value)}\r\n                    type=\"number\"\r\n                  />\r\n                  <FormGroup row>\r\n                    <FormControlLabel\r\n                      control={<Checkbox checked={checkboxes.loadMonitorActive} onChange={handleChange} name=\"loadMonitorActive\" />}\r\n                      label={t('powermonitorPage.loadMonitorActive')}\r\n                    />\r\n                  </FormGroup>\r\n                </form>\r\n              </Grid>\r\n            </Grid>\r\n            {mailList ?\r\n              <Grid container spacing={1} item xs={12} lg={4}>\r\n                <Grid item xs={12}>\r\n                  <Typography gutterBottom variant='h5'>{t('powermonitorPage.mailList')}</Typography>\r\n                </Grid>\r\n                <Grid item xs={12}>\r\n                  <UniversalTable\r\n                    columns={[t('powermonitorPage.emailAddress'), t('powermonitorPage.language'), '']}\r\n                    rows={mailList.map(email => {\r\n                      return [email.email, email.language, <IconButton onClick={() => removeEmail(email.email)} aria-label=\"delete\"><DeleteIcon /></IconButton>]\r\n                    })}\r\n                  />\r\n                </Grid>\r\n                <Grid item xs={6}>\r\n                  <Button\r\n                    fullWidth\r\n                    variant=\"contained\"\r\n                    color=\"primary\"\r\n                    startIcon={<AddIcon />}\r\n                    onClick={() => setDialogOpen(true)}\r\n                  >\r\n                    {t('powermonitorPage.addAddressButton')}\r\n                  </Button>\r\n                </Grid>\r\n              </Grid>\r\n              : null}\r\n            <Grid container spacing={1} item xs={12} lg={4}>\r\n              <Grid item xs={12}>\r\n                <Typography gutterBottom variant='h5'>{t('powermonitorPage.notifications')}</Typography>\r\n              </Grid>\r\n              <Grid item xs={6}>\r\n                <Button onClick={() => subscribed ? unsubscribe() : subscribe()} fullWidth variant='contained' color={subscribed ? 'secondary' :'primary' }>{subscribed ? t('powermonitorPage.notificationsDeregister') : t('powermonitorPage.notificationsRegister')}</Button>\r\n              </Grid>\r\n              {/* <Grid item xs={6}>\r\n                <Button onClick={() => unsubscribe()} fullWidth variant='contained' color='secondary'>{t('powermonitorPage.notificationsDeregister')}</Button>\r\n              </Grid> */}\r\n            </Grid>\r\n            <Grid container spacing={1} item xs={12}>\r\n              <Grid item xs={12}>\r\n                <Divider className={classes.divider} />\r\n              </Grid>\r\n              <Grid item xs={6} md={3}>\r\n                <Button onClick={() => handleChangePowermonitorConfig()} fullWidth variant='contained' color='primary'>{t('powermonitorPage.saveButton')}</Button>\r\n              </Grid>\r\n              <Grid item xs={6} md={3}>\r\n                <Button onClick={() => handleReset()} fullWidth variant='contained' color='secondary'>{t('powermonitorPage.resetButton')}</Button>\r\n              </Grid>\r\n            </Grid>\r\n          </React.Fragment>\r\n          : null}\r\n      </Grid>\r\n    </React.Fragment>\r\n  )\r\n}","import React, { useEffect, useState } from 'react';\r\nimport { useTranslation } from 'react-i18next';\r\nimport { UniversalTabs } from './UniversalTabs.component';\r\nimport { LoadMonitoringTab } from '../components/Powermonitor/LoadMonitoringTab.component';\r\nimport { PowermonitorSettingsTab } from '../components/Powermonitor/SettingsTab.component';\r\nimport { fetchPowermonitor } from '../services/CustomAPI.service';\r\nimport { RootState } from '../reducers/Root.reducer';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { setPowermonitorConfig } from '../actions/Powermonitor.action';\r\n\r\nexport const Powermonitor = () => {\r\n  const { t } = useTranslation();\r\n  const dispatch = useDispatch()\r\n  const userPlantData = useSelector((state: RootState) => state.userData);;\r\n  const [powermonitorChartData, setPowermonitorChartData] = useState<any>();\r\n\r\n  useEffect(() => {\r\n    let interval: any = null\r\n    if (userPlantData.plantName !== '') {\r\n      fetchPowermonitor(userPlantData.plantName).then(res => {\r\n        if (res.length > 0) {\r\n          setPowermonitorChartData(res[0].data)\r\n          dispatch(setPowermonitorConfig(res[0].config))\r\n        }\r\n      })\r\n      interval = setInterval(() => {\r\n        fetchPowermonitor(userPlantData.plantName).then(res => {\r\n          if (res.length > 0) {\r\n            setPowermonitorChartData(res[0].data)\r\n          }\r\n        })\r\n      }, 30000)\r\n    }\r\n    return () => clearInterval(interval)\r\n\r\n  }, [userPlantData.plantName, dispatch])\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <UniversalTabs\r\n        name='Powermonitor'\r\n        tabs={[\r\n          {\r\n            label: t('powermonitorPage.loadMonitoringTab'),\r\n            content: <LoadMonitoringTab chartData={powermonitorChartData} />\r\n          },\r\n          {\r\n            label: t('powermonitorPage.settingsTab'),\r\n            content: <PowermonitorSettingsTab />\r\n          },\r\n        ]}\r\n      />\r\n    </React.Fragment>\r\n  )\r\n}","import { IEvent } from '../reducers/Events.reducer';\r\n\r\nexport const SET_EVENTS = 'SET_EVENTS';\r\nexport const setEvents = (switchboardName: string, events: Array<IEvent>) => ({ type: SET_EVENTS, switchboardName, events })","import React, { useEffect } from 'react';\r\nimport { createStyles, makeStyles, Theme } from '@material-ui/core/styles';\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableContainer from '@material-ui/core/TableContainer';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport TablePagination from '@material-ui/core/TablePagination';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport TableSortLabel from '@material-ui/core/TableSortLabel';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport { useTranslation } from 'react-i18next';\r\n\r\ninterface IData {\r\n  rows: Array<Array<string | number | Date | React.ReactNode>>\r\n  columns: Array<string>\r\n}\r\n\r\ninterface ITableWithSort extends IData {\r\n  dense?: boolean,\r\n  defaultOrderColumnIndex?: number\r\n}\r\n\r\ntype TOrder = 'asc' | 'desc';\r\n\r\ntype TOrderDataType = 'number' | 'string' | 'Date' | 'reactNode'\r\n\r\ninterface IEnhancedTableProps {\r\n  classes: ReturnType<typeof useStyles>;\r\n  onRequestSort: (event: React.MouseEvent<unknown>, property: string, columnIndex: number) => void;\r\n  order: TOrder;\r\n  orderBy: string;\r\n  columns: Array<string>;\r\n}\r\n\r\n////////////////////////////////////////////////////\r\n\r\nconst sortRowsBy = (data: IData, sortBy: string, order: TOrder, orderDataType: TOrderDataType) => {\r\n  const sortByColumnIndex = data.columns.findIndex(col => col === sortBy)\r\n  if (orderDataType === 'number' || orderDataType === 'Date') {\r\n    data.rows.sort((a: Array<any>, b: Array<any>) => order === 'asc' ? a[sortByColumnIndex] - b[sortByColumnIndex] : b[sortByColumnIndex] - a[sortByColumnIndex])\r\n  }\r\n  else if (orderDataType === 'string') {\r\n    data.rows.sort((a: Array<any>, b: Array<any>) => order === 'asc' ? a[sortByColumnIndex].localeCompare(b[sortByColumnIndex]) : b[sortByColumnIndex].localeCompare(a[sortByColumnIndex]))\r\n  }\r\n  return data.rows\r\n};\r\n\r\nconst EnhancedTableHead = (props: IEnhancedTableProps) => {\r\n  const { classes, order, orderBy, onRequestSort, columns } = props;\r\n  const createSortHandler = (property: string, columnIndex: number) => (event: React.MouseEvent<unknown>) => {\r\n    onRequestSort(event, property, columnIndex);\r\n  };\r\n\r\n  return (\r\n    <TableHead>\r\n      <TableRow>\r\n        {columns.map((headCell, index) => (\r\n          <TableCell\r\n            key={index}\r\n            align='left'\r\n            padding={'default'}\r\n            sortDirection={orderBy === headCell ? order : false}\r\n            style={{ width: `${100 / columns.length}%` }}\r\n          >\r\n            <TableSortLabel\r\n              active={orderBy === headCell}\r\n              direction={orderBy === headCell ? order : 'asc'}\r\n              onClick={createSortHandler(headCell, index)}\r\n            >\r\n              {headCell}\r\n              {orderBy === headCell ? (\r\n                <span className={classes.visuallyHidden}>\r\n                  {order === 'desc' ? 'sorted descending' : 'sorted ascending'}\r\n                </span>\r\n              ) : null}\r\n            </TableSortLabel>\r\n          </TableCell>\r\n        ))}\r\n      </TableRow>\r\n    </TableHead>\r\n  );\r\n}\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n  createStyles({\r\n    root: {\r\n      width: '100%',\r\n    },\r\n    paper: {\r\n      width: '100%',\r\n      marginBottom: theme.spacing(2),\r\n    },\r\n    visuallyHidden: {\r\n      border: 0,\r\n      clip: 'rect(0 0 0 0)',\r\n      height: 1,\r\n      margin: -1,\r\n      overflow: 'hidden',\r\n      padding: 0,\r\n      position: 'absolute',\r\n      top: 20,\r\n      width: 1,\r\n    },\r\n  }),\r\n);\r\n\r\nexport const TableWithSort: React.FC<ITableWithSort> = ({ columns, rows, dense, defaultOrderColumnIndex }) => {\r\n  const classes = useStyles();\r\n  const [order, setOrder] = React.useState<TOrder>('desc');\r\n  const [orderDataType, setOrderDataType] = React.useState<TOrderDataType>('Date')\r\n  const [orderBy, setOrderBy] = React.useState<string>(defaultOrderColumnIndex ? columns[defaultOrderColumnIndex] : columns[0]);\r\n  const [page, setPage] = React.useState(0);\r\n  const [rowsPerPage, setRowsPerPage] = React.useState(5);\r\n  const { t } = useTranslation();\r\n\r\n  useEffect(() => {\r\n    if (page * rowsPerPage > rows.length) {\r\n      setPage(0)\r\n    }\r\n  }, [rows, setPage, page, rowsPerPage])\r\n\r\n  /**\r\n  * [Type guard]\r\n  * @return boolean\r\n  */\r\n  const isDate = (element: unknown): element is Date => {\r\n    return (element as Date).toTimeString !== undefined;\r\n  }\r\n  /**\r\n   * [Type guard]\r\n   * @return boolean\r\n   */\r\n  const isNumber = (element: unknown): element is number => {\r\n    return (element as number).toExponential !== undefined;\r\n  }\r\n  /**\r\n  * [Type guard]\r\n  * @return boolean\r\n  */\r\n  const isString = (element: unknown): element is string => {\r\n    return (element as string).toUpperCase !== undefined;\r\n  }\r\n  //\r\n\r\n  const handleRequestSort = (event: React.MouseEvent<unknown>, property: string, columnIndex: number) => {\r\n    const isAsc = orderBy === property && order === 'asc';\r\n    const rowValue = rows[0][columnIndex]\r\n    setOrder(isAsc ? 'desc' : 'asc');\r\n    setOrderBy(property);\r\n    if (isDate(rowValue)) {\r\n      setOrderDataType('Date')\r\n    }\r\n    else if (isNumber(rowValue)) {\r\n      setOrderDataType('number')\r\n    }\r\n    else if (isString(rowValue)) {\r\n      setOrderDataType('string')\r\n    }\r\n    else {\r\n      setOrderDataType('reactNode')\r\n    }\r\n  };\r\n\r\n  const handleChangePage = (event: unknown, newPage: number) => {\r\n    setPage(newPage);\r\n  };\r\n\r\n  const handleChangeRowsPerPage = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n    setRowsPerPage(parseInt(event.target.value, 10));\r\n    setPage(0);\r\n  };\r\n\r\n  const emptyRows = rowsPerPage - Math.min(rowsPerPage, rows.length - page * rowsPerPage);\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <Paper className={classes.paper}>\r\n        <TableContainer>\r\n          <Table\r\n\r\n            aria-labelledby=\"tableTitle\"\r\n            size={dense ? 'small' : 'medium'}\r\n            aria-label=\"enhanced table\"\r\n          >\r\n            <EnhancedTableHead\r\n              columns={columns}\r\n              classes={classes}\r\n              order={order}\r\n              orderBy={orderBy}\r\n              onRequestSort={handleRequestSort}\r\n            />\r\n            <TableBody>\r\n              {sortRowsBy({ rows, columns }, orderBy, order, orderDataType)\r\n                .slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)\r\n                .map((row, index) => {\r\n                  return (\r\n                    <TableRow\r\n                      hover\r\n                      key={index}\r\n                    >\r\n                      {row.map((cell, i) => {\r\n                        return (\r\n                          <TableCell key={i} align=\"left\">\r\n                            {isDate(cell) ? cell.toLocaleString() : cell}\r\n                          </TableCell>)\r\n                      })}\r\n                    </TableRow>\r\n                  );\r\n                })}\r\n              {emptyRows > 0 && (\r\n                <TableRow style={{ height: (dense ? 33 : 53) * emptyRows }}>\r\n                  <TableCell colSpan={columns.length} />\r\n                </TableRow>\r\n              )}\r\n            </TableBody>\r\n          </Table>\r\n        </TableContainer>\r\n        <TablePagination\r\n          rowsPerPageOptions={[5, 10, 25]}\r\n          component=\"div\"\r\n          count={rows.length}\r\n          rowsPerPage={rowsPerPage}\r\n          page={page * rowsPerPage > rows.length ? 0 : page}\r\n          onChangePage={handleChangePage}\r\n          onChangeRowsPerPage={handleChangeRowsPerPage}\r\n          labelRowsPerPage={t('tableWithSort.labelRowsPerPage')}\r\n          labelDisplayedRows={({ from, to, count }) => `${from}-${to} ${t('tableWithSort.labelDisplayedRows')} ${count}`}\r\n        />\r\n      </Paper>\r\n    </div>\r\n  );\r\n}","export const fetchEvents = async (assetID: string, fromDate: string, toDate: string) => {\r\n  const response = await fetch(`/api/eventmanagement/v3/events?size=500&page=0&filter={\"timestamp\":{\"between\":\"[${fromDate},${toDate})\"},\"entityId\":\"${assetID}\",\"typeId\":\"com.siemens.mindsphere.eventmgmt.event.type.MindSphereStandardEvent\"}`)\r\n  const data = await response.json()\r\n  const dataWithCustomFields = {\r\n    ...data,\r\n    assetID,\r\n  }\r\n  return dataWithCustomFields\r\n}\r\n","import React, { useEffect, useCallback } from 'react';\r\nimport { DatePicker } from \"@material-ui/pickers\";\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport { useTranslation } from 'react-i18next';\r\nimport { setEvents } from '../actions/Events.action';\r\nimport { TableWithSort } from './TableWithSort.component';\r\nimport WarningIcon from '@material-ui/icons/Warning';\r\nimport InfoIcon from '@material-ui/icons/Info';\r\nimport ErrorIcon from '@material-ui/icons/Error';\r\nimport { makeStyles, Theme, createStyles } from '@material-ui/core/styles';\r\nimport { UniversalTabs } from './UniversalTabs.component';\r\nimport RefreshIcon from '@material-ui/icons/Refresh';\r\nimport Button from '@material-ui/core/Button';\r\nimport { useSelector } from 'react-redux';\r\nimport { RootState } from '../reducers/Root.reducer';\r\nimport { fetchEvents } from '../services/FetchEventsAPI.service';\r\nimport { useDispatch } from 'react-redux';\r\nimport { setBackdropOpen } from '../actions/Backdrop.action';\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n  createStyles({\r\n    warning: {\r\n      color: 'orange'\r\n    },\r\n    info: {\r\n      color: '#2196f3'\r\n    },\r\n    error: {\r\n      color: 'red'\r\n    },\r\n    select: {\r\n      width: '100%'\r\n    },\r\n    section: {\r\n      marginTop: theme.spacing(2),\r\n      marginBottom: theme.spacing(4)\r\n    }\r\n  }),\r\n);\r\n\r\nexport const Events = () => {\r\n  const [dateFrom, changeDateFrom] = React.useState<Date | null>(new Date(new Date().setMonth(new Date().getMonth() - 1)));\r\n  const [dateTo, changeDateTo] = React.useState<Date | null>(new Date());\r\n  const { t, i18n } = useTranslation();\r\n  const classes = useStyles();\r\n  const overview = useSelector((state: RootState) => state.overview);\r\n  const events = useSelector((state: RootState) => state.events);\r\n  const dialogData = useSelector((state: RootState) => state.deviceDataDialogElevationDataSource);\r\n  const dispatch = useDispatch();\r\n\r\n  const fetchEventsFromMS = useCallback(() => {\r\n    overview.diagrams.forEach(diagram => {\r\n      if (diagram.assetID && dateFrom && dateTo) {\r\n        dispatch(setBackdropOpen(true))\r\n        fetchEvents(diagram.assetID, dateFrom.toISOString(), dateTo.toISOString()).then(res => {\r\n          if (res._embedded && res._embedded.events && diagram.assetID) {\r\n            dispatch(setEvents(diagram.assetID, res._embedded.events))\r\n            dispatch(setBackdropOpen(false))\r\n          }\r\n          else if (diagram.assetID) {\r\n            dispatch(setEvents(diagram.assetID, []))\r\n          }\r\n        }).catch(err => {\r\n          dispatch(setBackdropOpen(false))\r\n        })\r\n      }\r\n    })\r\n  }, [dateFrom, dateTo, dispatch, overview.diagrams])\r\n\r\n  const setSeverityIcon = (severity: number) => {\r\n    switch (severity) {\r\n      case 20:\r\n        return <ErrorIcon className={classes.error} />\r\n      case 30:\r\n        return <WarningIcon className={classes.warning} />\r\n      case 40:\r\n        return <InfoIcon className={classes.info} />\r\n      default:\r\n        return <InfoIcon className={classes.info} />\r\n    }\r\n  }\r\n\r\n  const setBreakerName = (assetID: string, switchboardName: string) => {\r\n    if (dialogData[`${switchboardName}-${assetID}`]) {\r\n      return dialogData[`${switchboardName}-${assetID}`].breakerName\r\n    }\r\n    return assetID\r\n  }\r\n\r\n  const initializeTabs = () => {\r\n    const tabs: Array<{ label: string, content: React.ReactNode }> = []\r\n    let allRows: Array<any> = []\r\n    overview.diagrams.forEach(diagram => {\r\n      if (diagram.assetID) {\r\n        const rows: Array<any> = events[diagram.assetID] ? events[diagram.assetID].map(event => {\r\n          const parsedDate = Date.parse(event.timestamp);\r\n          const parsedDescription = JSON.parse(event.description);\r\n          const description = i18n.language === 'pl' ? parsedDescription.pl : parsedDescription.en\r\n          return [setSeverityIcon(event.severity), new Date(parsedDate), description, diagram.name, setBreakerName(event.source, diagram.name)]\r\n        }) : [[]]\r\n        allRows = [...allRows, ...rows]\r\n        tabs.push({\r\n          label: diagram.name,\r\n          content: (\r\n            <Grid container spacing={2}>\r\n              <Grid item xs={12}>\r\n                <TableWithSort\r\n                  defaultOrderColumnIndex={1}\r\n                  columns={[t('eventsPage.severity'), t('eventsPage.time'), t('eventsPage.event'), t('eventsPage.switchboard'), t('eventsPage.device')]}\r\n                  rows={rows ? [...rows] : [[]]}\r\n                />\r\n              </Grid>\r\n            </Grid>\r\n          )\r\n        })\r\n      }\r\n    })\r\n    //aggregated events\r\n    tabs.push({\r\n      label: t('eventsPage.allDevices'),\r\n      content: (\r\n        <Grid container spacing={2}>\r\n          <Grid item xs={12}>\r\n            <TableWithSort\r\n              defaultOrderColumnIndex={1}\r\n              columns={[t('eventsPage.severity'), t('eventsPage.time'), t('eventsPage.event'), t('eventsPage.switchboard'), t('eventsPage.device')]}\r\n              rows={allRows.length > 0 ? [...allRows] : [[]]}\r\n            />\r\n          </Grid>\r\n        </Grid>\r\n      )\r\n    })\r\n    return <UniversalTabs name='Events' tabs={tabs} />\r\n  }\r\n\r\n  useEffect(() => {\r\n    fetchEventsFromMS()\r\n  }, [dateFrom, dateTo, fetchEventsFromMS])\r\n\r\n  const tabPanel = initializeTabs()\r\n\r\n  return (\r\n    <React.Fragment>\r\n      {tabPanel}\r\n      <Grid container spacing={2} justify='flex-end' className={classes.section}>\r\n        <Grid item xs={12} sm={6} md={4} lg={3} xl={2}>\r\n          <Button\r\n            variant=\"contained\"\r\n            color=\"primary\"\r\n            startIcon={<RefreshIcon />}\r\n            fullWidth\r\n            onClick={() => fetchEventsFromMS()}\r\n          >\r\n            {t('eventsPage.refreshButton')}\r\n          </Button>\r\n        </Grid>\r\n      </Grid>\r\n\r\n      <Grid container spacing={2}>\r\n        <Grid item xs={12} sm={6}>\r\n          <Typography gutterBottom variant=\"h5\">{t('eventsPage.startDate')}</Typography>\r\n          <DatePicker\r\n            cancelLabel={t('datePicker.cancelButton')}\r\n            autoOk\r\n            label={t('eventsPage.dateFromLabel')}\r\n            value={dateFrom}\r\n            onChange={changeDateFrom}\r\n            fullWidth\r\n            maxDate={dateTo}\r\n            variant='static'\r\n          />\r\n        </Grid>\r\n        <Grid item xs={12} sm={6}>\r\n          <Typography gutterBottom variant=\"h5\">{t('eventsPage.endDate')}</Typography>\r\n          <DatePicker\r\n            cancelLabel={t('datePicker.cancelButton')}\r\n            autoOk\r\n            label={t('eventsPage.dateToLabel')}\r\n            value={dateTo}\r\n            onChange={changeDateTo}\r\n            fullWidth\r\n            disableFuture\r\n            minDate={dateFrom}\r\n            variant='static'\r\n          />\r\n        </Grid>\r\n      </Grid>\r\n    </React.Fragment >\r\n  )\r\n}","import React from 'react';\r\nimport { compartmentHeight, reservedTopSpace, panelHeight, panelWidth, useStyles } from '../Elevation.component';\r\n\r\ninterface IPanelSVG {\r\n  x: number,\r\n  y: number,\r\n  name?: string\r\n  empty?: boolean\r\n}\r\n\r\nexport const PanelSVG: React.FC<IPanelSVG> = ({ x, y, name, empty, children }) => {\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <React.Fragment>\r\n      {!empty?\r\n      /* top sivacon plate */\r\n      <React.Fragment>\r\n      <text\r\n        x={x + 0.5 * panelWidth}\r\n        y={y + 0.2 * compartmentHeight}\r\n        className={classes.siemensLogoPlate}\r\n      >\r\n        SIEMENS\r\n      </text>\r\n      <rect\r\n        x={x + 0.3 * panelWidth}\r\n        y={y + 0.05 * compartmentHeight}\r\n        width={0.4 * panelWidth}\r\n        height={0.3 * compartmentHeight}\r\n        className={classes.siemensLogoOutline}\r\n      />\r\n      {/* horizontal divider */}\r\n      <line\r\n        x1={x}\r\n        y1={y + reservedTopSpace}\r\n        x2={x + panelWidth}\r\n        y2={y + reservedTopSpace}\r\n        className={classes.lineStyle}\r\n      />\r\n      {/* top edge */}\r\n      <line\r\n        x1={x}\r\n        y1={y}\r\n        x2={x + panelWidth}\r\n        y2={y}\r\n        className={classes.lineStyle}\r\n      />\r\n      {/* left edge */}\r\n      <line\r\n        x1={x}\r\n        y1={y}\r\n        x2={x}\r\n        y2={y + panelHeight}\r\n        className={classes.lineStyle}\r\n      />\r\n      {/* right edge */}\r\n      <line\r\n        x1={x + panelWidth}\r\n        y1={y}\r\n        x2={x + panelWidth}\r\n        y2={y + panelHeight}\r\n        className={classes.lineStyle}\r\n      />\r\n      {/* bottom edge */}\r\n      <line\r\n        x1={x}\r\n        y1={y + panelHeight}\r\n        x2={x + panelWidth}\r\n        y2={y + panelHeight}\r\n        className={classes.lineStyle}\r\n      />\r\n      {/* decorative base */}\r\n      <rect\r\n        x={x}\r\n        y={y + panelHeight}\r\n        width={panelWidth}\r\n        height={reservedTopSpace}\r\n        className={classes.panelBase}\r\n      />\r\n      {/* /////////////////////////\r\n      Children (compartments inside)\r\n      ///////////////////////// */}\r\n      {React.Children.map(children, (child) => {\r\n        if (!React.isValidElement(child)) return\r\n        return child\r\n      })}\r\n      {/* panel name */}\r\n      <text\r\n        x={x + 0.5 * panelWidth}\r\n        y={y + panelHeight + 2*reservedTopSpace}\r\n        className={classes.panelName}\r\n      >\r\n        {name}\r\n      </text>\r\n      </React.Fragment>\r\n    :null}\r\n      \r\n    </React.Fragment>\r\n  )\r\n}","import React from 'react';\r\nimport { compartmentHeight, reservedTopSpace, panelWidth, strokeWidth, useStyles } from '../Elevation.component';\r\nimport { setDeviceDataDialogOpen } from '../../actions/DeviceDataDialog.action';\r\nimport { useDispatch } from 'react-redux';\r\nimport { useTranslation } from 'react-i18next';\r\n\r\ninterface ICompartmentSVG {\r\n  x: number,\r\n  y: number,\r\n  span: number,\r\n  columns: number,\r\n  name?: string,\r\n  nonInteractive?: boolean,\r\n  state: {\r\n    closed: boolean,\r\n    tripped: boolean,\r\n    drawnOut: boolean\r\n  },\r\n  deviceName: string,\r\n  deviceType: string,\r\n  sectionName: string,\r\n  breakerName: string,\r\n  assetID: string,\r\n  switchboardAssetID: string,\r\n  connectionState: number\r\n}\r\n\r\nexport interface ICompartmentDevice {\r\n  x: number,\r\n  y: number,\r\n  scale: number\r\n}\r\n\r\nexport const CompartmentSVG: React.FC<ICompartmentSVG> = ({ x, y, span, columns, name, nonInteractive, children, state, deviceName, deviceType, sectionName, breakerName, assetID, switchboardAssetID, connectionState }) => {\r\n  const classes = useStyles();\r\n  const dispatch = useDispatch();\r\n  const { t } = useTranslation()\r\n  const width = panelWidth / columns - 2 * strokeWidth\r\n  const height = span * compartmentHeight - 2 * strokeWidth\r\n  return (\r\n    <React.Fragment>\r\n      {children}\r\n      {/* special compartment state colors */}\r\n      <rect\r\n        x={x + strokeWidth}\r\n        y={y + reservedTopSpace + strokeWidth}\r\n        width={width}\r\n        height={height}\r\n        className={state.drawnOut || state.tripped ? classes.cbTrippedOverlay : !state.closed ? classes.cbOpenOverlay : classes.transparent}\r\n      />\r\n      {/* compartment name */}\r\n      {/* compartment width > length ? text horizontally : text vertically to accomodate physically */}\r\n      <text\r\n        x={x + width}\r\n        y={y + reservedTopSpace + 3 * strokeWidth}\r\n        className={width <= height ? classes.compartmentNameVertical : classes.compartmentNameHorizontal}\r\n        transform={width <= height ?\r\n          `rotate(-90, ${x + width}, ${y + reservedTopSpace + 4 * strokeWidth})`\r\n          : undefined}\r\n      >\r\n        {name}\r\n      </text>\r\n      {/* no connection text */}\r\n      {connectionState !== 1 ?\r\n        <text\r\n          x={x}\r\n          y={y + reservedTopSpace + 3 * strokeWidth}\r\n          className={width <= height ? classes.noConnectionAlarmVertical : classes.noConnectionAlarmHorizontal}\r\n          transform={width <= height ?\r\n            `rotate(90, ${x + strokeWidth}, ${y + reservedTopSpace + 3 * strokeWidth})`\r\n            : undefined}\r\n        >\r\n          &nbsp;{`${t('svgCompartment.noConnection')}`}\r\n        </text>\r\n        : null\r\n      }\r\n      {/* clickable rectangle */}\r\n      {!nonInteractive ?\r\n        <rect\r\n          x={x + strokeWidth}\r\n          y={y + reservedTopSpace + strokeWidth}\r\n          width={width}\r\n          height={height}\r\n          className={classes.clickableOverlay}\r\n          onClick={() => {\r\n            dispatch(setDeviceDataDialogOpen({\r\n              open: true,\r\n              deviceName: deviceName,\r\n              deviceType: deviceType,\r\n              breakerName: breakerName,\r\n              sectionName: sectionName,\r\n              assetID: assetID,\r\n              switchboardAssetID: switchboardAssetID\r\n            }))\r\n          }}\r\n        />\r\n        : null\r\n      }\r\n      {/* compartment rectangle */}\r\n      <rect\r\n        x={x}\r\n        y={y + reservedTopSpace}\r\n        width={columns ? panelWidth / columns : panelWidth}\r\n        height={span * compartmentHeight}\r\n        className={classes.lineStyle}\r\n      />\r\n    </React.Fragment>\r\n  )\r\n}","import React from 'react';\r\nimport { ICompartmentDevice } from './CompartmentSVG.component';\r\nimport { circuitBreaker3VAVerticalWidthPixels, circuitBreaker3VAVerticalHeightPixels } from '../Elevation.component';\r\n\r\nexport const CircuitBreaker3VAVerticalSVG: React.FC<ICompartmentDevice> = ({ x, y, scale }) => {\r\n  return (\r\n    <React.Fragment>\r\n      <g transform={`scale(${scale})`} style={{ transformOrigin: `${x + circuitBreaker3VAVerticalWidthPixels / 2}px ${y + circuitBreaker3VAVerticalHeightPixels / 2}px` }}>\r\n        <path d=\"M1024.18,594.27H961.5v-42.9h62.68Zm-62.12-.56h61.56V551.93H962.06Z\" transform={`translate(${x - 880.87} ${y - 404.88})`} fill=\"#005f87\" />\r\n        <rect x={`${x + 1.06}`} y={`${y + 1.06}`} width=\"147.89\" height=\"254.97\" fill=\"#a6c7d5\" />\r\n        <path d=\"M1030.87,662h-150V404.88h150ZM883,659.84h145.77V407H883Z\" transform={`translate(${x - 880.87} ${y - 404.88})`} fill=\"#005f87\" />\r\n        <path d=\"M1005.31,451.38a6.13,6.13,0,1,1,5.37-8.8A6.17,6.17,0,0,1,1005.31,451.38Zm-.15-11.69c-7.26.28-7.37,10.69-.12,11.13C1012.47,450.69,1012.58,440,1005.16,439.69Z\" transform={`translate(${x - 880.87} ${y - 404.88})`} fill=\"#005f87\" />\r\n        <path d=\"M906.7,451.38a6.13,6.13,0,1,1,5.25-9A6.18,6.18,0,0,1,906.7,451.38Zm-.14-11.69c-7.41.31-7.3,11,.13,11.13A5.57,5.57,0,0,0,906.56,439.69Z\" transform={`translate(${x - 880.87} ${y - 404.88})`} fill=\"#005f87\" />\r\n        <rect x={`${x + 1.06}`} y={`${y + 224.06}`} width=\"147.89\" height=\"0.56\" fill=\"#005f87\" />\r\n        <rect x={`${x + 11.75}`} y={`${y + 156.44}`} width=\"64.23\" height=\"27.61\" fill=\"#e5f5f9\" />\r\n        <path d=\"M980.51,588.08H968.68V576.24h11.83Zm-11.26-.56H980V576.81h-10.7Z\" transform={`translate(${x - 880.87} ${y - 404.88})`} fill=\"#005f87\" />\r\n        <path d=\"M980.51,574H968.68V562.16h11.83Zm-11.26-.57H980v-10.7h-10.7Z\" transform={`translate(${x - 880.87} ${y - 404.88})`} fill=\"#005f87\" />\r\n        <path d=\"M906.7,608.6a6.13,6.13,0,1,1,5.25-9A6.18,6.18,0,0,1,906.7,608.6Zm-.14-11.69c-7.41.31-7.3,11,.13,11.13A5.57,5.57,0,0,0,906.56,596.91Z\" transform={`translate(${x - 880.87} ${y - 404.88})`} fill=\"#005f87\" />\r\n        <path d=\"M994.6,574H982.77V562.16H994.6Zm-11.27-.57H994v-10.7h-10.7Z\" transform={`translate(${x - 880.87} ${y - 404.88})`} fill=\"#005f87\" />\r\n        <rect x={`${x + 118.03}`} y={`${y + 167.36}`} width=\"3.24\" height=\"3.24\" fill=\"#e5f5f9\" />\r\n        <rect x={`${x + 118.03}`} y={`${y + 162.71}`} width=\"3.24\" height=\"3.24\" fill=\"#e5f5f9\" />\r\n        <rect x={`${x + 118.03}`} y={`${y + 158.06}`} width=\"3.24\" height=\"3.24\" fill=\"#e5f5f9\" />\r\n        <rect x={`${x + 92.52}`} y={`${y + 129.62}`} width=\"4.47\" height=\"4.47\" fill=\"#a6c7d5\" />\r\n        <path d=\"M978.14,539.25h-5v-5h5Zm-4.47-.57h3.9v-3.9h-3.9Z\" transform={`translate(${x - 880.87} ${y - 404.88})`} fill=\"#005f87\" />\r\n        <path d=\"M1005.31,608.6a6.13,6.13,0,1,1,5.37-8.8A6.18,6.18,0,0,1,1005.31,608.6Zm-.15-11.69c-7.26.28-7.37,10.69-.12,11.13C1012.47,607.9,1012.58,597.2,1005.16,596.91Z\" transform={`translate(${x - 880.87} ${y - 404.88})`} fill=\"#005f87\" />\r\n        <path d=\"M994.6,588.08H982.77V576.24H994.6Zm-11.27-.56H994V576.81h-10.7Z\" transform={`translate(${x - 880.87} ${y - 404.88})`} fill=\"#005f87\" />\r\n        <rect x={`${x + 1.05}`} y={`${y + 32.4}`} width=\"147.91\" height=\"0.56\" fill=\"#005f87\" />\r\n        <rect x={`${x + 1.05}`} y={`${y + 47.89}`} width=\"147.91\" height=\"0.56\" fill=\"#005f87\" />\r\n        <rect x={`${x + 1.05}`} y={`${y + 61.97}`} width=\"147.91\" height=\"0.56\" fill=\"#005f87\" />\r\n        <path d=\"M971.78,539.11H939.94V470.05h31.84Zm-31.27-.56h30.71V470.61H940.51Z\" transform={`translate(${x - 880.87} ${y - 404.88})`} fill=\"#005f87\" />\r\n        <rect x={`${x + 1.05}`} y={`${y + 136.59}`} width=\"147.91\" height=\"0.56\" fill=\"#005f87\" />\r\n        <rect x={`${x + 1.05}`} y={`${y + 146.49}`} width=\"147.91\" height=\"0.56\" fill=\"#005f87\" />\r\n        <rect x={`${x + 1.33}`} y={`${y + 188.83}`} width=\"147.34\" height=\"0.56\" fill=\"#005f87\" />\r\n        <rect x={`${x + 56.76}`} y={`${y + 90.57}`} width=\"36.48\" height=\"9.91\" fill=\"#a6c7d5\" />\r\n        <path d=\"M974.39,505.64h-37V495.17h37Zm-36.48-.56h35.92v-9.35H937.91Z\" transform={`translate(${x - 880.87} ${y - 404.88})`} fill=\"#005f87\" />\r\n        <rect x={`${x + 5.27}`} y={`${y + 48.17}`} width=\"36.63\" height=\"9.86\" fill=\"#005f87\" />\r\n        <rect x={`${x + 56.58}`} y={`${y + 93.22}`} width=\"36.59\" height=\"4.62\" fill=\"#d9e7ed\" />\r\n        <path d=\"M974.39,505.64h-37V495.17h37Zm-36.48-.56h35.92v-9.35H937.91Z\" transform={`translate(${x - 880.87} ${y - 404.88})`} fill=\"#005f87\" />\r\n        <rect x={`${x + 56.58}`} y={`${y + 92.94}`} width=\"36.59\" height=\"0.56\" fill=\"#005f87\" />\r\n        <rect x={`${x + 56.58}`} y={`${y + 97.56}`} width=\"36.59\" height=\"0.56\" fill=\"#005f87\" />\r\n      </g>\r\n    </React.Fragment>\r\n  )\r\n}","import React from 'react';\r\nimport { ICompartmentDevice } from './CompartmentSVG.component';\r\nimport { circuitBreaker3WLWidthPixels, circuitBreaker3WLHeightPixels } from '../Elevation.component';\r\n\r\nexport const CircuitBreaker3WLSVG: React.FC<ICompartmentDevice> = ({ x, y, scale }) => {\r\n  return (\r\n    <React.Fragment>\r\n      <g transform={`scale(${scale})`} style={{ transformOrigin: `${x + circuitBreaker3WLWidthPixels / 2}px ${y + circuitBreaker3WLHeightPixels / 2}px` }}>\r\n        <rect x={`${x + 0.46}`} y={`${y + 0.46}`} width=\"199.07\" height=\"259.26\" fill=\"#a6c7d5\" />\r\n        <path d=\"M1051.84,660h-200V399.8h200Zm-199.07-.93h198.15V400.72H852.77Z\" transform={`translate(${x - 851.84} ${y - 399.8})`} fill=\"#005f87\" />\r\n        <path d=\"M1043,637.7H860.7V405.94H1043Zm-181.35-.93h180.43V406.87H861.63Z\" transform={`translate(${x - 851.84} ${y - 399.8})`} fill=\"#005f87\" />\r\n        <rect x={`${x + 9.32}`} y={`${y + 204.75}`} width=\"181.36\" height=\"0.93\" fill=\"#005f87\" />\r\n        <path d=\"M1014.81,605.47H919.17V549.84h95.64Zm-94.71-.92h93.79V550.76H920.1Z\" transform={`translate(${x - 851.84} ${y - 399.8})`} fill=\"#005f87\" />\r\n        <rect x={`${x + 162.04}`} y={`${y + 6.6}`} width=\"0.93\" height=\"198.61\" fill=\"#005f87\" />\r\n        <rect x={`${x + 67.33}`} y={`${y + 6.6}`} width=\"0.93\" height=\"198.61\" fill=\"#005f87\" />\r\n        <path d=\"M940.44,443a12.49,12.49,0,1,1,12.49-12.49A12.51,12.51,0,0,1,940.44,443Zm0-24.74a12.25,12.25,0,1,0,12.25,12.25A12.26,12.26,0,0,0,940.44,418.24Z\" transform={`translate(${x - 851.84} ${y - 399.8})`} fill=\"#005f87\" />\r\n        <path d=\"M977,440.12a8.24,8.24,0,1,1,8.24-8.23A8.24,8.24,0,0,1,977,440.12Zm0-16.22a8,8,0,1,0,8,8A8,8,0,0,0,977,423.9Z\" transform={`translate(${x - 851.84} ${y - 399.8})`} fill=\"#005f87\" />\r\n        <path d=\"M1038.43,469.62h-23.88V410.28h23.88Zm-23.63-.25h23.39V410.53H1014.8Z\" transform={`translate(${x - 851.84} ${y - 399.8})`} fill=\"#005f87\" />\r\n        <rect x={`${x + 131.03}`} y={`${y + 14.26}`} width=\"13.34\" height=\"4.93\" fill=\"#d9e7ed\" />\r\n        <rect x={`${x + 145.12}`} y={`${y + 14.26}`} width=\"13.34\" height=\"4.93\" fill=\"#d9e7ed\" />\r\n        <path d=\"M901.57,628.59a9.34,9.34,0,1,1,9.34-9.34A9.35,9.35,0,0,1,901.57,628.59Zm0-18.43a9.1,9.1,0,1,0,9.09,9.09A9.11,9.11,0,0,0,901.57,610.16Z\" transform={`translate(${x - 851.84} ${y - 399.8})`} fill=\"#005f87\" />\r\n        <rect x={`${x + 67.79}`} y={`${y + 205.21}`} width=\"118.68\" height=\"26\" fill=\"#a6c7d5\" />\r\n        <path d=\"M1038.77,631.48H919.17V604.55h119.6Zm-118.67-.93h117.75V605.47H920.1Z\" transform={`translate(${x - 851.84} ${y - 399.8})`} fill=\"#005f87\" />\r\n        <path d=\"M984.71,546H925.38V467h59.33Zm-59.08-.24h58.84V467.28H925.63Z\" transform={`translate(${x - 851.84} ${y - 399.8})`} fill=\"#005f87\" />\r\n        <path d=\"M1006.86,457.13v0a8.62,8.62,0,0,0-17.24,0,7.72,7.72,0,0,0,.1,1.18V600H1007V457.13Z\" transform={`translate(${x - 851.84} ${y - 399.8})`} fill=\"#a6c7d5\" />\r\n        <path d=\"M1007.42,600.45H989.25V458.28a8,8,0,0,1-.09-1.18,9.09,9.09,0,0,1,18.15-.43h0l.1.46Zm-17.24-.92h16.31V457.6l-.1-.47a8.15,8.15,0,0,0-16.3,0,7.85,7.85,0,0,0,.09,1.11Z\" transform={`translate(${x - 851.84} ${y - 399.8})`} fill=\"#005f87\" />\r\n        <path d=\"M1006.86,465.19v0c0-4.4-3.86-8-8.62-8s-8.62,3.57-8.62,8a7,7,0,0,0,.1,1.12V600H1007V465.19Z\" transform={`translate(${x - 851.84} ${y - 399.8})`} fill=\"#a6c7d5\" />\r\n        <path d=\"M1007.42,600.45H989.25V466.27a7.24,7.24,0,0,1-.09-1.12c0-4.65,4.07-8.43,9.08-8.43,4.85,0,8.83,3.55,9.07,8h0l.1.47Zm-17.24-.92h16.31V465.65l-.1-.46c0-4.18-3.65-7.55-8.15-7.55s-8.15,3.37-8.15,7.51a7,7,0,0,0,.09,1.05Z\" transform={`translate(${x - 851.84} ${y - 399.8})`} fill=\"#005f87\" />\r\n        <line x1={`${x + 155.11}`} y1={`${y + 163.09}`} x2={`${x + 137.87}`} y2={`${y + 163.09}`} fill=\"#a6c7d5\" />\r\n        <rect x={`${x + 137.87}`} y={`${y + 162.62}`} width=\"17.24\" height=\"0.93\" fill=\"#005f87\" />\r\n        <rect x={`${x + 9.32}`} y={`${y + 10.48}`} width=\"153.51\" height=\"0.25\" fill=\"#005f87\" />\r\n        <path d=\"M933.8,586.31h-8.42V569.4h8.42Zm-8.17-.24h7.93V569.65h-7.93Z\" transform={`translate(${x - 851.84} ${y - 399.8})`} fill=\"#005f87\" />\r\n        <rect x={`${x + 77.63}`} y={`${y + 136.27}`} width=\"21.38\" height=\"6.11\" fill=\"#005f87\" />\r\n        <path d=\"M972.11,517.77a8.31,8.31,0,1,1,8.3-8.3A8.31,8.31,0,0,1,972.11,517.77Zm0-16.36a8.06,8.06,0,1,0,8.06,8.06A8.07,8.07,0,0,0,972.11,501.41Z\" transform={`translate(${x - 851.84} ${y - 399.8})`} fill=\"#005f87\" />\r\n        <path d=\"M937.57,517.77a8.31,8.31,0,1,1,8.3-8.3A8.31,8.31,0,0,1,937.57,517.77Zm0-16.36a8.06,8.06,0,1,0,8,8.06A8.06,8.06,0,0,0,937.57,501.41Z\" transform={`translate(${x - 851.84} ${y - 399.8})`} fill=\"#005f87\" />\r\n        <rect x={`${x + 78.23}`} y={`${y + 74.59}`} width=\"15.22\" height=\"7.61\" fill=\"#a6c7d5\" />\r\n        <path d=\"M945.42,482.12H930v-7.85h15.47Zm-15.22-.24h15v-7.37h-15Z\" transform={`translate(${x - 851.84} ${y - 399.8})`} fill=\"#005f87\" />\r\n        <rect x={`${x + 167.97}`} y={`${y + 175.46}`} width=\"16.65\" height=\"7.71\" fill=\"#a6c7d5\" />\r\n        <path d=\"M1036.59,583.08h-16.9v-8h16.9Zm-16.65-.24h16.41v-7.46h-16.41Z\" transform={`translate(${x - 851.84} ${y - 399.8})`} fill=\"#005f87\" />\r\n        <rect x={`${x + 9.32}`} y={`${y + 36.96}`} width=\"58.47\" height=\"162.54\" fill=\"#a6c7d5\" />\r\n        <path d=\"M920.1,599.77H860.7V436.3h59.4Zm-58.47-.93h57.54V437.23H861.63Z\" transform={`translate(${x - 851.84} ${y - 399.8})`} fill=\"#005f87\" />\r\n        <rect x={`${x + 47.95}`} y={`${y + 153.4}`} width=\"5.22\" height=\"4.24\" fill=\"#a6c7d5\" />\r\n        <path d=\"M905.14,557.56h-5.47v-4.48h5.47Zm-5.22-.24h5v-4h-5Z\" transform={`translate(${x - 851.84} ${y - 399.8})`} fill=\"#005f87\" />\r\n        <rect x={`${x + 28.02}`} y={`${y + 45.54}`} width=\"2.45\" height=\"2.42\" fill=\"#a6c7d5\" />\r\n        <path d=\"M882.44,447.88h-2.7v-2.67h2.7Zm-2.46-.25h2.21v-2.17H880Z\" transform={`translate(${x - 851.84} ${y - 399.8})`} fill=\"#005f87\" />\r\n        <rect x={`${x + 20.01}`} y={`${y + 100.71}`} width=\"2.46\" height=\"2.42\" fill=\"#e5f5f9\" />\r\n        <rect x={`${x + 24.09}`} y={`${y + 100.71}`} width=\"2.45\" height=\"2.42\" fill=\"#e5f5f9\" />\r\n        <rect x={`${x + 28.17}`} y={`${y + 100.71}`} width=\"2.46\" height=\"2.42\" fill=\"#e5f5f9\" />\r\n        <rect x={`${x + 32.26}`} y={`${y + 100.71}`} width=\"2.45\" height=\"2.42\" fill=\"#e5f5f9\" />\r\n        <rect x={`${x + 43}`} y={`${y + 108.4}`} width=\"2.46\" height=\"2.42\" fill=\"#e5f5f9\" />\r\n        <rect x={`${x + 43}`} y={`${y + 118.76}`} width=\"2.46\" height=\"2.42\" fill=\"#e5f5f9\" />\r\n        <rect x={`${x + 43}`} y={`${y + 132.73}`} width=\"2.46\" height=\"2.42\" fill=\"#e5f5f9\" />\r\n        <rect x={`${x + 43}`} y={`${y + 145.92}`} width=\"2.46\" height=\"2.42\" fill=\"#e5f5f9\" />\r\n        <path d=\"M916.06,596.08H864.74V440h51.32ZM865,595.83h50.82V440.24H865Z\" transform={`translate(${x - 851.84} ${y - 399.8})`} fill=\"#005f87\" />\r\n        <path d=\"M875,582.11a2.71,2.71,0,1,1-2.71-2.71A2.71,2.71,0,0,1,875,582.11Z\" transform={`translate(${x - 851.84} ${y - 399.8})`} fill=\"#a6c7d5\" fillRule=\"evenodd\" />\r\n        <path d=\"M872.26,584.94a2.83,2.83,0,1,1,2.84-2.83A2.83,2.83,0,0,1,872.26,584.94Zm0-5.42a2.59,2.59,0,1,0,2.59,2.59A2.59,2.59,0,0,0,872.26,579.52Z\" transform={`translate(${x - 851.84} ${y - 399.8})`} fill=\"#005f87\" />\r\n        <path d=\"M890.68,582.11A2.71,2.71,0,1,1,888,579.4,2.71,2.71,0,0,1,890.68,582.11Z\" transform={`translate(${x - 851.84} ${y - 399.8})`} fill=\"#a6c7d5\" fillRule=\"evenodd\" />\r\n        <path d=\"M888,584.94a2.83,2.83,0,1,1,2.83-2.83A2.84,2.84,0,0,1,888,584.94Zm0-5.42a2.59,2.59,0,1,0,2.59,2.59A2.59,2.59,0,0,0,888,579.52Z\" transform={`translate(${x - 851.84} ${y - 399.8})`} fill=\"#005f87\" />\r\n        <path d=\"M911.8,582.11a2.71,2.71,0,1,1-2.71-2.71A2.71,2.71,0,0,1,911.8,582.11Z\" transform={`translate(${x - 851.84} ${y - 399.8})`} fill=\"#a6c7d5\" fillRule=\"evenodd\" />\r\n        <path d=\"M909.09,584.94a2.83,2.83,0,1,1,2.84-2.83A2.83,2.83,0,0,1,909.09,584.94Zm0-5.42a2.59,2.59,0,1,0,2.59,2.59A2.59,2.59,0,0,0,909.09,579.52Z\" transform={`translate(${x - 851.84} ${y - 399.8})`} fill=\"#005f87\" />\r\n        <path d=\"M911.32,538.15a2.71,2.71,0,1,1-2.71-2.71A2.71,2.71,0,0,1,911.32,538.15Z\" transform={`translate(${x - 851.84} ${y - 399.8})`} fill=\"#a6c7d5\" fillRule=\"evenodd\" />\r\n        <path d=\"M908.61,541a2.84,2.84,0,1,1,2.83-2.83A2.83,2.83,0,0,1,908.61,541Zm0-5.42a2.59,2.59,0,1,0,2.59,2.59A2.59,2.59,0,0,0,908.61,535.56Z\" transform={`translate(${x - 851.84} ${y - 399.8})`} fill=\"#005f87\" />\r\n        <path d=\"M880.24,538.15a2.71,2.71,0,1,1-2.71-2.71A2.71,2.71,0,0,1,880.24,538.15Z\" transform={`translate(${x - 851.84} ${y - 399.8})`} fill=\"#a6c7d5\" fillRule=\"evenodd\" />\r\n        <path d=\"M877.53,541a2.84,2.84,0,1,1,2.83-2.83A2.83,2.83,0,0,1,877.53,541Zm0-5.42a2.59,2.59,0,1,0,2.58,2.59A2.59,2.59,0,0,0,877.53,535.56Z\" transform={`translate(${x - 851.84} ${y - 399.8})`} fill=\"#005f87\" />\r\n        <path d=\"M880.24,524.33a2.71,2.71,0,1,1-2.71-2.71A2.71,2.71,0,0,1,880.24,524.33Z\" transform={`translate(${x - 851.84} ${y - 399.8})`} fill=\"#a6c7d5\" fillRule=\"evenodd\" />\r\n        <path d=\"M877.53,527.17a2.84,2.84,0,1,1,2.83-2.84A2.84,2.84,0,0,1,877.53,527.17Zm0-5.43a2.59,2.59,0,1,0,2.58,2.59A2.59,2.59,0,0,0,877.53,521.74Z\" transform={`translate(${x - 851.84} ${y - 399.8})`} fill=\"#005f87\" />\r\n        <rect x={`${x + 15.42}`} y={`${y + 43.39}`} width=\"12.66\" height=\"6.56\" fill=\"#a6c7d5\" />\r\n        <path d=\"M880,449.88h-12.9v-6.81H880Zm-12.66-.25H879.8v-6.32H867.38Z\" transform={`translate(${x - 851.84} ${y - 399.8})`} fill=\"#005f87\" />\r\n        <path d=\"M909.22,451.2a4.48,4.48,0,1,1,4.48-4.48A4.49,4.49,0,0,1,909.22,451.2Zm0-8.72a4.24,4.24,0,1,0,4.24,4.24A4.24,4.24,0,0,0,909.22,442.48Z\" transform={`translate(${x - 851.84} ${y - 399.8})`} fill=\"#005f87\" />\r\n        <path d=\"M909.88,448.61h-1.32v-3.79h1.32Zm-1.07-.24h.82v-3.31h-.82Z\" transform={`translate(${x - 851.84} ${y - 399.8})`} fill=\"#005f87\" />\r\n        \r\n        <path d=\"M904.85,598.73h-5.68V595H883v3.77h-5.69V595h-7.07v-8.08h41.63V595h-7Zm-5.44-.25h5.2v-3.76h7v-7.59H870.44v7.59h7.07v3.76h5.2v-3.76h16.7Z\" transform={`translate(${x - 851.84} ${y - 399.8})`} fill=\"#005f87\" />\r\n        <path d=\"M916.06,489.72H864.74V453.11h51.32ZM865,489.48h50.82V453.36H865Z\" transform={`translate(${x - 851.84} ${y - 399.8})`} fill=\"#005f87\" />\r\n        <rect x={`${x + 16.08}`} y={`${y + 61.5}`} width=\"44.95\" height=\"19.77\" fill=\"#e5f5f9\" />\r\n        <rect x={`${x + 23.94}`} y={`${y + 83.9}`} width=\"3.03\" height=\"3.03\" fill=\"#e5f5f9\" />\r\n        <rect x={`${x + 50.15}`} y={`${y + 83.9}`} width=\"3.03\" height=\"3.03\" fill=\"#e5f5f9\" />\r\n      </g>\r\n    </React.Fragment>\r\n  )\r\n}","import React from 'react';\r\nimport { ICompartmentDevice } from './CompartmentSVG.component';\r\nimport { circuitBreaker3VAHorizontalWidthPixels, circuitBreaker3VAHorizontalHeightPixels } from '../Elevation.component';\r\n\r\nexport const CircuitBreaker3VAHorizontalSVG: React.FC<ICompartmentDevice> = ({ x, y, scale }) => {\r\n  return (\r\n    <React.Fragment>\r\n      <g transform={`scale(${scale})`} style={{ transformOrigin: `${x + circuitBreaker3VAHorizontalWidthPixels / 2}px ${y + circuitBreaker3VAHorizontalHeightPixels / 2}px` }}>\r\n        <rect x={`${x + 0.16}`} y={`${y + 0.16}`} width=\"99.68\" height=\"99.68\" fill=\"#a6c7d5\" />\r\n        <path d=\"M671.36,357.86h-100v-100h100Zm-99.68-.32H671V258.18H571.68Z\" transform={`translate(${x - 571.36} ${y - 257.86})`} fill=\"#005f87\" />\r\n        <path d=\"M611.35,350.15l-.89-.08V291.6h21.79v58.47l-.82.08Zm.31-57.35V349h19.39V292.8Z\" transform={`translate(${x - 571.36} ${y - 257.86})`} fill=\"#005f87\" />\r\n        <path d=\"M632.25,350.15H610.46V335l-.83-.35a29.18,29.18,0,0,1,2.72-54.37,29.46,29.46,0,0,1,18,0c1,.34,1.92.69,2.8,1.08a29.13,29.13,0,0,1-.08,53.29h0c-.28.13-.55.24-.83.35ZM611.66,349h19.39V334.16l.38-.15,1.17-.49a27.92,27.92,0,0,0,.07-51.09,24.73,24.73,0,0,0-2.69-1,28.26,28.26,0,0,0-17.26,0,23.4,23.4,0,0,0-2.79,1.09,27.91,27.91,0,0,0,.19,51l1.16.49.38.15Z\" transform={`translate(${x - 571.36} ${y - 257.86})`} fill=\"#005f87\" />\r\n        <rect x={`${x + 39.1}`} y={`${y + 23.49}`} width=\"1.2\" height=\"10.84\" fill=\"#005f87\" />\r\n        <rect x={`${x + 59.68}`} y={`${y + 23.49}`} width=\"1.2\" height=\"10.84\" fill=\"#005f87\" />\r\n      </g>\r\n    </React.Fragment>\r\n  )\r\n}","import React from 'react';\r\nimport { ICompartmentDevice } from './CompartmentSVG.component';\r\nimport { switchDisconnector3NP1VerticalWidthPixels, switchDisconnector3NP1VerticalHeightPixels } from '../Elevation.component';\r\n\r\nexport const SwitchDisconnector3NP1VerticalSVG: React.FC<ICompartmentDevice> = ({ x, y, scale }) => {\r\n  return (\r\n    <React.Fragment>\r\n      <g transform={`scale(${scale})`} style={{ transformOrigin: `${x + switchDisconnector3NP1VerticalWidthPixels / 2}px ${y + switchDisconnector3NP1VerticalHeightPixels / 2}px` }}>\r\n        <path d=\"M994.86,548.56H863.07v-86H994.86Zm-131.41-.39h131V462.94h-131Z\" transform={`translate(${x - 853.97 } ${y - 410.63})`} fill=\"#005f87\" />\r\n        <rect x={`${x + 0.72}`} y={`${y + 0.72}`} width=\"148.56\" height=\"151.2\" fill=\"#a6c7d5\" />\r\n        <path d=\"M1004,563.26H854V410.63h150Zm-148.56-1.44h147.11V412.07H855.41Z\" transform={`translate(${x - 853.97 } ${y - 410.63})`} fill=\"#005f87\" />\r\n        <path d=\"M860.34,562.54H997.59V594H860.34V562.54\" transform={`translate(${x - 853.97 } ${y - 410.63})`} fill=\"#a6c7d5\" fillRule=\"evenodd\" />\r\n        <path d=\"M998.31,594.69H859.62V561.82H998.31Zm-137.25-1.44H996.87v-30H861.06Z\" transform={`translate(${x - 853.97 } ${y - 410.63})`} fill=\"#005f87\" />\r\n        <path d=\"M994.86,443H863.07V422.6H994.86Zm-131.41-.38h131V423h-131Z\" transform={`translate(${x - 853.97 } ${y - 410.63})`} fill=\"#005f87\" />\r\n        <path d=\"M949.16,480.05H908.77V462.56h40.39Zm-40-.39h39.63V462.94H909.15Z\" transform={`translate(${x - 853.97 } ${y - 410.63})`} fill=\"#005f87\" />\r\n        <path d=\"M875.34,594.69H859.62V561.82h15.72Zm-14.28-1.44H873.9v-30H861.06Z\" transform={`translate(${x - 853.97 } ${y - 410.63})`} fill=\"#005f87\" />\r\n        <path d=\"M998.31,594.69H982.59V561.82h15.72ZM984,593.25h12.84v-30H984Z\" transform={`translate(${x - 853.97 } ${y - 410.63})`} fill=\"#005f87\" />\r\n        <path d=\"M906.33,480.05H863.07V462.56h43.26Zm-42.88-.39h42.49V462.94H863.45Z\" transform={`translate(${x - 853.97 } ${y - 410.63})`} fill=\"#005f87\" />\r\n        <path d=\"M994.86,480.05H951.6V462.56h43.26ZM952,479.66h42.5V462.94H952Z\" transform={`translate(${x - 853.97 } ${y - 410.63})`} fill=\"#005f87\" />\r\n        <path d=\"M906.33,520H863.07V488.19h43.26Zm-42.88-.39h42.49v-31H863.45Z\" transform={`translate(${x - 853.97 } ${y - 410.63})`} fill=\"#005f87\" />\r\n        <path d=\"M949.16,520H908.77V488.19h40.39Zm-40-.39h39.63v-31H909.15Z\" transform={`translate(${x - 853.97 } ${y - 410.63})`} fill=\"#005f87\" />\r\n        <path d=\"M994.86,520H951.6V488.19h43.26ZM952,519.57h42.5v-31H952Z\" transform={`translate(${x - 853.97 } ${y - 410.63})`} fill=\"#005f87\" />\r\n        <path d=\"M906.33,548.56H863.07V528.1h43.26Zm-42.88-.39h42.49V528.49H863.45Z\" transform={`translate(${x - 853.97 } ${y - 410.63})`} fill=\"#005f87\" />\r\n        <path d=\"M949.16,548.56H908.77V528.1h40.39Zm-40-.39h39.63V528.49H909.15Z\" transform={`translate(${x - 853.97 } ${y - 410.63})`} fill=\"#005f87\" />\r\n        <path d=\"M994.86,548.56H951.6V528.1h43.26ZM952,548.17h42.5V528.49H952Z\" transform={`translate(${x - 853.97 } ${y - 410.63})`} fill=\"#005f87\" />\r\n        <rect x={`${x + 100.93}`} y={`${y + 36.43}`} width=\"32.7\" height=\"11.54\" fill=\"#d9e7ed\" />\r\n      </g>\r\n    </React.Fragment>\r\n  )\r\n}","import React from 'react';\r\nimport { ICompartmentDevice } from './CompartmentSVG.component';\r\nimport { switchDisconnector3NJ6WidthPixels, switchDisconnector3NJ6HeightPixels } from '../Elevation.component';\r\n\r\nexport const SwitchDisconnector3NJ6SVG: React.FC<ICompartmentDevice> = ({ x, y, scale }) => {\r\n  return (\r\n    <React.Fragment>\r\n      <g transform={`scale(${scale})`} style={{ transformOrigin: `${x + switchDisconnector3NJ6WidthPixels / 2}px ${y + switchDisconnector3NJ6HeightPixels / 2}px` }}>\r\n        <path d=\"M956.21,597.57H657.73V546.11H956.21Z\" transform={`translate(${x - 656.97} ${y - 545.35})`} fill=\"#a6c7d5\" />\r\n        <path d=\"M957,598.33H657v-53H957Zm-298.48-1.52h297V546.87h-297Z\" transform={`translate(${x - 656.97} ${y - 545.35})`} fill=\"#005f87\" />\r\n        <path d=\"M938.62,597.57H937.1V546.11h1.52Z\" transform={`translate(${x - 656.97} ${y - 545.35})`} fill=\"#005f87\" />\r\n        <path d=\"M946.71,576.44a5.26,5.26,0,1,1,5.25-5.26A5.27,5.27,0,0,1,946.71,576.44Zm0-10.13a4.87,4.87,0,1,0,4.87,4.87A4.88,4.88,0,0,0,946.71,566.31Z\" transform={`translate(${x - 656.97} ${y - 545.35})`} fill=\"#005f87\" />\r\n        <path d=\"M937.86,572.86H726.25v-.43H937.86Z\" transform={`translate(${x - 656.97} ${y - 545.35})`} fill=\"#005f87\" />\r\n        <path d=\"M667,597.07h-1.52V546.61H667Z\" transform={`translate(${x - 656.97} ${y - 545.35})`} fill=\"#005f87\" />\r\n        <path d=\"M723.59,592.86H679.28v-42h44.31Z\" transform={`translate(${x - 656.97} ${y - 545.35})`} fill=\"#a6c7d5\" />\r\n        <path d=\"M724.1,593.38H678.77V550.3H724.1Zm-44.3-1h43.27v-41H679.8Z\" transform={`translate(${x - 656.97} ${y - 545.35})`} fill=\"#005f87\" />\r\n        <path d=\"M723.59,546.4v50.88\" transform={`translate(${x - 656.97} ${y - 545.35})`} fill=\"#a6c7d5\" />\r\n        <path d=\"M724.35,597.28h-1.52V546.4h1.52Z\" transform={`translate(${x - 656.97} ${y - 545.35})`} fill=\"#005f87\" />\r\n        <path d=\"M692.28,563.23a8.61,8.61,0,1,1,0,17.22Z\" transform={`translate(${x - 656.97} ${y - 545.35})`} fill=\"#a6c7d5\" />\r\n        <path d=\"M692.28,580.85h-.4v-18h.4a9,9,0,0,1,0,18Zm.41-17.21V580a8.21,8.21,0,0,0,0-16.39Z\" transform={`translate(${x - 656.97} ${y - 545.35})`} fill=\"#005f87\" />\r\n        <path d=\"M705.75,571.83a11.14,11.14,0,0,0-1.24-5.09,12.12,12.12,0,0,0-6.36-5.93,3.83,3.83,0,0,1,0-5.39h8.21l2.27-2.27s6.27,6.46,6,18.7-6.14,18.68-6.14,18.68l-2.26-2.29-8.2,0a3.82,3.82,0,0,1,0-5.39,12.09,12.09,0,0,0,6.39-5.9,11.23,11.23,0,0,0,1.27-5.08\" transform={`translate(${x - 656.97} ${y - 545.35})`} fill=\"#a6c7d5\" />\r\n        <path d=\"M708.54,591.15l-2.45-2.48-8.2,0-.13-.13a4.16,4.16,0,0,1-1.22-3,4.21,4.21,0,0,1,1.25-3l.17-.1a11.71,11.71,0,0,0,6.13-5.65,11,11,0,0,0,1.23-4.92,10.64,10.64,0,0,0-1.2-4.9,11.65,11.65,0,0,0-6.1-5.71l-.17-.11a4.24,4.24,0,0,1,0-6L698,555h8.2l2.45-2.45.31.31c.26.27,6.39,6.73,6.16,19s-6,18.69-6.26,19Zm-10.29-3.38,8.2,0,2,2.08c1.18-1.49,5.55-7.68,5.74-18s-4.42-16.62-5.63-18.07l-2.07,2.07h-8.2a3.37,3.37,0,0,0,0,4.58,12.53,12.53,0,0,1,6.52,6.14,11.47,11.47,0,0,1,0,10.53,12.46,12.46,0,0,1-6.54,6.08,3.41,3.41,0,0,0-.08,4.59Z\" transform={`translate(${x - 656.97} ${y - 545.35})`} fill=\"#005f87\" />\r\n        <path d=\"M688.65,563.23h3.63v17.15h-3.63Z\" transform={`translate(${x - 656.97} ${y - 545.35})`} fill=\"#a6c7d5\" />\r\n        <path d=\"M692.69,580.79h-4.44v-18h4.44Zm-3.63-.81h2.82V563.63h-2.82Z\" transform={`translate(${x - 656.97} ${y - 545.35})`} fill=\"#005f87\" />\r\n        <path d=\"M899.58,570.07H879V549.52h20.55Zm-20.14-.41h19.74V549.92H879.44Z\" transform={`translate(${x - 656.97} ${y - 545.35})`} fill=\"#005f87\" />\r\n        <path d=\"M933.21,570.09H899.38a.22.22,0,0,1-.22-.22V549.72a.22.22,0,0,1,.22-.22h33.83a.22.22,0,0,1,.22.22v20.15A.22.22,0,0,1,933.21,570.09Zm-33.61-.45H933v-19.7H899.6Z\" transform={`translate(${x - 656.97} ${y - 545.35})`} fill=\"#005f87\" />\r\n        <path d=\"M879.5,593h-7.36V572.44h7.36Zm-7-.4h6.55V572.85h-6.55Z\" transform={`translate(${x - 656.97} ${y - 545.35})`} fill=\"#005f87\" />\r\n        <path d=\"M813.23,593h-7.36V572.44h7.36Zm-7-.4h6.55V572.85h-6.55Z\" transform={`translate(${x - 656.97} ${y - 545.35})`} fill=\"#005f87\" />\r\n        <path d=\"M933.21,593H724.28a.22.22,0,0,1-.23-.22V572.64a.22.22,0,0,1,.23-.22H933.21a.22.22,0,0,1,.23.22v20.15A.22.22,0,0,1,933.21,593Zm-208.71-.45H933V572.87H724.5Z\" transform={`translate(${x - 656.97} ${y - 545.35})`} fill=\"#005f87\" />\r\n      </g>\r\n    </React.Fragment>\r\n  )\r\n}","import React from 'react';\r\nimport { ICompartmentDevice } from './CompartmentSVG.component';\r\nimport { switchDisconnector3NJ4WidthPixels, switchDisconnector3NJ4HeightPixels } from '../Elevation.component';\r\n\r\nexport const SwitchDisconnector3NJ4SVG: React.FC<ICompartmentDevice> = ({ x, y, scale }) => {\r\n  return (\r\n    <React.Fragment>\r\n      <g transform={`scale(${scale})`} style={{ transformOrigin: `${x + switchDisconnector3NJ4WidthPixels / 2}px ${y + switchDisconnector3NJ4HeightPixels / 2}px` }}>\r\n        <path d=\"M582.89,97.75V84.38h50V399h-50V97.75\" transform={`translate(${x - 582.39} ${y - 83.88})`} fill=\"#a6c7d5\" />\r\n        <path d=\"M627.47,168.54H588.3V101.17h39.17ZM589.89,167h36V102.76h-36Z\" transform={`translate(${x - 582.39} ${y - 83.88})`} fill=\"#005f87\" />\r\n        <path d=\"M627.47,356.49H588.3V289.12h39.17Zm-37.58-1.59h36V290.71h-36Z\" transform={`translate(${x - 582.39} ${y - 83.88})`} fill=\"#005f87\" />\r\n        <path d=\"M626.68,248.21H589.1V203h37.58Z\" transform={`translate(${x - 582.39} ${y - 83.88})`} fill=\"#d9e7ed\" />\r\n        <path d=\"M621.1,248.21H594.68V215.32H621.1Z\" transform={`translate(${x - 582.39} ${y - 83.88})`} fill=\"#a6c7d5\" />\r\n        <path d=\"M621.9,249h-28V214.52h28Zm-26.43-1.6H620.3v-31.3H595.47Z\" transform={`translate(${x - 582.39} ${y - 83.88})`} fill=\"#005f87\" />\r\n        <path d=\"M632.89,399h-50V84.38h50Z\" transform={`translate(${x - 582.39} ${y - 83.88})`} fill=\"none\" stroke=\"#005f87\" strokeMiterlimit=\"10\" />\r\n        <path d=\"M632.89,272.29h-50v-1.61h50Z\" transform={`translate(${x - 582.39} ${y - 83.88})`} fill=\"#005f87\" />\r\n        <path d=\"M632.89,191.84h-50v-1.61h50Z\" transform={`translate(${x - 582.39} ${y - 83.88})`} fill=\"#005f87\" />\r\n        <path d=\"M632.89,184.41h-50V182.8h50Z\" transform={`translate(${x - 582.39} ${y - 83.88})`} fill=\"#005f87\" />\r\n        <path d=\"M632.89,370h-50V368.4h50Z\" transform={`translate(${x - 582.39} ${y - 83.88})`} fill=\"#005f87\" />\r\n        <path d=\"M632.89,381.76h-50v-1.61h50Z\" transform={`translate(${x - 582.39} ${y - 83.88})`} fill=\"#005f87\" />\r\n      </g>\r\n    </React.Fragment>\r\n  )\r\n}","import React from 'react';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport { makeStyles, createStyles, Theme } from '@material-ui/core/styles';\r\nimport { PanelSVG } from './Elevation/PanelSVG.component';\r\nimport { SiemensAccentTeal, SiemensAccentYellow, SiemensAccentBlue } from '../utilities/SiemensColors.utility';\r\nimport { CompartmentSVG } from './Elevation/CompartmentSVG.component';\r\nimport { CircuitBreaker3VAVerticalSVG } from './Elevation/CircuitBreaker3VAVerticalSVG.component';\r\nimport { CircuitBreaker3WLSVG } from './Elevation/CircuitBreaker3WLSVG.component';\r\nimport { CircuitBreaker3VAHorizontalSVG } from './Elevation/CircuitBreaker3VAHorizontalSVG.component';\r\nimport { SwitchDisconnector3NP1VerticalSVG } from './Elevation/SwitchDisconnector3NP1VerticalSVG.component';\r\nimport { SwitchDisconnector3NJ6SVG } from './Elevation/SwitchDisconnector3NJ6SVG.component';\r\nimport { SwitchDisconnector3NJ4SVG } from './Elevation/SwitchDisconnector3NJ4SVG.component';\r\nimport { UniversalTabs } from './UniversalTabs.component';\r\nimport { useSelector } from 'react-redux';\r\nimport { RootState } from '../reducers/Root.reducer';\r\nimport { useTranslation } from 'react-i18next';\r\nimport { decodeState } from '../utilities/DecodeState.utility';\r\nimport { DeviceTypes } from '../utilities/DeviceTypes.utility';\r\nimport { IDeviceData } from '../reducers/DeviceDataDialogElevationDataSource.reducer';\r\n\r\n//common constants for SVGs to import /////////////////\r\nexport const panelWidth = 600;\r\nexport const panelHeight = 2100;\r\nexport const reservedTopSpace = 100;\r\nexport const compartmentHeight = (panelHeight - reservedTopSpace) / 12;\r\nexport const strokeWidth = compartmentHeight / 32;\r\n// DO NOT MODIFY THESE - WILL MAKE SVG DISPLACE - SCALING PERFORMED BY SCALE PROP !! @@@@\r\nexport const circuitBreaker3WLWidthPixels = 200;\r\nexport const circuitBreaker3WLHeightPixels = 260;\r\nexport const circuitBreaker3VAHorizontalWidthPixels = 100;\r\nexport const circuitBreaker3VAHorizontalHeightPixels = 100;\r\nexport const circuitBreaker3VAVerticalWidthPixels = 150;\r\nexport const circuitBreaker3VAVerticalHeightPixels = 255;\r\nexport const switchDisconnector3NP1VerticalWidthPixels = 150;\r\nexport const switchDisconnector3NP1VerticalHeightPixels = 184;\r\nexport const switchDisconnector3NJ6WidthPixels = 300;\r\nexport const switchDisconnector3NJ6HeightPixels = 53;\r\nexport const switchDisconnector3NJ4WidthPixels = 50;\r\nexport const switchDisconnector3NJ4HeightPixels = 314;\r\n// @@@@\r\n\r\nexport const useStyles = makeStyles((theme: Theme) =>\r\n  createStyles({\r\n    lineStyle: {\r\n      stroke: theme.palette.type === 'dark' ? theme.palette.text.primary : SiemensAccentBlue.light1,\r\n      strokeWidth: strokeWidth,\r\n      strokeLinecap: 'round',\r\n      fill: 'none'\r\n    },\r\n    siemensLogoPlate: {\r\n      fill: theme.palette.type === 'dark' ? theme.palette.text.primary : SiemensAccentTeal.dark3,\r\n      textAnchor: 'middle',\r\n      dominantBaseline: 'central',\r\n      letterSpacing: '-0.02em',\r\n      font: `bold ${panelWidth / 200}em sans-serif `\r\n    },\r\n    siemensLogoOutline: {\r\n      stroke: theme.palette.type === 'dark' ? theme.palette.text.primary : SiemensAccentTeal.dark3,\r\n      strokeWidth: panelWidth / 400,\r\n      fill: 'none'\r\n    },\r\n    clickableOverlay: {\r\n      fill: 'rgba(255, 255, 255, 0)',\r\n      \"&:hover, &:focus\": {\r\n        stroke: SiemensAccentYellow.light3,\r\n        strokeWidth: 3 * strokeWidth,\r\n      }\r\n    },\r\n    panelBase: {\r\n      stroke: theme.palette.type === 'dark' ? theme.palette.text.primary : SiemensAccentBlue.light1,\r\n      strokeWidth: strokeWidth,\r\n      fill: theme.palette.type === 'dark' ? theme.palette.text.primary : SiemensAccentBlue.light1\r\n    },\r\n    panelName: {\r\n      fill: theme.palette.type === 'dark' ? theme.palette.text.primary : SiemensAccentBlue.dark5,\r\n      textAnchor: 'middle',\r\n      dominantBaseline: 'central',\r\n      letterSpacing: '-0.02em',\r\n      font: `bold ${panelWidth / 150}em sans-serif`\r\n    },\r\n    compartmentNameHorizontal: {\r\n      fill: theme.palette.type === 'dark' ? theme.palette.text.primary : SiemensAccentBlue.dark1,\r\n      textAnchor: 'end',\r\n      dominantBaseline: 'hanging',\r\n      font: `bold ${panelWidth / 200}em sans-serif`\r\n    },\r\n    compartmentNameVertical: {\r\n      fill: theme.palette.type === 'dark' ? theme.palette.text.primary : SiemensAccentBlue.dark1,\r\n      textAnchor: 'end',\r\n      font: `bold ${panelWidth / 200}em sans-serif`\r\n    },\r\n    svgContainer: {\r\n      overflowX: 'auto',\r\n      whiteSpace: 'nowrap'\r\n    },\r\n    svgElement: {\r\n      height: 'calc(100vh - 150px)'\r\n    },\r\n    switchboardName: {\r\n      fontSize: `6em`,\r\n      fill: theme.palette.type === 'dark' ? theme.palette.text.primary : SiemensAccentTeal.dark3,\r\n      textAnchor: 'end',\r\n      dominantBaseline: 'hanging',\r\n      letterSpacing: '-0.05em'\r\n    },\r\n    cbTrippedOverlay: {\r\n      fill: 'rgba(255, 0, 0, 0.4)'\r\n    },\r\n    cbOpenOverlay: {\r\n      fill: 'rgba(255, 206, 53, 0.4)'\r\n    },\r\n    transparent: {\r\n      fill: 'none'\r\n    },\r\n    noConnectionAlarmHorizontal: {\r\n      fill: 'red',\r\n      textAnchor: 'start',\r\n      font: `bold ${panelWidth / 240}em sans-serif`,\r\n      dominantBaseline: 'hanging'\r\n    },\r\n    noConnectionAlarmVertical: {\r\n      fill: 'red',\r\n      textAnchor: 'start',\r\n      font: `bold ${panelWidth / 240}em sans-serif`,\r\n      dominantBaseline: 'ideographic'\r\n    },\r\n  }));\r\n///////////////////////////////////////////////////\r\n\r\n\r\nexport const Elevation = () => {\r\n  const elevation = useSelector((state: RootState) => state.elevation);\r\n  const classes = useStyles();\r\n  const systemTopologyData = useSelector((state: RootState) => state.systemTopologyData);\r\n  const dialogData = useSelector((state: RootState) => state.deviceDataDialogElevationDataSource);\r\n  const { t } = useTranslation()\r\n\r\n  const renderCompartmentContent = (type: string, compartmentX: number, compartmentY: number, columns: number) => {\r\n    switch (type) {\r\n      case 'infeed3VA':\r\n        return <CircuitBreaker3VAVerticalSVG scale={scaleService(columns)} x={compartmentX - circuitBreaker3VAVerticalWidthPixels / 2} y={compartmentY - compartmentHeight / 2} />\r\n      case 'infeed3WL':\r\n        return <CircuitBreaker3WLSVG scale={1.5} x={compartmentX - circuitBreaker3WLWidthPixels / 2} y={compartmentY - compartmentHeight / 2} />\r\n      case 'outgoingFeeder3VAHorizontal':\r\n        return <CircuitBreaker3VAHorizontalSVG scale={1} x={compartmentX - circuitBreaker3VAHorizontalWidthPixels / 2} y={compartmentY} />\r\n      case 'outgoingFeeder3VAVertical':\r\n        return <CircuitBreaker3VAVerticalSVG scale={scaleService(columns)} x={compartmentX - circuitBreaker3VAVerticalWidthPixels / 2} y={compartmentY - compartmentHeight / 2} />\r\n      case 'outgoingFeeder3NP1Vertical':\r\n        return <SwitchDisconnector3NP1VerticalSVG scale={scaleService(columns)} x={compartmentX - switchDisconnector3NP1VerticalWidthPixels / 2} y={compartmentY - switchDisconnector3NP1VerticalHeightPixels / 4} />\r\n      case 'outgoingFeeder3NJ6':\r\n        return <SwitchDisconnector3NJ6SVG scale={1.9} x={compartmentX - switchDisconnector3NJ6WidthPixels / 2} y={compartmentY + switchDisconnector3NJ6HeightPixels / 2} />\r\n      case 'outgoingFeeder3NJ4':\r\n        return <SwitchDisconnector3NJ4SVG scale={1.8} x={compartmentX - switchDisconnector3NJ4WidthPixels / 2} y={compartmentY - switchDisconnector3NJ4HeightPixels / 3} />\r\n      default:\r\n        return null;\r\n    }\r\n  }\r\n\r\n  const associateTypeWithDisplayData = (obj: IDeviceData) => {\r\n    if (obj) {\r\n      if (obj.infeedType && obj.infeedType !== '') {\r\n        return {\r\n          deviceName: obj.infeedTableName || '',\r\n          deviceType: obj.infeedType || '',\r\n          breakerName: obj.breakerName,\r\n          sectionName: `${t('deviceDataDialog.section')} ${obj.sectionName}`,\r\n        }\r\n      }\r\n      else {\r\n        if (obj.breakerType === DeviceTypes.circuitBreaker) {\r\n          return {\r\n            deviceName: obj.breakerTableName || '',\r\n            deviceType: obj.breakerType,\r\n            breakerName: obj.breakerName,\r\n            sectionName: `${obj.switchboardName} ${t('deviceDataDialog.section')} ${obj.sectionName}`,\r\n          }\r\n        }\r\n        else if (obj.breakerType === DeviceTypes.infeedBreaker) {\r\n          return {\r\n            deviceName: obj.breakerTableName || '',\r\n            deviceType: obj.breakerType,\r\n            breakerName: obj.breakerName,\r\n            sectionName: `${t('deviceDataDialog.section')} ${obj.sectionName}`,\r\n          }\r\n        }\r\n        return {\r\n          deviceName: obj.breakerTableName || '',\r\n          deviceType: obj.breakerType,\r\n          breakerName: obj.breakerName,\r\n          sectionName: `${t('deviceDataDialog.section')} ${obj.sectionName}`,\r\n        }\r\n      }\r\n    }\r\n    return {\r\n      deviceName: '',\r\n      deviceType: '',\r\n      breakerName: '',\r\n      sectionName: '',\r\n    }\r\n  }\r\n\r\n  const renderTabsWithSwitchboards = (): Array<{ label: string, content: React.ReactNode }> => {\r\n    let tabs: Array<{ label: string, content: React.ReactNode }> = [];\r\n    elevation.switchboards.map(switchboard => {\r\n      const content = (\r\n        <div className={classes.svgContainer}>\r\n          <svg viewBox={`-80 -5 ${switchboard.panels.length * 620} 2350`} className={classes.svgElement}>\r\n            {renderSwitchboardName(switchboard.name, -80, 0)}\r\n            {switchboard.panels.map((panel, panelIndex) => {\r\n              let span: number = 0\r\n              return (\r\n                <PanelSVG key={panelIndex} x={panelIndex * panelWidth} y={0} name={panel.name} empty={panel.name === 'empty'}>\r\n                  {panel.compartments.map((compartment, compartmentIndex) => {\r\n                    span += panel.compartments[compartmentIndex - 1] ? panel.compartments[compartmentIndex - 1].rowSpan : 0;\r\n                    const columns = compartment.columns.length;\r\n                    return compartment.columns.map((column, columnIndex) => {\r\n                      //console.log(dialogData[column.assetID]?.breakerType)\r\n                      return (\r\n                        <CompartmentSVG\r\n                          key={`${compartmentIndex}-${columnIndex}`}\r\n                          x={(panelIndex * panelWidth) + columnIndex * panelWidth / columns}\r\n                          y={span * compartmentHeight} span={compartment.rowSpan}\r\n                          columns={columns}\r\n                          name={column.name}\r\n                          nonInteractive={column.nonInteractive}\r\n                          state={column.assetID ? checkBreakerState(column.assetID) : { closed: true, tripped: false, drawnOut: false }} //mock if not interactive so it doesnt highlight on visualization\r\n                          assetID={column.assetID ? column.assetID : ''}\r\n                          breakerName={column.assetID ? associateTypeWithDisplayData(dialogData[`${switchboard.name}-${column.assetID}`]).breakerName : ''}\r\n                          deviceName={column.assetID ? associateTypeWithDisplayData(dialogData[`${switchboard.name}-${column.assetID}`]).deviceName : ''}\r\n                          deviceType={column.assetID ? associateTypeWithDisplayData(dialogData[`${switchboard.name}-${column.assetID}`]).deviceType : ''}\r\n                          sectionName={column.assetID ? associateTypeWithDisplayData(dialogData[`${switchboard.name}-${column.assetID}`]).sectionName : ''}\r\n                          switchboardAssetID={switchboard.assetID ? switchboard.assetID : ''}\r\n                          connectionState={checkConnectionState(column.assetID, column.nonInteractive)}\r\n                        >\r\n                          {renderCompartmentContent(column.type,\r\n                            (panelIndex * panelWidth) + columnIndex * panelWidth / columns + (panelWidth / columns) / 2,\r\n                            span * compartmentHeight + (compartment.rowSpan * compartmentHeight + reservedTopSpace) / 2,\r\n                            columns)}\r\n                        </CompartmentSVG>\r\n                      )\r\n                    })\r\n                  })}\r\n                </PanelSVG>\r\n              )\r\n            })}\r\n          </svg>\r\n        </div>\r\n      )\r\n      return tabs.push({ label: switchboard.name, content: content })\r\n    })\r\n    return tabs\r\n  }\r\n\r\n  const renderSwitchboardName = (name: string, x: number, y: number) => {\r\n    return (\r\n      <text\r\n        x={x}\r\n        y={y}\r\n        className={classes.switchboardName}\r\n        transform={`rotate(-90 ${x} ${y})`}\r\n      >\r\n        {`${t('overviewPage.switchboard')} ${name}`}\r\n      </text>\r\n    )\r\n  }\r\n\r\n  const scaleService = (columnNumber: number) => {\r\n    if (columnNumber >= 7) {\r\n      return 0.3\r\n    }\r\n    else if (columnNumber >= 4) {\r\n      return 0.5\r\n    }\r\n    else if (columnNumber >= 2) {\r\n      return 0.8\r\n    }\r\n    else {\r\n      return 1\r\n    }\r\n  }\r\n\r\n  const checkBreakerState = (assetID: string) => {\r\n    return decodeState(systemTopologyData[assetID]?.Breaker_State)\r\n  }\r\n\r\n  const checkConnectionState = (assetID: string | false, nonInteractive: boolean) => {\r\n    if (assetID && systemTopologyData[assetID] && systemTopologyData[assetID].Connection_State && !nonInteractive) {\r\n      return systemTopologyData[assetID].Connection_State\r\n    }\r\n    else if (nonInteractive) {\r\n      return 1\r\n    }\r\n    return 0\r\n  }\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <Grid container spacing={1}>\r\n        <Grid item xs={12}>\r\n          <UniversalTabs\r\n            name='overview'\r\n            tabs={renderTabsWithSwitchboards()}\r\n          />\r\n        </Grid>\r\n      </Grid>\r\n    </React.Fragment>\r\n  )\r\n}","import html2canvas from 'html2canvas';\r\nimport { jsPDF } from \"jspdf\";\r\n\r\nexport const exportPDF = () => {\r\n  html2canvas(document.body, {\r\n    scrollX: 0,\r\n    scrollY: 0\r\n  }).then(function (canvas) {\r\n    var imgData = canvas.toDataURL(\r\n      'image/jpeg', 50);\r\n    var doc = new jsPDF({\r\n      orientation: canvas.width > canvas.height ? \"landscape\" : \"portrait\",\r\n      unit: \"px\",\r\n      format: [canvas.width, canvas.height]\r\n    });\r\n    doc.addImage(imgData, 'JPEG', 0, 0, canvas.width, canvas.height);\r\n    doc.save('sidiro-export.pdf');\r\n  });\r\n}","import Chart from 'chart.js/auto';\r\nimport React, { useRef, useState, useEffect, useMemo } from 'react';\r\nimport { useTheme } from '@material-ui/core/styles';\r\nimport { SiemensAccentYellow } from '../utilities/SiemensColors.utility';\r\nimport { useUpdateChartFontColor } from '../hooks/useUpdateChartFontColor.hook';\r\nimport { useUpdateChartDatasets } from '../hooks/useUpdateChartDatasets.hook';\r\n\r\nexport interface PieChartProps {\r\n  data: {\r\n    labels?: Array<string>,\r\n    datasets: Array<{ label: string, backgroundColor: Array<string>, borderColor?: Array<string>, borderWidth?: number, data: Array<number> }>\r\n  },\r\n  chartTitle?: string,\r\n  onDataClick(dataIndex: number): void\r\n}\r\n\r\nexport const PieChart: React.FC<PieChartProps> = ({ data, chartTitle, onDataClick }) => {\r\n  const chartContainer = useRef() as React.MutableRefObject<HTMLCanvasElement>;\r\n  const [chartInstance, setChartInstance] = useState<Chart | null>(null);\r\n  const theme = useTheme();\r\n  useUpdateChartFontColor(chartInstance, '#fff');\r\n  useUpdateChartDatasets(chartInstance, data)\r\n\r\n  const chartConfig = useMemo(() => {\r\n    const handleClickDataPortion = (dataSliceIndex: number) => {\r\n      onDataClick(dataSliceIndex)\r\n    }\r\n\r\n    return {\r\n      type: 'pie',\r\n      data,\r\n      options: {\r\n        plugins: {\r\n          legend: {\r\n            labels: {\r\n              // This more specific font property overrides the global property\r\n              font: {\r\n                size: 14\r\n              }\r\n            }\r\n          },\r\n        },\r\n        legend: {\r\n          labels: {\r\n            fontColor: theme.palette.text.primary,\r\n          }\r\n        },\r\n        'onClick': function (evt: any, item: any) {\r\n          if (item && item[0]) {\r\n            handleClickDataPortion(item[0].index)\r\n          }\r\n        },\r\n        title: {\r\n          display: chartTitle ? true : false,\r\n          text: chartTitle ? chartTitle : '',\r\n          fontColor: theme.palette.type === 'dark' ? SiemensAccentYellow.light6 : '#666',\r\n          fontFamily: 'Roboto, Helvetica, Arial, sans-serif',\r\n        },\r\n        aspectRatio: 1\r\n      }\r\n    }\r\n  }, [data, chartTitle, theme.palette.type, theme.palette.text.primary, onDataClick]);\r\n\r\n  useEffect(() => {\r\n    if (chartInstance === null) {\r\n      setChartInstance(new Chart(chartContainer.current, chartConfig))\r\n    }\r\n  }, [data, chartInstance, chartTitle, chartConfig])\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <canvas ref={chartContainer} />\r\n    </React.Fragment>\r\n  )\r\n}","export const fetchTimeseriesAggregates = async (assetID: string, aspectName: string, intervalUnit: string, intervalValue: number, dateFrom: string, dateTo: string) => {\r\n  const response = await fetch(`/api/iottsaggregates/v3/aggregates/${assetID}/${aspectName}?from=${dateFrom}&to=${dateTo}&intervalUnit=${intervalUnit}&intervalValue=${intervalValue}`)\r\n  const data = await response.json()\r\n  const dataWithCustomFields = intervalUnit === 'month' ? {\r\n    ...data[0],\r\n    assetID\r\n  }\r\n    : {\r\n      data,\r\n      assetID\r\n    }\r\n  return dataWithCustomFields\r\n}\r\n\r\n//from=2021-03-31T22:00:00.000Z&to=2021-04-30T22:00:00.000Z\r\n","export const SET_ASSETS_REPORTS_DATA = 'SET_ASSETS_REPORTS_DATA'\r\nexport const SET_REPORTS_DATE = 'SET_REPORTS_DATE'\r\n\r\nexport const setAssetsReportsData = (assetData: any) => ({ type: SET_ASSETS_REPORTS_DATA, assetData })\r\nexport const setReportsDate = (dateFrom: string, dateTo: string) => ({ type: SET_REPORTS_DATE, dateFrom, dateTo })","import { startOfMonth, startOfDay, add } from 'date-fns'\r\n\r\nexport const getUTCDate = (date: Date) => {\r\n  return {\r\n    startOfMonth: startOfMonth(date).toISOString(),\r\n    endOfMonth: startOfMonth(add((date), {\r\n      months: 1\r\n    })).toISOString(),\r\n    startOfDay: startOfDay(date).toISOString(),\r\n    endOfDay: startOfDay(add((date), {\r\n      days: 1\r\n    })).toISOString(),\r\n  }\r\n}","import React, { useState, useEffect, useCallback, useRef } from 'react';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport { DatePicker } from \"@material-ui/pickers\";\r\nimport { exportPDF } from '../../utilities/ExportPDF.utility';\r\nimport Button from '@material-ui/core/Button';\r\nimport { decideDataColor } from '../../utilities/SiemensColors.utility';\r\nimport { useTranslation } from 'react-i18next';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { RootState } from '../../reducers/Root.reducer';\r\nimport { IGroupStructure, IGroupElementStructure } from '../../reducers/Reports.reducer';\r\nimport { UniversalTable } from '../UniversalTable.component';\r\nimport { PieChart } from '../PieChart.component';\r\nimport Divider from '@material-ui/core/Divider';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport { fetchTimeseriesAggregates } from '../../services/FetchTimeseriesAggregatesAPI.service';\r\nimport { setBackdropOpen } from '../../actions/Backdrop.action';\r\nimport { setReportsDate } from '../../actions/Reports/CommonReports.action';\r\nimport { getUTCDate } from '../../utilities/GetUTCDate.utility';\r\nimport { useStyles } from '../Reports.component';\r\n\r\nexport const EnergyConsumptionTab = () => {\r\n  const [assetsData, setAssetsData] = useState<{ [key: string]: any }>()\r\n  const reports = useSelector((state: RootState) => state.reports);\r\n  const [level1, setLevel1] = useState<{\r\n    title: string | null,\r\n    labels: Array<string> | null\r\n    values: Array<number> | null\r\n  }>()\r\n  const [level2, setLevel2] = useState<{\r\n    title: string | null,\r\n    labels: Array<string> | null\r\n    values: Array<number> | null,\r\n    groupIndex?: number\r\n  }>()\r\n  const [level3, setLevel3] = useState<{\r\n    title: string | null,\r\n    labels: Array<string> | null\r\n    values: Array<number> | null\r\n  }>()\r\n  const [referenceToCurrentChartForScrolling, setReferenceToCurrentChartForScrolling] = useState<any>()\r\n  const [level2DataSource, setLevel2DataSource] = useState<any>()\r\n  const assetsNames = useSelector((state: RootState) => state.commonReports.assets);\r\n  const dateFrom = useSelector((state: RootState) => state.commonReports.dateFrom);\r\n  const dateTo = useSelector((state: RootState) => state.commonReports.dateTo);\r\n  const classes = useStyles()\r\n  const { t, i18n } = useTranslation();\r\n  const dispatch = useDispatch();\r\n  const level2DataSourceRef: any = useRef();\r\n  const groupIndexRef: any = useRef();\r\n  const assetsDataRef: any = useRef();\r\n  const assetsNamesRef: any = useRef();\r\n  level2DataSourceRef.current = level2DataSource;\r\n  groupIndexRef.current = level2;\r\n  assetsDataRef.current = assetsData;\r\n  assetsNamesRef.current = assetsNames;\r\n\r\n  useEffect(() => {\r\n    if (assetsNames && Object.keys(assetsNames).length > 0) {\r\n      const promises = Object.keys(assetsNames).map(asset => fetchTimeseriesAggregates(asset, 'DATA_1_MIN', 'month', 1, dateFrom, dateTo))\r\n      setLevel2(undefined)\r\n      setLevel3(undefined)\r\n      dispatch(setBackdropOpen(true))\r\n      Promise.all(promises).then(res => {\r\n        let params = {}\r\n        res.forEach(asset => {\r\n          params = {\r\n            ...params,\r\n            [asset.assetID]: asset\r\n          }\r\n        })\r\n        setAssetsData(params)\r\n        dispatch(setBackdropOpen(false))\r\n      }).catch(err => dispatch(setBackdropOpen(false)))\r\n    }\r\n  }, [assetsNames, setAssetsData, dispatch, dateFrom, dateTo])\r\n\r\n  useEffect(() => {\r\n    //cleanup\r\n    return () => {\r\n      setLevel1(undefined)\r\n      setLevel2(undefined)\r\n      setLevel3(undefined)\r\n    }\r\n  }, [])\r\n\r\n  const handleDateChange = (date: Date) => {\r\n    dispatch(setReportsDate(getUTCDate(date).startOfMonth, getUTCDate(date).endOfMonth))\r\n    setLevel2(undefined)\r\n    setLevel3(undefined)\r\n  }\r\n\r\n  const chooseByLanguage = useCallback((sentenceEN: string, sentencePL: string) => {\r\n    return i18n.language === 'pl' ? sentencePL : sentenceEN\r\n  }, [i18n.language])\r\n\r\n  const calculateActiveEnergyImportSingleAsset = useCallback((asset: IGroupElementStructure) => {\r\n    if (assetsDataRef.current && assetsDataRef.current[asset.assetID] && assetsDataRef.current[asset.assetID].Active_Energy_Import) {\r\n      return (assetsDataRef.current[asset.assetID].Active_Energy_Import.lastvalue - assetsDataRef.current[asset.assetID].Active_Energy_Import.firstvalue) / 1000\r\n    }\r\n    return 0\r\n  }, [])\r\n\r\n  const calculateAggregatedActiveEnergyImport = useCallback((assetIDs: Array<string>) => {\r\n    if (assetsDataRef.current) {\r\n      const filtered = assetIDs.filter(assetID => assetsDataRef.current[assetID] && assetsDataRef.current[assetID].Active_Energy_Import)\r\n      const calculatedEnergy = filtered.map(assetID => assetsDataRef.current[assetID].Active_Energy_Import.lastvalue - assetsDataRef.current[assetID].Active_Energy_Import.firstvalue)\r\n      return calculatedEnergy.length !== 0 ? calculatedEnergy.reduce((a, b) => a + b) / 1000 : 0\r\n    }\r\n    else {\r\n      return 0\r\n    }\r\n  }, [])\r\n\r\n  const getGroupOfGroupsAssetIDs = useCallback((groupObject: IGroupStructure | Array<IGroupStructure>, arr?: Array<string>) => {\r\n    const array: Array<any> = arr || []\r\n    if (Array.isArray(groupObject)) {\r\n      //main group\r\n      groupObject.forEach(group => getGroupOfGroupsAssetIDs(group, array))\r\n    }\r\n    else {\r\n      //single group\r\n      if (groupObject.subgroups) {\r\n        groupObject.subgroups.forEach(subgroup => getGroupOfGroupsAssetIDs(subgroup, array))\r\n      }\r\n      else {\r\n        if (groupObject.assets) {\r\n          groupObject.assets.forEach(asset => array.push(asset.assetID))\r\n        }\r\n      }\r\n    }\r\n    return array\r\n  }, [])\r\n\r\n  const createSubgroupsChart = useCallback((group: IGroupStructure | undefined, groupIndex: number, level: number) => {\r\n    if (group?.subgroups) {\r\n      const title = chooseByLanguage(group.enName, group.plName)\r\n      const values = group.subgroups.map(subgroup => calculateAggregatedActiveEnergyImport(getGroupOfGroupsAssetIDs(subgroup)))\r\n      const labels = group.subgroups.map(subgroup => chooseByLanguage(subgroup.enName, subgroup.plName))\r\n      switch (level) {\r\n        case 2:\r\n          setLevel2({ title, labels, values, groupIndex })\r\n          setLevel3(undefined)\r\n          break;\r\n        case 3:\r\n          setLevel3({ title, labels, values })\r\n          break;\r\n        default:\r\n          return null;\r\n      }\r\n    }\r\n  }, [calculateAggregatedActiveEnergyImport, chooseByLanguage, getGroupOfGroupsAssetIDs])\r\n\r\n  const createEndAssetsChart = useCallback((group: IGroupStructure | undefined, groupIndex: number, level: number) => {\r\n    if (group?.assets) {\r\n      const title = chooseByLanguage(group.enName, group.plName)\r\n      const values = group.assets?.map(asset => calculateActiveEnergyImportSingleAsset(asset))\r\n\r\n      const labels = group.assets?.map(asset => asset.feederName)\r\n      switch (level) {\r\n        case 2:\r\n          setLevel2({ title, labels, values, groupIndex: undefined })\r\n          setLevel3(undefined)\r\n          break;\r\n        case 3:\r\n          setLevel3({ title, labels, values })\r\n          break;\r\n        default:\r\n          return null;\r\n      }\r\n    }\r\n  }, [calculateActiveEnergyImportSingleAsset, chooseByLanguage])\r\n\r\n  const createNextLevelChart = useCallback((dataIndex: number, originLevel: number) => {\r\n    if (originLevel === 1) {\r\n      setLevel2DataSource(reports.groups[dataIndex])\r\n      if (reports.groups[dataIndex].assets) {\r\n        createEndAssetsChart(reports.groups[dataIndex], dataIndex, originLevel + 1)\r\n      }\r\n      else if (reports.groups[dataIndex].subgroups) {\r\n        createSubgroupsChart(reports.groups[dataIndex], dataIndex, originLevel + 1)\r\n      }\r\n    }\r\n    else {\r\n      if (groupIndexRef.current.groupIndex !== undefined) {\r\n        if (level2DataSourceRef.current?.assets) {\r\n          createEndAssetsChart(level2DataSourceRef.current, dataIndex, originLevel + 1)\r\n        }\r\n        else {\r\n          createEndAssetsChart(level2DataSourceRef.current.subgroups[dataIndex], dataIndex, originLevel + 1)\r\n        }\r\n      }\r\n    }\r\n  }, [createEndAssetsChart, createSubgroupsChart, reports.groups])\r\n\r\n  useEffect(() => {\r\n    if (assetsDataRef.current && assetsNamesRef.current) {\r\n      //instantiate first chart \r\n      const values = reports.groups.map(group => calculateAggregatedActiveEnergyImport(getGroupOfGroupsAssetIDs(group)))\r\n      const labels = reports.groups.map(group => chooseByLanguage(group.enName, group.plName))\r\n      setLevel1({\r\n        title: t('reportsPage.totalActiveEnergyImport'),\r\n        labels: labels,\r\n        values: values,\r\n      })\r\n    }\r\n  }, [assetsData, calculateAggregatedActiveEnergyImport, getGroupOfGroupsAssetIDs, reports.groups, t, chooseByLanguage])\r\n\r\n  useEffect(()=> {\r\n    if(referenceToCurrentChartForScrolling) {\r\n      referenceToCurrentChartForScrolling.scrollIntoView({ behavior: 'smooth' })\r\n    }\r\n  },[referenceToCurrentChartForScrolling])\r\n\r\n  const createChart = (title: string, labels: Array<string>, values: Array<number>, originLevel: number) => {\r\n    const tableLabels = labels.concat(t('reportsPage.totalValue'))\r\n    const tableValues = values.concat(values.reduce((a, b) => parseFloat((a + b).toFixed(3))))\r\n    return (\r\n      <React.Fragment key={title}>\r\n        <Grid item xs={12} className={classes.sectionMargin} ref={setReferenceToCurrentChartForScrolling}>\r\n          <Typography gutterBottom variant=\"h5\">{title}</Typography>\r\n        </Grid>\r\n        <Grid item xs={12} md={5}>\r\n          <PieChart\r\n            onDataClick={(dataIndex) => createNextLevelChart(dataIndex, originLevel)}\r\n            chartTitle=\"\"\r\n            data={{\r\n              labels: labels,\r\n              datasets: [\r\n                {\r\n                  label: \"\",\r\n                  backgroundColor: tableLabels.map((label, index) => decideDataColor(index)),\r\n                  data: values\r\n                }\r\n              ]\r\n            }}\r\n          />\r\n        </Grid>\r\n        <Grid item xs={12} md={7}>\r\n          <UniversalTable\r\n            columns={[t('reportsPage.groupName'), t('reportsPage.activeEnergyUsage')]}\r\n            rows={tableLabels.map((label: string, index: number) => [label, `${tableValues[index]} kWh`])}\r\n          />\r\n        </Grid>\r\n        <Grid item xs={12}>\r\n          <Divider />\r\n        </Grid>\r\n      </React.Fragment>\r\n    )\r\n  }\r\n\r\n  return (\r\n    <Grid container spacing={2}>\r\n      <Grid item xs={12} md={9} lg={9}>\r\n        <DatePicker\r\n          cancelLabel={t('datePicker.cancelButton')}\r\n          autoOk\r\n          label={t('reportsPage.chooseMonth')}\r\n          value={dateFrom}\r\n          onChange={(date) => date ? handleDateChange(date) : null}\r\n          fullWidth\r\n          views={['month']}\r\n          format=\"MM/yyyy\"\r\n        />\r\n      </Grid>\r\n      <Grid item xs={12} md={3} lg={3}>\r\n        <Button\r\n          fullWidth\r\n          variant=\"contained\"\r\n          color=\"primary\"\r\n          onClick={() => exportPDF()}\r\n        >\r\n          {t('reportsPage.exportToPDF')}\r\n        </Button>\r\n      </Grid>\r\n      {level1 && level1.title && level1.labels && level1.values ?\r\n        createChart(level1.title, level1.labels, level1.values, 1)\r\n        : null}\r\n      {level2 && level2.title && level2.labels && level2.values ?\r\n\r\n        createChart(level2.title, level2.labels, level2.values, 2)\r\n        : null}\r\n      {level3 && level3.title && level3.labels && level3.values ?\r\n        createChart(level3.title, level3.labels, level3.values, 3)\r\n        : null}\r\n    </Grid>\r\n  )\r\n}","import Chart from 'chart.js/auto';\r\nimport React, { useRef, useState, useEffect, useMemo } from 'react';\r\nimport { useTheme } from '@material-ui/core/styles';\r\nimport { useUpdateChartFontColor } from '../hooks/useUpdateChartFontColor.hook';\r\nimport { useUpdateStackedChartDatasets } from '../hooks/useUpdateStackedChartDatasets.hook';\r\n\r\ninterface BarChartProps {\r\n  data: {\r\n    labels?: Array<string>,\r\n    datasets: Array<{ label: string, backgroundColor: string, borderColor?: Array<string>, borderWidth?: number, data: Array<number> }>\r\n  },\r\n  chartTitle?: string,\r\n  yAxisUnit?: string,\r\n  yAxisTitle?: string,\r\n  xAxisTitle?: string\r\n  onDataClick?(dataIndex: number): void\r\n}\r\n\r\nexport const StackedBarChart: React.FC<BarChartProps> = ({ data, chartTitle, yAxisUnit, yAxisTitle, xAxisTitle, onDataClick }) => {\r\n  const chartContainer = useRef() as React.MutableRefObject<HTMLCanvasElement>;\r\n  const [chartInstance, setChartInstance] = useState<Chart | null>(null);\r\n  const theme = useTheme();\r\n  useUpdateChartFontColor(chartInstance, '#fff');\r\n  useUpdateStackedChartDatasets(chartInstance, data, yAxisTitle)\r\n\r\n  const chartConfig = useMemo(() => {\r\n    const handleClickDataPortion = (dataSliceIndex: number) => {\r\n      if(onDataClick) {\r\n        onDataClick(dataSliceIndex)\r\n      }\r\n    }\r\n\r\n    return {\r\n      type: 'bar',\r\n      data,\r\n      options: {\r\n        aspectRatio: 2.5,\r\n        interaction: {\r\n          intersect: false,\r\n          mode: 'point',\r\n        },\r\n        plugins: {\r\n          legend: {\r\n            labels: {\r\n              font: {\r\n                size: 14\r\n              }\r\n            }\r\n          },\r\n          tooltip: {\r\n            callbacks: {\r\n              label: function (context: any) {\r\n                let label = context.dataset.label || '';\r\n                if (label) {\r\n                  label += ': ';\r\n                }\r\n                if (context.parsed.y !== null) {\r\n                  label += context.parsed.y\r\n                }\r\n                if (label && yAxisUnit) {\r\n                  label += ` ${yAxisUnit}`;\r\n                }\r\n                return label;\r\n              }\r\n            }\r\n          },\r\n          title: {\r\n            display: chartTitle ? true : false,\r\n            text: chartTitle ? chartTitle : ''\r\n          },\r\n\r\n        },\r\n        'onClick': function (evt: any, item: any) {\r\n          if (item && item[0]) {\r\n            handleClickDataPortion(item[0].datasetIndex)\r\n          }\r\n        },\r\n        legend: {\r\n          labels: {\r\n            fontColor: theme.palette.text.primary,\r\n          }\r\n        },\r\n        responsive: true,\r\n        scales: {\r\n          x: {\r\n            stacked: true,\r\n            title: {\r\n              display: true,\r\n              text: xAxisTitle ? xAxisTitle : '',\r\n              font: {\r\n                size: 18,\r\n                weight: 400\r\n              },\r\n            },\r\n          },\r\n          y: {\r\n            stacked: true,\r\n            title: {\r\n              text: yAxisTitle ? yAxisTitle : '',\r\n              display: yAxisTitle ? true : false,\r\n              color: theme.palette.text.primary,\r\n              font: {\r\n                size: 18,\r\n                weight: 400\r\n              },\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }, [data, chartTitle, theme.palette.text.primary, yAxisTitle, onDataClick, yAxisUnit, xAxisTitle]);\r\n\r\n  useEffect(() => {\r\n    if (chartInstance === null) {\r\n      setChartInstance(new Chart(chartContainer.current, chartConfig))\r\n    }\r\n  }, [data, chartInstance, chartTitle, chartConfig])\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <canvas ref={chartContainer} />\r\n    </React.Fragment>\r\n  )\r\n}","import { useEffect } from 'react';\r\nimport Chart from 'chart.js/auto';\r\n\r\nexport const useUpdateStackedChartDatasets = (chartInstance: Chart | null,\r\n  data: {\r\n    labels?: Array<string>,\r\n    datasets: Array<{\r\n      label: string,\r\n      data: Array<number>,\r\n      backgroundColor: string\r\n    }>\r\n  },\r\n  yAxisTitle?: string) => {\r\n  const removeExcessiveDatasets = (array: Array<any>, numberOfPops: number) => {\r\n    while (numberOfPops > 0) {\r\n      array.pop()\r\n      numberOfPops--\r\n    }\r\n  }\r\n\r\n  useEffect(() => {\r\n    //update in case of datasets change\r\n    if (chartInstance && chartInstance.data && chartInstance.data.datasets && chartInstance.data.labels) {\r\n      if (yAxisTitle && chartInstance.options.scales.y.title.text) {\r\n        chartInstance.options.scales.y.title.text = yAxisTitle\r\n      }\r\n      chartInstance.data.labels = data.labels\r\n      //replace datasets data one by one\r\n      //chartInstance.data.datasets = data.datasets\r\n\r\n      data.datasets.forEach((dataset, i) => {\r\n        if (chartInstance.data.datasets[i]) {\r\n          chartInstance.data.datasets[i].data = dataset.data\r\n          chartInstance.data.datasets[i].label = dataset.label\r\n          chartInstance.data.datasets[i].backgroundColor = dataset.backgroundColor\r\n        }\r\n        else {\r\n          chartInstance.data.datasets.push({\r\n            data: dataset.data,\r\n            label: dataset.label,\r\n            backgroundColor: dataset.backgroundColor\r\n          })\r\n        }\r\n      })\r\n      if (chartInstance.data.datasets.length > data.datasets.length) {\r\n        removeExcessiveDatasets(chartInstance.data.datasets, chartInstance.data.datasets.length - data.datasets.length)\r\n      }\r\n      //chartInstance.data.datasets.length = data.datasets.length\r\n      if (data.labels) {\r\n        data.labels.forEach((label, i) => {\r\n          chartInstance.data.labels[i] = label\r\n        })\r\n      }\r\n      //chartInstance.data.labels = data.labels;\r\n      chartInstance.update()\r\n    }\r\n  }, [chartInstance, data, yAxisTitle])\r\n}","import React, { useState, useEffect, useRef, useCallback } from 'react';\r\nimport { useTranslation } from 'react-i18next';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport { DatePicker } from \"@material-ui/pickers\";\r\nimport { StackedBarChart } from '../StackedBarChart.component';\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport Select from '@material-ui/core/Select';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport Button from '@material-ui/core/Button';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport { fetchTimeseriesAggregates } from '../../services/FetchTimeseriesAggregatesAPI.service';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { RootState } from '../../reducers/Root.reducer';\r\nimport { IGroupStructure, IGroupElementStructure } from '../../reducers/Reports.reducer';\r\nimport { decideDataColor } from '../../utilities/SiemensColors.utility';\r\nimport { getUTCDate } from '../../utilities/GetUTCDate.utility';\r\nimport { setBackdropOpen } from '../../actions/Backdrop.action';\r\nimport { setReportsDate } from '../../actions/Reports/CommonReports.action';\r\nimport { parseISO, format } from 'date-fns';\r\nimport { useStyles } from '../Reports.component';\r\nimport Divider from '@material-ui/core/Divider';\r\nimport { exportPDF } from '../../utilities/ExportPDF.utility';\r\n\r\nexport const EnergyUsageProfile = () => {\r\n  const { t, i18n } = useTranslation();\r\n  const dispatch = useDispatch();\r\n  const classes = useStyles();\r\n  const dateFrom = useSelector((state: RootState) => state.commonReports.dateFrom);\r\n  const dateTo = useSelector((state: RootState) => state.commonReports.dateTo);\r\n  const [level1, setLevel1] = useState<{\r\n    xAxisLabels: Array<string> | null, //[...days of month]\r\n    datasets: Array<{ label: string, data: Array<number>, backgroundColor: string }>\r\n  }>()\r\n  const [level2, setLevel2] = useState<{\r\n    title: string | null,\r\n    xAxisLabels: Array<string> | null, //[...days of month]\r\n    datasets: Array<{ label: string, data: Array<number>, backgroundColor: string }> | null,\r\n    groupIndex?: number\r\n  }>()\r\n  const [level3, setLevel3] = useState<{\r\n    title: string | null,\r\n    xAxisLabels: Array<string> | null, //[...days of month]\r\n    datasets: Array<{ label: string, data: Array<number>, backgroundColor: string }> | null\r\n  }>()\r\n  const [referenceToCurrentChartForScrolling, setReferenceToCurrentChartForScrolling] = useState<any>()\r\n  const [assetsData, setAssetsData] = useState<{ [key: string]: any }>()\r\n  const [energyType, setEnergyType] = useState('activeEnergyImport');\r\n  const [level2DataSource, setLevel2DataSource] = useState<any>()\r\n  const assetsNames = useSelector((state: RootState) => state.commonReports.assets);\r\n  const reports = useSelector((state: RootState) => state.reports);\r\n  const assetsDataRef: any = useRef();\r\n  const assetsNamesRef: any = useRef();\r\n  const level2DataSourceRef: any = useRef();\r\n  const groupIndexRef: any = useRef();\r\n  assetsDataRef.current = assetsData;\r\n  assetsNamesRef.current = assetsNames;\r\n  level2DataSourceRef.current = level2DataSource;\r\n  groupIndexRef.current = level2;\r\n\r\n  const handleEnergyType = (event: React.ChangeEvent<{ value: unknown }>) => {\r\n    setEnergyType(event.target.value as string);\r\n    setLevel2(undefined)\r\n    setLevel3(undefined)\r\n  };\r\n\r\n  const handleDateChange = (date: Date) => {\r\n    dispatch(setReportsDate(getUTCDate(date).startOfMonth, getUTCDate(date).endOfMonth))\r\n    setLevel2(undefined)\r\n    setLevel3(undefined)\r\n  }\r\n\r\n  const calculateAggregatedValue = useCallback((valueType: string, assetIDs: Array<string>) => {\r\n    if (assetsDataRef.current) {\r\n      const calculatedEnergy: Array<Array<any>> = assetIDs.map(assetID => {\r\n        const values: Array<any> = Object.values(assetsDataRef.current[assetID])\r\n        return values.map((dailyValues: any) => {\r\n          if (dailyValues.Active_Energy_Import !== undefined) {\r\n            switch (valueType) {\r\n              case 'activeEnergyImport': {\r\n                return dailyValues.Active_Energy_Import.lastvalue - dailyValues.Active_Energy_Import.firstvalue\r\n              }\r\n              case 'reactiveEnergyImport': {\r\n                return dailyValues.Reactive_Energy_Import.lastvalue - dailyValues.Reactive_Energy_Import.firstvalue\r\n              }\r\n              case 'reactiveEnergyExport': {\r\n                return dailyValues.Reactive_Energy_Export.lastvalue - dailyValues.Reactive_Energy_Export.firstvalue\r\n              }\r\n            }\r\n          }\r\n          else {\r\n            return 0\r\n          }\r\n          return 0\r\n        })\r\n      })\r\n      // sum containing assets values to single value (day)\r\n      const assetsDailySummation: Array<number> = calculatedEnergy.length > 0 ? calculatedEnergy.reduce((a, b) => {\r\n        return a.map((v, i) => {\r\n          return v + b[i];\r\n        });\r\n      }) : []\r\n      return assetsDailySummation.map(el => parseFloat((el / 1000).toFixed(3)))\r\n    }\r\n    else {\r\n      return []\r\n    }\r\n  }, [])\r\n\r\n  const chooseByLanguage = useCallback((sentenceEN: string, sentencePL: string) => {\r\n    return i18n.language === 'pl' ? sentencePL : sentenceEN\r\n  }, [i18n.language])\r\n\r\n  const getGroupOfGroupsAssetIDs = useCallback((groupObject: IGroupStructure | Array<IGroupStructure>, arr?: Array<string>) => {\r\n    const array: Array<any> = arr || []\r\n    if (Array.isArray(groupObject)) {\r\n      //main group\r\n      groupObject.forEach(group => getGroupOfGroupsAssetIDs(group, array))\r\n    }\r\n    else {\r\n      //single group\r\n      if (groupObject.subgroups) {\r\n        groupObject.subgroups.forEach(subgroup => getGroupOfGroupsAssetIDs(subgroup, array))\r\n      }\r\n      else {\r\n        if (groupObject.assets) {\r\n          groupObject.assets.forEach(asset => array.push(asset.assetID))\r\n        }\r\n      }\r\n    }\r\n    return array\r\n  }, [])\r\n\r\n  useEffect(() => {\r\n    if (assetsNames && Object.keys(assetsNames).length > 0) {\r\n      const promises = Object.keys(assetsNames).map(asset => fetchTimeseriesAggregates(asset, 'DATA_1_MIN', 'day', 1, dateFrom, dateTo))\r\n      dispatch(setBackdropOpen(true))\r\n      Promise.all(promises).then(res => {\r\n        let params = {}\r\n        res.forEach(asset => {\r\n          params = {\r\n            ...params,\r\n            [asset.assetID]: asset.data\r\n          }\r\n        })\r\n        setAssetsData(params)\r\n        dispatch(setBackdropOpen(false))\r\n      }).catch(err => dispatch(setBackdropOpen(false)))\r\n    }\r\n  }, [assetsNames, setAssetsData, dispatch, dateFrom, dateTo])\r\n\r\n  const setChartComponentsBasedOnSelectedEnergyType = () => {\r\n    switch (energyType) {\r\n      case 'activeEnergyImport': {\r\n        return {\r\n          title: t('reportsPage.totalActiveEnergyImport'),\r\n          yAxisUnit: 'kWh'\r\n        }\r\n      }\r\n      case 'reactiveEnergyImport': {\r\n        return {\r\n          title: t('reportsPage.totalReactiveEnergyImport'),\r\n          yAxisUnit: 'kvar'\r\n        }\r\n      }\r\n      case 'reactiveEnergyExport': {\r\n        return {\r\n          title: t('reportsPage.totalReactiveEnergyExport'),\r\n          yAxisUnit: 'kvar'\r\n        }\r\n      }\r\n      default: {\r\n        return {\r\n          title: '',\r\n          yAxisUnit: ''\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  const calculateActiveEnergyImportSingleAsset = useCallback((valueType: string, asset: IGroupElementStructure) => {\r\n    if (assetsDataRef.current && assetsDataRef.current[asset.assetID]) {\r\n      const values: Array<any> = Object.values(assetsDataRef.current[asset.assetID])\r\n      return values.map((dailyValues: any) => {\r\n        if (dailyValues.Active_Energy_Import !== undefined) {\r\n          switch (valueType) {\r\n            case 'activeEnergyImport': {\r\n              return (dailyValues.Active_Energy_Import.lastvalue - dailyValues.Active_Energy_Import.firstvalue) / 1000\r\n            }\r\n            case 'reactiveEnergyImport': {\r\n              return (dailyValues.Reactive_Energy_Import.lastvalue - dailyValues.Reactive_Energy_Import.firstvalue) / 1000\r\n            }\r\n            case 'reactiveEnergyExport': {\r\n              return (dailyValues.Reactive_Energy_Export.lastvalue - dailyValues.Reactive_Energy_Export.firstvalue) / 1000\r\n            }\r\n          }\r\n        }\r\n        else {\r\n          return 0\r\n        }\r\n        return 0\r\n      })\r\n    }\r\n    return []\r\n  }, [])\r\n\r\n  useEffect(() => {\r\n    if (assetsDataRef.current && assetsNamesRef.current) {\r\n      //instantiate first chart \r\n      const values = reports.groups.map(group => calculateAggregatedValue(energyType, getGroupOfGroupsAssetIDs(group)))\r\n      const xLabels = Object.values(assetsDataRef.current).map((assetDailyData: any) => {\r\n        return Object.values(assetDailyData).map((asset: any) => asset.starttime)\r\n      })[0].filter(element => element !== undefined).map(date => `${format(parseISO(date), 'dd/MM/yyyy')}`)\r\n      const datasets = reports.groups.map(group => chooseByLanguage(group.enName, group.plName)).map((group: string, index: number) => {\r\n        return {\r\n          label: group,\r\n          data: values[index],\r\n          backgroundColor: decideDataColor(index)\r\n        }\r\n      })\r\n      setLevel1({\r\n        xAxisLabels: xLabels,\r\n        datasets: datasets\r\n      })\r\n    }\r\n  }, [assetsData, chooseByLanguage, getGroupOfGroupsAssetIDs, reports.groups, energyType, calculateAggregatedValue])\r\n\r\n  useEffect(()=> {\r\n    if(referenceToCurrentChartForScrolling) {\r\n      referenceToCurrentChartForScrolling.scrollIntoView({ behavior: 'smooth' })\r\n    }\r\n  },[referenceToCurrentChartForScrolling])\r\n\r\n  const createSubgroupsChart = useCallback((group: IGroupStructure | undefined, groupIndex: number, level: number) => {\r\n    if (group?.subgroups) {\r\n      const title = chooseByLanguage(group.enName, group.plName)\r\n      const values = group.subgroups.map(subgroup => calculateAggregatedValue(energyType, getGroupOfGroupsAssetIDs(subgroup)))\r\n      const xLabels = Object.values(assetsDataRef.current).map((assetDailyData: any) => {\r\n        return Object.values(assetDailyData).map((asset: any) => asset.starttime)\r\n      })[0].filter(element => element !== undefined).map(date => `${format(parseISO(date), 'dd/MM/yyyy')}`)\r\n      const datasets = group.subgroups.map(subgroup => chooseByLanguage(subgroup.enName, subgroup.plName)).map((group: string, index: number) => {\r\n        return {\r\n          label: group,\r\n          data: values[index],\r\n          backgroundColor: decideDataColor(index)\r\n        }\r\n      }) // main groups\r\n      switch (level) {\r\n        case 2:\r\n          setLevel2({ title: title, xAxisLabels: xLabels, datasets: datasets, groupIndex: groupIndex })\r\n          setLevel3(undefined)\r\n          break;\r\n        case 3:\r\n          setLevel3({ title: title, xAxisLabels: xLabels, datasets: datasets })\r\n          break;\r\n        default:\r\n          return null;\r\n      }\r\n    }\r\n  }, [calculateAggregatedValue, chooseByLanguage, getGroupOfGroupsAssetIDs, energyType])\r\n\r\n  const createEndAssetsChart = useCallback((group: IGroupStructure | undefined, level: number) => {\r\n    if (group?.assets) {\r\n      const title = chooseByLanguage(group.enName, group.plName)\r\n      const values = group.assets.map(asset => calculateActiveEnergyImportSingleAsset(energyType, asset))\r\n      const xLabels = Object.values(assetsDataRef.current).map((assetDailyData: any) => {\r\n        return Object.values(assetDailyData).map((asset: any) => asset.starttime)\r\n      })[0].filter(element => element !== undefined).map(date => `${format(parseISO(date), 'dd/MM/yyyy')}`)\r\n      const datasets = group.assets.map((asset, index) => {\r\n        return {\r\n          label: asset.feederDescription,\r\n          data: values[index],\r\n          backgroundColor: decideDataColor(index)\r\n        }\r\n      })\r\n      switch (level) {\r\n        case 2:\r\n          setLevel2({ title: title, xAxisLabels: xLabels, datasets: datasets, groupIndex: undefined })\r\n          setLevel3(undefined)\r\n          break;\r\n        case 3:\r\n          setLevel3({ title: title, xAxisLabels: xLabels, datasets: datasets })\r\n          break;\r\n        default:\r\n          return null;\r\n      }\r\n    }\r\n  }, [calculateActiveEnergyImportSingleAsset, chooseByLanguage, energyType])\r\n\r\n  const createNextLevelChart = useCallback((dataIndex: number, originLevel: number) => {\r\n    if (originLevel === 1) {\r\n      setLevel2DataSource(reports.groups[dataIndex])\r\n      if (reports.groups[dataIndex].assets) {\r\n        createEndAssetsChart(reports.groups[dataIndex], originLevel + 1)\r\n      }\r\n      else if (reports.groups[dataIndex].subgroups) {\r\n        createSubgroupsChart(reports.groups[dataIndex], dataIndex, originLevel + 1)\r\n      }\r\n    }\r\n    else {\r\n      if (groupIndexRef.current.groupIndex !== undefined) {\r\n        if (level2DataSourceRef.current?.assets) {\r\n          createEndAssetsChart(level2DataSourceRef.current, originLevel + 1)\r\n        }\r\n        else {\r\n          createEndAssetsChart(level2DataSourceRef.current.subgroups[dataIndex], originLevel + 1)\r\n        }\r\n      }\r\n    }\r\n  }, [createEndAssetsChart, createSubgroupsChart, reports.groups])\r\n\r\n  const createChart = (title: string, xAxisLabels: Array<string>, datasets: Array<{ label: string, data: Array<number>, backgroundColor: string }>, originLevel: number) => {\r\n    return (\r\n      <React.Fragment key={title}>\r\n        <Grid item xs={12} className={classes.sectionMargin} ref={setReferenceToCurrentChartForScrolling}>\r\n          <Typography gutterBottom variant=\"h5\">{title}</Typography>\r\n        </Grid>\r\n        <Grid item xs={12}>\r\n          <StackedBarChart\r\n            onDataClick={(dataIndex) => createNextLevelChart(dataIndex, originLevel)}\r\n            yAxisTitle={setChartComponentsBasedOnSelectedEnergyType().title}\r\n            yAxisUnit={setChartComponentsBasedOnSelectedEnergyType().yAxisUnit}\r\n            chartTitle=\"\"\r\n            data={{\r\n              labels: xAxisLabels,\r\n              datasets: datasets\r\n            }}\r\n          />\r\n        </Grid>\r\n        <Grid item xs={12}>\r\n          <Divider />\r\n        </Grid>\r\n      </React.Fragment>\r\n    )\r\n  }\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <Grid container spacing={2}>\r\n        <Grid item xs={12} md={5} lg={5}>\r\n          <DatePicker\r\n            cancelLabel={t('datePicker.cancelButton')}\r\n            autoOk\r\n            label={t('reportsPage.chooseMonth')}\r\n            value={dateFrom}\r\n            onChange={(date) => date ? handleDateChange(date) : null}\r\n            fullWidth\r\n            views={['month']}\r\n            format=\"MM/yyyy\"\r\n          />\r\n        </Grid>\r\n        <Grid item xs={12} md={4} lg={4}>\r\n          <FormControl className={classes.select}>\r\n            <InputLabel id=\"energy-select-label\">{t('reportsPage.energyChoice')}</InputLabel>\r\n            <Select\r\n              fullWidth\r\n              labelId=\"energy-select-label\"\r\n              id=\"energy-select\"\r\n              value={energyType}\r\n              onChange={handleEnergyType}\r\n            >\r\n              <MenuItem value={'activeEnergyImport'}>{t('reportsPage.activeEnergyImport')}</MenuItem>\r\n              <MenuItem value={'reactiveEnergyImport'}>{t('reportsPage.reactiveEnergyImport')}</MenuItem>\r\n              <MenuItem value={'reactiveEnergyExport'}>{t('reportsPage.reactiveEnergyExport')}</MenuItem>\r\n            </Select>\r\n          </FormControl>\r\n        </Grid>\r\n        <Grid item xs={12} md={3} lg={3}>\r\n          <Button\r\n            fullWidth\r\n            variant=\"contained\"\r\n            color=\"primary\"\r\n            onClick={() => exportPDF()}\r\n          >\r\n            {t('reportsPage.exportToPDF')}\r\n          </Button>\r\n        </Grid>\r\n        {level1 && level1.xAxisLabels && level1.datasets ?\r\n          createChart(setChartComponentsBasedOnSelectedEnergyType().title, level1.xAxisLabels, level1.datasets, 1)\r\n          : null}\r\n        {level2 && level2.title && level2.xAxisLabels && level2.datasets ?\r\n          createChart(level2.title, level2.xAxisLabels, level2.datasets, 2)\r\n          : null}\r\n        {level3 && level3.title && level3.xAxisLabels && level3.datasets ?\r\n          createChart(level3.title, level3.xAxisLabels, level3.datasets, 3)\r\n          : null}\r\n      </Grid>\r\n    </React.Fragment>\r\n  )\r\n}","export const fetchTimeseriesLastValue = async (assetID: string, interval: number) => {\r\n  const response = await fetch(`/api/iottimeseries/v3/timeseries/${assetID}/DATA_${interval}_MIN`)\r\n  const data = await response.json()\r\n  const dataWithCustomFields = {\r\n    ...data[0],\r\n    assetID,\r\n  }\r\n  return dataWithCustomFields\r\n}\r\n\r\n\r\nexport const fetchTimeseriesInterval = async (assetID: string, interval: number, fromDate: string, toDate: string, select: string) => {\r\n  const response = await fetch(`/api/iottimeseries/v3/timeseries/${assetID}/DATA_${interval}_MIN?from=${fromDate}&to=${toDate}&select=${select}`)\r\n  const data = await response.json()\r\n  return data\r\n}\r\n","import React, { useEffect, useState } from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { RootState } from '../../reducers/Root.reducer';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport { DatePicker } from \"@material-ui/pickers\";\r\nimport { useTranslation } from 'react-i18next';\r\nimport { fetchTimeseriesInterval } from '../../services/FetchTimeseriesAPI.service';\r\nimport { LineChart } from '../LineChart.component';\r\nimport { exportPDF } from '../../utilities/ExportPDF.utility';\r\nimport Button from '@material-ui/core/Button';\r\nimport { getUTCDate } from '../../utilities/GetUTCDate.utility';\r\nimport { setReportsDate } from '../../actions/Reports/CommonReports.action';\r\nimport { decideDataColor } from '../../utilities/SiemensColors.utility';\r\nimport { TableWithSort } from '../TableWithSort.component';\r\nimport { useStyles } from '../Reports.component';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport { setBackdropOpen } from '../../actions/Backdrop.action';\r\nimport { StackedBarChart } from '../StackedBarChart.component';\r\nimport { parseISO, format } from 'date-fns';\r\nimport { fetchTimeseriesAggregates } from '../../services/FetchTimeseriesAggregatesAPI.service';\r\n\r\ninterface IActivePowerImport {\r\n  Active_Power_Import: number\r\n  _time: string\r\n}\r\n\r\ninterface IActivePowerImportAggregate {\r\n  data: Array<{\r\n    Active_Power_Import?: {\r\n      lastvalue: number\r\n    },\r\n    starttime: string\r\n  }>\r\n  assetID: string\r\n}\r\n\r\nexport const PowerDemandTab = () => {\r\n  const [outfeedsDate, setOutfeedsDate] = useState<Date>(new Date(getUTCDate(new Date()).startOfDay))\r\n  const [infeedPowerDemandChartData, setInfeedPowerDemandChartData] = useState<Array<{ x: number, y: number }>>()\r\n  const [infeedPowerDemandExceedings, setInfeedPowerDemandExceedings] = useState<Array<Array<number | string | Date>>>()\r\n  const [warningLine, setWarningLine] = useState<Array<{ x: number, y: number }>>()\r\n  const [alarmLine, setAlarmLine] = useState<Array<{ x: number, y: number }>>()\r\n  // const [outfeedChartElements, setOutfeedChartElements] = useState<{infeedValues: }>\r\n  const [outfeedChartData, setOutfeedChartData] = useState<{\r\n    xAxisLabels: Array<string> | null, //[...every 15min intervals of a day]\r\n    datasets: Array<{ label: string, data: Array<number>, backgroundColor: string }>\r\n  }>()\r\n  const powerDemandAssets = useSelector((state: RootState) => state.powerDemandTab);\r\n  const dateFrom = useSelector((state: RootState) => state.commonReports.dateFrom);\r\n  const dateTo = useSelector((state: RootState) => state.commonReports.dateTo);\r\n  const { t } = useTranslation();\r\n  const dispatch = useDispatch();\r\n  const classes = useStyles();\r\n  const assetsNames = useSelector((state: RootState) => state.commonReports.assets);\r\n\r\n  useEffect(() => {\r\n    if (powerDemandAssets.infeeds && powerDemandAssets.warningThreshold && powerDemandAssets.alarmThreshold) {\r\n      let promises: Array<Promise<any>> = []\r\n      const numberOfSamples = (new Date(dateTo).valueOf() - new Date(dateFrom).valueOf()) / 900000 //number of 15-min intervals in month, if >2000 need to split calls into 2 to get all data - thanks MS limit ...\r\n      powerDemandAssets.infeeds.forEach(infeed => {\r\n        if (numberOfSamples > 2000) {\r\n          promises.push(fetchTimeseriesInterval(infeed, 15, dateFrom, new Date(new Date(dateTo).valueOf() - 1296000000).toISOString(), 'Active_Power_Import'))\r\n          promises.push(fetchTimeseriesInterval(infeed, 15, new Date(new Date(dateTo).valueOf() - 1295999999).toISOString(), dateTo, 'Active_Power_Import'))\r\n        }\r\n      })\r\n      dispatch(setBackdropOpen(true))\r\n      Promise.all(promises).then((res: Array<Array<IActivePowerImport>>) => {\r\n        dispatch(setBackdropOpen(false))\r\n        if (res.length > 0) {\r\n          const activePowerValuesSum: Array<{ x: number, y: number }> = []\r\n          const reduced = res.reduce((a, b) => a.concat(b))\r\n          reduced.forEach(single15Interval => {\r\n            const timestampIndex = activePowerValuesSum.findIndex(element => element.x === new Date(single15Interval._time).valueOf())\r\n            if (timestampIndex !== -1) {\r\n              activePowerValuesSum[timestampIndex].y = activePowerValuesSum[timestampIndex].y + single15Interval.Active_Power_Import / 1000\r\n            }\r\n            else {\r\n              activePowerValuesSum.push({\r\n                x: new Date(single15Interval._time).valueOf(),\r\n                y: single15Interval.Active_Power_Import / 1000\r\n              })\r\n            }\r\n          })\r\n          const warningLine = activePowerValuesSum.map(single15Interval => {\r\n            return {\r\n              x: new Date(single15Interval.x).valueOf(),\r\n              y: powerDemandAssets.warningThreshold ? powerDemandAssets.warningThreshold : 0\r\n            }\r\n          })\r\n          const alarmLine = activePowerValuesSum.map(single15Interval => {\r\n            return {\r\n              x: new Date(single15Interval.x).valueOf(),\r\n              y: powerDemandAssets.alarmThreshold ? powerDemandAssets.alarmThreshold : 0\r\n            }\r\n          })\r\n          setAlarmLine(alarmLine)\r\n          setWarningLine(warningLine)\r\n          setInfeedPowerDemandChartData(activePowerValuesSum)\r\n        }\r\n      })\r\n    }\r\n  }, [dateFrom, dateTo, powerDemandAssets, setInfeedPowerDemandChartData, dispatch])\r\n\r\n  useEffect(() => {\r\n    //generate warning/alarm table\r\n    if (infeedPowerDemandChartData && powerDemandAssets.warningThreshold && powerDemandAssets.alarmThreshold) {\r\n      const exceedings: React.SetStateAction<(string | number | Date)[][] | undefined> = []\r\n      infeedPowerDemandChartData.forEach(value => {\r\n        if (powerDemandAssets.warningThreshold && powerDemandAssets.alarmThreshold) {\r\n          const parsedDate = new Date(value.x);\r\n          if (value.y > powerDemandAssets.alarmThreshold) {\r\n            exceedings.push([parsedDate, value.y, parseFloat((value.y - powerDemandAssets.alarmThreshold).toFixed(3)), t('reportsPage.alarm') as string])\r\n          }\r\n          else if (value.y > powerDemandAssets.warningThreshold) {\r\n            exceedings.push([parsedDate, value.y, parseFloat((value.y - powerDemandAssets.warningThreshold).toFixed(3)), t('reportsPage.warning') as string])\r\n          }\r\n        }\r\n      })\r\n      setInfeedPowerDemandExceedings(exceedings)\r\n    }\r\n  }, [setInfeedPowerDemandExceedings, t, infeedPowerDemandChartData, powerDemandAssets.alarmThreshold, powerDemandAssets.warningThreshold])\r\n\r\n  useEffect(() => {\r\n    //generate outfeeds chart\r\n    if (Object.keys(assetsNames).length > 0 && powerDemandAssets.outfeeds && powerDemandAssets.outfeeds.length > 0 && infeedPowerDemandChartData && powerDemandAssets.infeeds) {\r\n      const promisesOutfeeds = powerDemandAssets.outfeeds.map(outfeed => {\r\n        return fetchTimeseriesAggregates(outfeed, 'DATA_15_MIN', 'minute', 15, getUTCDate(outfeedsDate).startOfDay, getUTCDate(outfeedsDate).endOfDay)\r\n      })\r\n      const promisesInfeeds = powerDemandAssets.infeeds.map(infeed => {\r\n        return fetchTimeseriesAggregates(infeed, 'DATA_15_MIN', 'minute', 15, getUTCDate(outfeedsDate).startOfDay, getUTCDate(outfeedsDate).endOfDay)\r\n      })\r\n      const promises = promisesOutfeeds.concat(promisesInfeeds)\r\n      dispatch(setBackdropOpen(true))\r\n      Promise.all(promises).then(res => {\r\n        dispatch(setBackdropOpen(false))\r\n        if (res.length > 0) {\r\n          const infeedsPart = res.slice(-promisesInfeeds.length)\r\n          res.length = res.length - infeedsPart.length\r\n          const outfeedsPart = res;\r\n\r\n          let xAxisLabels: Array<string> = []\r\n          let respectiveDatasetsActivePowers: Array<Array<number>> = []\r\n          const datasetsOutfeeds = outfeedsPart.map((outfeeds: IActivePowerImportAggregate, outfeedGroupIndex: number) => {\r\n            const data = outfeeds.data.map((outfeed) => {\r\n              const formattedDate = `${format(parseISO(outfeed.starttime), 'HH:mm')}`\r\n              if (xAxisLabels.indexOf(formattedDate) === -1) {\r\n                xAxisLabels.push(formattedDate)\r\n              }\r\n              if (outfeed.Active_Power_Import) {\r\n                return outfeed.Active_Power_Import.lastvalue / 1000\r\n              }\r\n              else {\r\n                return 0\r\n              }\r\n            })\r\n            respectiveDatasetsActivePowers.push(data)\r\n            return {\r\n              label: powerDemandAssets.outfeeds ? assetsNames[powerDemandAssets.outfeeds[outfeedGroupIndex]].feederName : '',\r\n              data: data,\r\n              backgroundColor: decideDataColor(outfeedGroupIndex)\r\n            }\r\n          })\r\n          const datasetsInfeeds = infeedsPart.map((infeeds: IActivePowerImportAggregate) => {\r\n            const data = infeeds.data.map((infeed) => {\r\n              if (infeed.Active_Power_Import) {\r\n                return infeed.Active_Power_Import.lastvalue / 1000\r\n              }\r\n              else {\r\n                return 0\r\n              }\r\n            })\r\n            const outfeedsSum = respectiveDatasetsActivePowers.reduce((r, a) => a.map((b, i) => {\r\n              return ((r[i] || 0)) + b\r\n            }), [])\r\n            const restPower = data.map((singleVal, index) => parseFloat((singleVal - outfeedsSum[index]).toFixed(3)))\r\n            return {\r\n              label: t('reportsPage.othersDataTitle'),\r\n              data: restPower,\r\n              backgroundColor: decideDataColor(datasetsOutfeeds.length + 1)\r\n            }\r\n          })\r\n\r\n          const datasets = datasetsOutfeeds.concat(datasetsInfeeds)\r\n          setOutfeedChartData({ xAxisLabels, datasets })\r\n        }\r\n      })\r\n    }\r\n  }, [assetsNames, outfeedsDate, powerDemandAssets.outfeeds, infeedPowerDemandChartData, powerDemandAssets.infeeds, t, dispatch])\r\n\r\n  const handleDateChange = (date: Date) => {\r\n    dispatch(setReportsDate(getUTCDate(date).startOfMonth, getUTCDate(date).endOfMonth))\r\n  }\r\n\r\n  return (\r\n    <Grid container spacing={2} >\r\n      <Grid item xs={12} md={8} lg={9}>\r\n        <DatePicker\r\n          cancelLabel={t('datePicker.cancelButton')}\r\n          autoOk\r\n          label={t('reportsPage.chooseMonth')}\r\n          value={dateFrom}\r\n          onChange={(date) => date ? handleDateChange(date) : null}\r\n          fullWidth\r\n          views={['month']}\r\n          format=\"MM/yyyy\"\r\n        />\r\n      </Grid>\r\n      <Grid item xs={12} md={4} lg={3}>\r\n        <Button\r\n          fullWidth\r\n          variant=\"contained\"\r\n          color=\"primary\"\r\n          onClick={() => exportPDF()}\r\n        >\r\n          {t('reportsPage.exportToPDF')}\r\n        </Button>\r\n      </Grid>\r\n      {infeedPowerDemandChartData && warningLine && alarmLine ?\r\n        <React.Fragment>\r\n          <Grid item xs={12} className={classes.sectionMargin}>\r\n            <Typography gutterBottom variant=\"h5\">{t('reportsPage.averageActivePower15Min')}</Typography>\r\n          </Grid>\r\n          <Grid item xs={12}>\r\n            <LineChart\r\n              data={{\r\n                datasets: [{\r\n                  label: t('reportsPage.averageActivePower15Min'),\r\n                  backgroundColor: decideDataColor(0),\r\n                  borderColor: decideDataColor(0),\r\n                  fill: false,\r\n                  lineTension: 0,\r\n                  data: infeedPowerDemandChartData,\r\n                  pointRadius: 0\r\n                },\r\n                {\r\n                  label: t('reportsPage.warningThreshold'),\r\n                  backgroundColor: 'orange',\r\n                  borderColor: 'orange',\r\n                  fill: false,\r\n                  lineTension: 0,\r\n                  data: warningLine,\r\n                  pointRadius: 0,\r\n                  borderDash: [5]\r\n                },\r\n                {\r\n                  label: t('reportsPage.alarmThreshold'),\r\n                  backgroundColor: 'red',\r\n                  borderColor: 'red',\r\n                  fill: false,\r\n                  lineTension: 0,\r\n                  data: alarmLine,\r\n                  pointRadius: 0,\r\n                  borderDash: [5]\r\n                }]\r\n              }}\r\n              xAxisTitle={t('chart.timeAxisLabel')}\r\n              yAxisTitle={t('chart.valueAxisLabel')}\r\n              timeInterval='day'\r\n              yAxisUnit='kW'\r\n            />\r\n          </Grid>\r\n          {infeedPowerDemandExceedings ?\r\n            <React.Fragment>\r\n              <Grid item xs={12} className={classes.sectionMargin}>\r\n                <Typography gutterBottom variant=\"h5\">{t('reportsPage.powerExceedings')}</Typography>\r\n              </Grid>\r\n              <Grid item xs={12}>\r\n                <TableWithSort\r\n                  rows={infeedPowerDemandExceedings}\r\n                  columns={[t('reportsPage.tableColumnTime'), t('reportsPage.tableColumnPower'), t('reportsPage.tableColumnExceeding'), t('reportsPage.tableColumnAlarmWarning')]}\r\n                  defaultOrderColumnIndex={0}\r\n                />\r\n              </Grid>\r\n\r\n            </React.Fragment>\r\n            : null}\r\n        </React.Fragment>\r\n        : null}\r\n      {outfeedChartData && outfeedChartData.xAxisLabels && outfeedChartData.datasets ?\r\n        <React.Fragment>\r\n          <Grid item xs={12} className={classes.sectionMargin}>\r\n            <Typography gutterBottom variant=\"h5\">{t('reportsPage.outfeedAverageActivePower')}</Typography>\r\n          </Grid>\r\n          <Grid item xs={12}>\r\n            <StackedBarChart\r\n              yAxisTitle={t('chart.valueAxisLabel')}\r\n              xAxisTitle={t('chart.timeAxisLabel')}\r\n              yAxisUnit='kW'\r\n              chartTitle=\"\"\r\n              data={{\r\n                labels: outfeedChartData.xAxisLabels,\r\n                datasets: outfeedChartData.datasets\r\n              }}\r\n            />\r\n          </Grid>\r\n          <Grid item xs={12} md={6}>\r\n            <DatePicker\r\n              cancelLabel={t('datePicker.cancelButton')}\r\n              autoOk\r\n              label={t('reportsPage.chooseMonth')}\r\n              value={outfeedsDate}\r\n              onChange={(date) => date ? setOutfeedsDate(date) : null}\r\n              fullWidth\r\n              format=\"MM/yyyy\"\r\n              variant='static'\r\n              disableFuture\r\n            />\r\n          </Grid>\r\n        </React.Fragment>\r\n        : null}\r\n\r\n    </Grid>\r\n  )\r\n}\r\n","import React, { useEffect, useState, useCallback } from 'react';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport { DatePicker } from \"@material-ui/pickers\";\r\nimport { useTranslation } from 'react-i18next';\r\nimport Button from '@material-ui/core/Button';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { exportPDF } from '../../utilities/ExportPDF.utility';\r\nimport { RootState } from '../../reducers/Root.reducer';\r\nimport { setReportsDate } from '../../actions/Reports/CommonReports.action';\r\nimport { getUTCDate } from '../../utilities/GetUTCDate.utility';\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport Select from '@material-ui/core/Select';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport { useStyles } from '../Reports.component';\r\nimport { fetchTimeseriesAggregates } from '../../services/FetchTimeseriesAggregatesAPI.service';\r\nimport { UniversalTable } from '../UniversalTable.component';\r\nimport { parseISO, format } from 'date-fns';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport { LineChart } from '../LineChart.component';\r\nimport { powerFactorCalculator } from '../../utilities/PowerFactorCalculator.utility';\r\nimport { decideDataColor } from '../../utilities/SiemensColors.utility';\r\nimport { setBackdropOpen } from '../../actions/Backdrop.action';\r\nimport { setDeviceDataDialogOpen } from '../../actions/DeviceDataDialog.action';\r\nimport { setDeviceDataDialogDateFrom } from '../../actions/DeviceDataDialog.action';\r\nimport { setUniversalTabsNameIndex } from '../../actions/UniversalTabs.action';\r\n\r\ninterface IAggregatedParameterValues {\r\n  maxtime: string\r\n  mintime: string\r\n  maxvalue: number\r\n  minvalue: number\r\n  firstvalue: number\r\n  average: number\r\n}\r\n\r\ninterface ITransformerAggregatedValues {\r\n  Current_L1: IAggregatedParameterValues\r\n  Current_L2: IAggregatedParameterValues\r\n  Current_L3: IAggregatedParameterValues\r\n  THD_I_L1: IAggregatedParameterValues\r\n  THD_I_L2: IAggregatedParameterValues\r\n  THD_I_L3: IAggregatedParameterValues\r\n  THD_U_L1: IAggregatedParameterValues\r\n  THD_U_L2: IAggregatedParameterValues\r\n  THD_U_L3: IAggregatedParameterValues\r\n  Voltage_L1_L2: IAggregatedParameterValues\r\n  Voltage_L1_N: IAggregatedParameterValues\r\n  Voltage_L2_L3: IAggregatedParameterValues\r\n  Voltage_L2_N: IAggregatedParameterValues\r\n  Voltage_L3_L1: IAggregatedParameterValues\r\n  Voltage_L3_N: IAggregatedParameterValues,\r\n  starttime: string\r\n}\r\n\r\ninterface ITransformer15MinAggregatedValues {\r\n  Active_Power_Export: IAggregatedParameterValues\r\n  Active_Power_Import: IAggregatedParameterValues\r\n  Reactive_Power_Export: IAggregatedParameterValues\r\n  Reactive_Power_Import: IAggregatedParameterValues\r\n  endtime: string\r\n  starttime: string\r\n}\r\n\r\nexport const InfeedParametersTab = () => {\r\n  const [availableTransformers, setAvailableTransformers] = useState<Array<{\r\n    name: string,\r\n    tableName: string,\r\n    type: string,\r\n    breaker: {\r\n      name: string,\r\n      type: string,\r\n      assetID: string,\r\n      state?: number | undefined,\r\n      tableName?: string | undefined\r\n    }\r\n  }>>()\r\n  const [transformer, setTransformer] = useState('');\r\n  const dateFrom = useSelector((state: RootState) => state.commonReports.dateFrom);\r\n  const dateTo = useSelector((state: RootState) => state.commonReports.dateTo);\r\n  const overview = useSelector((state: RootState) => state.overview);\r\n  const [transformerAggregatedData, setTransformerAggregatedData] = useState<ITransformerAggregatedValues>()\r\n  const [transformerVoltageTableData, setTransformerVoltageTableData] = useState<{ rows: Array<Array<number | string | React.ReactNode>>, columns: Array<string> }>()\r\n  const [transformerCurrentTableData, setTransformerCurrentTableData] = useState<{ rows: Array<Array<number | string | React.ReactNode>>, columns: Array<string> }>()\r\n  const [monthly15minData, setMonthly15minData] = useState<Array<ITransformer15MinAggregatedValues>>()\r\n  const [monthly1minData, setMonthly1minData] = useState<Array<ITransformerAggregatedValues>>()\r\n  const [powerFactorChartData, setPowerFactorChartData] = useState<{ importPFData: Array<{ x: number, y: number }>, exportPFData: Array<{ x: number, y: number }> }>()\r\n  const [currentAndTHDChartData, setCurrentAndTHDChartData] = useState<{\r\n    maxCurrentL1: Array<{ x: number, y: number }>,\r\n    maxCurrentL2: Array<{ x: number, y: number }>,\r\n    maxCurrentL3: Array<{ x: number, y: number }>,\r\n    avgCurrentL1: Array<{ x: number, y: number }>,\r\n    avgCurrentL2: Array<{ x: number, y: number }>,\r\n    avgCurrentL3: Array<{ x: number, y: number }>,\r\n    thdiL1: Array<{ x: number, y: number }>,\r\n    thdiL2: Array<{ x: number, y: number }>,\r\n    thdiL3: Array<{ x: number, y: number }>,\r\n    thduL1: Array<{ x: number, y: number }>,\r\n    thduL2: Array<{ x: number, y: number }>,\r\n    thduL3: Array<{ x: number, y: number }>\r\n  }>()\r\n  const [directOutfeeds, setDirectOutfeeds] = useState<Array<{ assetID: string, assetName: string }>>()\r\n  const [dialogData, setDialogData] = useState<{\r\n    deviceName: string,\r\n    deviceType: string,\r\n    breakerName: string,\r\n    breakerType: string,\r\n    sectionName: string,\r\n    assetID: string,\r\n    switchboardAssetID: string\r\n  }>()\r\n  const [directOutfeeds1MinData, setDirectOutfeeds1MinData] = useState<Array<{ assetID: string, assetName: string, data: Array<ITransformerAggregatedValues> }>>()\r\n  const [directOutfeedsTHDChartDataL1, setDirectOutfeedsTHDChartDataL1] = useState<Array<{\r\n    outfeedName: string, data: Array<{\r\n      x: number,\r\n      y: number\r\n    }>\r\n  }>>()\r\n  const [directOutfeedsTHDChartDataL2, setDirectOutfeedsTHDChartDataL2] = useState<Array<{\r\n    outfeedName: string, data: Array<{\r\n      x: number,\r\n      y: number\r\n    }>\r\n  }>>()\r\n  const [directOutfeedsTHDChartDataL3, setDirectOutfeedsTHDChartDataL3] = useState<Array<{\r\n    outfeedName: string, data: Array<{\r\n      x: number,\r\n      y: number\r\n    }>\r\n  }>>()\r\n  const { t } = useTranslation();\r\n  const dispatch = useDispatch();\r\n  const classes = useStyles();\r\n\r\n  const buttonOnClickOpenDialog = useCallback((date: string, tabIndex: number) => {\r\n    if (dialogData) {\r\n      dispatch(setDeviceDataDialogDateFrom(new Date(date)))\r\n      dispatch(setUniversalTabsNameIndex('TransformerDeviceDetails', tabIndex)) // (name, value)\r\n      dispatch(setDeviceDataDialogOpen({\r\n        open: true,\r\n        deviceName: dialogData.deviceName,\r\n        deviceType: dialogData.deviceType,\r\n        breakerName: dialogData.breakerName,\r\n        sectionName: dialogData.sectionName,\r\n        assetID: dialogData.assetID,\r\n        switchboardAssetID: dialogData.switchboardAssetID\r\n      }))\r\n    }\r\n  }, [dispatch, dialogData])\r\n\r\n  const renderButton = useCallback((innerHTML: string, date: string, tabIndex: number) => {\r\n    return (\r\n      <Button\r\n        onClick={() => buttonOnClickOpenDialog(date, tabIndex)}\r\n        className={classes.smallerFont}>\r\n        {innerHTML}\r\n      </Button>\r\n    )\r\n  }, [classes.smallerFont, buttonOnClickOpenDialog])\r\n\r\n  useEffect(() => { //GATHER TRANSFORMERS AVAILABLE\r\n    const transformers: any = []\r\n    overview.diagrams.forEach(diagram => {\r\n      diagram.sections.forEach(section => {\r\n        if (section.infeeds) {\r\n          section.infeeds.forEach(infeed => {\r\n            if (infeed.type === 'transformer') {\r\n              transformers.push(infeed)\r\n            }\r\n          })\r\n        }\r\n      })\r\n    })\r\n    setAvailableTransformers(transformers)\r\n    if (transformers.length > 0) {\r\n      setTransformer(transformers[0].breaker.assetID)\r\n    }\r\n  }, [overview.diagrams, setAvailableTransformers])\r\n\r\n  useEffect(() => { // FETCH AGGREGATED PSU DATA\r\n    if (transformer !== '') {\r\n      dispatch(setBackdropOpen(true))\r\n      fetchTimeseriesAggregates(transformer, 'DATA_1_MIN', 'month', 1, dateFrom, dateTo).then(res => {\r\n        dispatch(setBackdropOpen(false))\r\n        setTransformerAggregatedData(res)\r\n      }).catch(err => dispatch(setBackdropOpen(false)))\r\n    }\r\n  }, [transformer, dateFrom, dateTo, setTransformerAggregatedData, dispatch])\r\n\r\n  useEffect(() => { //VOLTAGE AND CURRENT TABLES INITIALIZATION\r\n    if (transformerAggregatedData && dialogData && transformerAggregatedData.Voltage_L1_N) {\r\n      const columnsVoltageTable = [t('reportsPage.genericParameterTitle'), t('reportsPage.averageValue'), t('reportsPage.maxValue'), t('reportsPage.minValue')]\r\n      const rowsVoltageTable = [\r\n        [t('deviceDataDialog.voltageL1N'),\r\n        setValueUnit(setPrecision(transformerAggregatedData.Voltage_L1_N.average), 'V'),\r\n        <React.Fragment>\r\n          <p>{setValueUnit(setPrecision(transformerAggregatedData.Voltage_L1_N.maxvalue), 'V')}</p>\r\n          {renderButton(format(parseISO(transformerAggregatedData.Voltage_L1_N.maxtime), 'dd/MM/yyyy, HH:mm'), transformerAggregatedData.Voltage_L1_N.maxtime, 1)}\r\n        </React.Fragment>,\r\n        <React.Fragment>\r\n          <p>{setValueUnit(setPrecision(transformerAggregatedData.Voltage_L1_N.minvalue), 'V')}</p>\r\n          {renderButton(format(parseISO(transformerAggregatedData.Voltage_L1_N.mintime), 'dd/MM/yyyy, HH:mm'), transformerAggregatedData.Voltage_L1_N.mintime, 1)}\r\n        </React.Fragment>\r\n        ],\r\n        [t('deviceDataDialog.voltageL2N'),\r\n        setValueUnit(setPrecision(transformerAggregatedData.Voltage_L2_N.average), 'V'),\r\n        <React.Fragment><p>{setValueUnit(setPrecision(transformerAggregatedData.Voltage_L2_N.maxvalue), 'V')}</p>\r\n          {renderButton(format(parseISO(transformerAggregatedData.Voltage_L2_N.maxtime), 'dd/MM/yyyy, HH:mm'), transformerAggregatedData.Voltage_L2_N.maxtime, 1)}\r\n        </React.Fragment>,\r\n        <React.Fragment><p>{setValueUnit(setPrecision(transformerAggregatedData.Voltage_L2_N.minvalue), 'V')}</p>\r\n          {renderButton(format(parseISO(transformerAggregatedData.Voltage_L2_N.mintime), 'dd/MM/yyyy, HH:mm'), transformerAggregatedData.Voltage_L2_N.mintime, 1)}\r\n        </React.Fragment>\r\n        ],\r\n        [t('deviceDataDialog.voltageL3N'),\r\n        setValueUnit(setPrecision(transformerAggregatedData.Voltage_L3_N.average), 'V'),\r\n        <React.Fragment><p>{setValueUnit(setPrecision(transformerAggregatedData.Voltage_L3_N.maxvalue), 'V')}</p>\r\n          {renderButton(format(parseISO(transformerAggregatedData.Voltage_L3_N.maxtime), 'dd/MM/yyyy, HH:mm'), transformerAggregatedData.Voltage_L3_N.maxtime, 1)}\r\n        </React.Fragment>,\r\n        <React.Fragment><p>{setValueUnit(setPrecision(transformerAggregatedData.Voltage_L3_N.minvalue), 'V')}</p>\r\n          {renderButton(format(parseISO(transformerAggregatedData.Voltage_L3_N.mintime), 'dd/MM/yyyy, HH:mm'), transformerAggregatedData.Voltage_L3_N.mintime, 1)}\r\n        </React.Fragment>\r\n        ],\r\n        [t('deviceDataDialog.voltageL1L2'),\r\n        setValueUnit(setPrecision(transformerAggregatedData.Voltage_L1_L2.average), 'V'),\r\n        <React.Fragment><p>{setValueUnit(setPrecision(transformerAggregatedData.Voltage_L1_L2.maxvalue), 'V')}</p>\r\n          {renderButton(format(parseISO(transformerAggregatedData.Voltage_L1_L2.maxtime), 'dd/MM/yyyy, HH:mm'), transformerAggregatedData.Voltage_L1_L2.maxtime, 2)}\r\n        </React.Fragment>,\r\n        <React.Fragment><p>{setValueUnit(setPrecision(transformerAggregatedData.Voltage_L1_L2.minvalue), 'V')}</p>\r\n          {renderButton(format(parseISO(transformerAggregatedData.Voltage_L1_L2.mintime), 'dd/MM/yyyy, HH:mm'), transformerAggregatedData.Voltage_L1_L2.mintime, 2)}\r\n        </React.Fragment>\r\n        ],\r\n        [t('deviceDataDialog.voltageL1L2'),\r\n        setValueUnit(setPrecision(transformerAggregatedData.Voltage_L2_L3.average), 'V'),\r\n        <React.Fragment><p>{setValueUnit(setPrecision(transformerAggregatedData.Voltage_L2_L3.maxvalue), 'V')}</p>\r\n          {renderButton(format(parseISO(transformerAggregatedData.Voltage_L2_L3.maxtime), 'dd/MM/yyyy, HH:mm'), transformerAggregatedData.Voltage_L2_L3.maxtime, 2)}\r\n        </React.Fragment>,\r\n        <React.Fragment><p>{setValueUnit(setPrecision(transformerAggregatedData.Voltage_L2_L3.minvalue), 'V')}</p>\r\n          {renderButton(format(parseISO(transformerAggregatedData.Voltage_L2_L3.mintime), 'dd/MM/yyyy, HH:mm'), transformerAggregatedData.Voltage_L2_L3.mintime, 2)}\r\n        </React.Fragment>\r\n        ],\r\n        [t('deviceDataDialog.voltageL3L1'),\r\n        setValueUnit(setPrecision(transformerAggregatedData.Voltage_L3_L1.average), 'V'),\r\n        <React.Fragment><p>{setValueUnit(setPrecision(transformerAggregatedData.Voltage_L3_L1.maxvalue), 'V')}</p>\r\n          {renderButton(format(parseISO(transformerAggregatedData.Voltage_L3_L1.maxtime), 'dd/MM/yyyy, HH:mm'), transformerAggregatedData.Voltage_L3_L1.maxtime, 2)}\r\n        </React.Fragment>,\r\n        <React.Fragment><p>{setValueUnit(setPrecision(transformerAggregatedData.Voltage_L3_L1.minvalue), 'V')}</p>\r\n          {renderButton(format(parseISO(transformerAggregatedData.Voltage_L3_L1.mintime), 'dd/MM/yyyy, HH:mm'), transformerAggregatedData.Voltage_L3_L1.mintime, 2)}\r\n        </React.Fragment>\r\n        ],\r\n        ['THDU L1',\r\n          setValueUnit(setPrecision(transformerAggregatedData.THD_U_L1.average), '%'),\r\n          <React.Fragment><p>{setValueUnit(setPrecision(transformerAggregatedData.THD_U_L1.maxvalue), '%')}</p>\r\n            {renderButton(format(parseISO(transformerAggregatedData.THD_U_L1.maxtime), 'dd/MM/yyyy, HH:mm'), transformerAggregatedData.THD_U_L1.maxtime, 5)}\r\n          </React.Fragment>,\r\n          <React.Fragment><p>{setValueUnit(setPrecision(transformerAggregatedData.THD_U_L1.minvalue), '%')}</p>\r\n            {renderButton(format(parseISO(transformerAggregatedData.THD_U_L1.mintime), 'dd/MM/yyyy, HH:mm'), transformerAggregatedData.THD_U_L1.mintime, 5)}\r\n          </React.Fragment>\r\n        ],\r\n        ['THDU L2',\r\n          setValueUnit(setPrecision(transformerAggregatedData.THD_U_L2.average), '%'),\r\n          <React.Fragment><p>{setValueUnit(setPrecision(transformerAggregatedData.THD_U_L2.maxvalue), '%')}</p>\r\n            {renderButton(format(parseISO(transformerAggregatedData.THD_U_L2.maxtime), 'dd/MM/yyyy, HH:mm'), transformerAggregatedData.THD_U_L2.maxtime, 5)}\r\n          </React.Fragment>,\r\n          <React.Fragment><p>{setValueUnit(setPrecision(transformerAggregatedData.THD_U_L2.minvalue), '%')}</p>\r\n            {renderButton(format(parseISO(transformerAggregatedData.THD_U_L2.mintime), 'dd/MM/yyyy, HH:mm'), transformerAggregatedData.THD_U_L2.mintime, 5)}\r\n          </React.Fragment>\r\n        ],\r\n        ['THDU L3',\r\n          setValueUnit(setPrecision(transformerAggregatedData.THD_U_L3.average), '%'),\r\n          <React.Fragment><p>{setValueUnit(setPrecision(transformerAggregatedData.THD_U_L3.maxvalue), '%')}</p>\r\n            {renderButton(format(parseISO(transformerAggregatedData.THD_U_L3.maxtime), 'dd/MM/yyyy, HH:mm'), transformerAggregatedData.THD_U_L3.maxtime, 5)}\r\n          </React.Fragment>,\r\n          <React.Fragment><p>{setValueUnit(setPrecision(transformerAggregatedData.THD_U_L3.minvalue), '%')}</p>\r\n            {renderButton(format(parseISO(transformerAggregatedData.THD_U_L3.mintime), 'dd/MM/yyyy, HH:mm'), transformerAggregatedData.THD_U_L3.mintime, 5)}\r\n          </React.Fragment>\r\n        ]\r\n      ]\r\n\r\n      const columnsCurrentTable = columnsVoltageTable\r\n      const rowsCurrentTable = [\r\n        [`${t('deviceDataDialog.current')} L1`,\r\n        setValueUnit(setPrecision(transformerAggregatedData.Current_L1.average), 'A'),\r\n        <React.Fragment><p>{setValueUnit(setPrecision(transformerAggregatedData.Current_L1.maxvalue), 'A')}</p>\r\n          {renderButton(format(parseISO(transformerAggregatedData.Current_L1.maxtime), 'dd/MM/yyyy, HH:mm'), transformerAggregatedData.Current_L1.maxtime, 3)}\r\n        </React.Fragment>,\r\n        <React.Fragment><p>{setValueUnit(setPrecision(transformerAggregatedData.Current_L1.minvalue), 'A')}</p>\r\n          {renderButton(format(parseISO(transformerAggregatedData.Current_L1.mintime), 'dd/MM/yyyy, HH:mm'), transformerAggregatedData.Current_L1.mintime, 3)}\r\n        </React.Fragment>\r\n        ],\r\n        [`${t('deviceDataDialog.current')} L2`,\r\n        setValueUnit(setPrecision(transformerAggregatedData.Current_L2.average), 'A'),\r\n        <React.Fragment><p>{setValueUnit(setPrecision(transformerAggregatedData.Current_L2.maxvalue), 'A')}</p>\r\n          {renderButton(format(parseISO(transformerAggregatedData.Current_L2.maxtime), 'dd/MM/yyyy, HH:mm'), transformerAggregatedData.Current_L2.maxtime, 3)}\r\n        </React.Fragment>,\r\n        <React.Fragment><p>{setValueUnit(setPrecision(transformerAggregatedData.Current_L2.minvalue), 'A')}</p>\r\n          {renderButton(format(parseISO(transformerAggregatedData.Current_L2.mintime), 'dd/MM/yyyy, HH:mm'), transformerAggregatedData.Current_L2.mintime, 3)}\r\n        </React.Fragment>\r\n        ],\r\n        [`${t('deviceDataDialog.current')} L3`,\r\n        setValueUnit(setPrecision(transformerAggregatedData.Current_L3.average), 'A'),\r\n        <React.Fragment><p>{setValueUnit(setPrecision(transformerAggregatedData.Current_L3.maxvalue), 'A')}</p>\r\n          {renderButton(format(parseISO(transformerAggregatedData.Current_L3.maxtime), 'dd/MM/yyyy, HH:mm'), transformerAggregatedData.Current_L3.maxtime, 3)}\r\n        </React.Fragment>,\r\n        <React.Fragment><p>{setValueUnit(setPrecision(transformerAggregatedData.Current_L3.minvalue), 'A')}</p>\r\n          {renderButton(format(parseISO(transformerAggregatedData.Current_L3.mintime), 'dd/MM/yyyy, HH:mm'), transformerAggregatedData.Current_L3.mintime, 3)}\r\n        </React.Fragment>\r\n        ],\r\n        ['THDI L1',\r\n          setValueUnit(setPrecision(transformerAggregatedData.THD_I_L1.average), '%'),\r\n          <React.Fragment><p>{setValueUnit(setPrecision(transformerAggregatedData.THD_I_L1.maxvalue), '%')}</p>\r\n            {renderButton(format(parseISO(transformerAggregatedData.THD_I_L1.maxtime), 'dd/MM/yyyy, HH:mm'), transformerAggregatedData.THD_I_L1.maxtime, 6)}\r\n          </React.Fragment>,\r\n          <React.Fragment><p>{setValueUnit(setPrecision(transformerAggregatedData.THD_I_L1.minvalue), '%')}</p>\r\n            {renderButton(format(parseISO(transformerAggregatedData.THD_I_L1.mintime), 'dd/MM/yyyy, HH:mm'), transformerAggregatedData.THD_I_L1.mintime, 6)}\r\n          </React.Fragment>\r\n        ],\r\n        ['THDI L2',\r\n          setValueUnit(setPrecision(transformerAggregatedData.THD_I_L2.average), '%'),\r\n          <React.Fragment><p>{setValueUnit(setPrecision(transformerAggregatedData.THD_I_L2.maxvalue), '%')}</p>\r\n            {renderButton(format(parseISO(transformerAggregatedData.THD_I_L2.maxtime), 'dd/MM/yyyy, HH:mm'), transformerAggregatedData.THD_I_L2.maxtime, 6)}\r\n          </React.Fragment>,\r\n          <React.Fragment><p>{setValueUnit(setPrecision(transformerAggregatedData.THD_I_L2.minvalue), '%')}</p>\r\n            {renderButton(format(parseISO(transformerAggregatedData.THD_I_L2.mintime), 'dd/MM/yyyy, HH:mm'), transformerAggregatedData.THD_I_L2.mintime, 6)}\r\n          </React.Fragment>\r\n        ],\r\n        ['THDI L3',\r\n          setValueUnit(setPrecision(transformerAggregatedData.THD_I_L3.average), '%'),\r\n          <React.Fragment><p>{setValueUnit(setPrecision(transformerAggregatedData.THD_I_L3.maxvalue), '%')}</p>\r\n            {renderButton(format(parseISO(transformerAggregatedData.THD_I_L3.maxtime), 'dd/MM/yyyy, HH:mm'), transformerAggregatedData.THD_I_L3.maxtime, 6)}\r\n          </React.Fragment>,\r\n          <React.Fragment><p>{setValueUnit(setPrecision(transformerAggregatedData.THD_I_L3.minvalue), '%')}</p>\r\n            {renderButton(format(parseISO(transformerAggregatedData.THD_I_L3.mintime), 'dd/MM/yyyy, HH:mm'), transformerAggregatedData.THD_I_L3.mintime, 6)}\r\n          </React.Fragment>\r\n        ]\r\n      ]\r\n      setTransformerCurrentTableData({ rows: rowsCurrentTable, columns: columnsCurrentTable })\r\n      setTransformerVoltageTableData({ rows: rowsVoltageTable, columns: columnsVoltageTable })\r\n    }\r\n    else {\r\n      setTransformerCurrentTableData(undefined)\r\n      setTransformerVoltageTableData(undefined)\r\n    }\r\n  }, [transformerAggregatedData, t, classes.smallerFont, setTransformerVoltageTableData, dialogData, renderButton])\r\n\r\n  useEffect(() => { //FETCH MONTHLY DATA_15_MIN AGGREGATED BY 1 DAY FOR CHARTS\r\n    if (transformer !== '') {\r\n      dispatch(setBackdropOpen(true))\r\n      fetchTimeseriesAggregates(transformer, 'DATA_15_MIN', 'day', 1, dateFrom, dateTo).then(res => {\r\n        dispatch(setBackdropOpen(false))\r\n        if (res.data && res.data.length > 0) {\r\n          setMonthly15minData(res.data)\r\n        }\r\n      }).catch(err => dispatch(setBackdropOpen(false)))\r\n    }\r\n  }, [dateFrom, dateTo, transformer, dispatch])\r\n\r\n  useEffect(() => { //SET POWER FACTOR CHART DATA\r\n    if (monthly15minData) {\r\n      const importPowerFactorData = monthly15minData.map(dailyValue => {\r\n        if (dailyValue.Active_Power_Import && dailyValue.Reactive_Power_Import) {\r\n          return {\r\n            x: new Date(dailyValue.starttime).valueOf(),\r\n            y: powerFactorCalculator(dailyValue.Active_Power_Import.average, dailyValue.Reactive_Power_Import.average)\r\n          }\r\n        }\r\n        else {\r\n          return {\r\n            x: new Date(dailyValue.starttime).valueOf(),\r\n            y: 0\r\n          }\r\n        }\r\n      })\r\n      const exportPowerFactorData = monthly15minData.map(dailyValue => {\r\n        if (dailyValue.Active_Power_Export && dailyValue.Reactive_Power_Export) {\r\n          return {\r\n            x: new Date(dailyValue.starttime).valueOf(),\r\n            y: powerFactorCalculator(dailyValue.Active_Power_Export.average, dailyValue.Reactive_Power_Export.average)\r\n          }\r\n        }\r\n        else {\r\n          return {\r\n            x: new Date(dailyValue.starttime).valueOf(),\r\n            y: 0\r\n          }\r\n        }\r\n      })\r\n      setPowerFactorChartData({ importPFData: importPowerFactorData, exportPFData: exportPowerFactorData })\r\n    }\r\n  }, [monthly15minData])\r\n\r\n  useEffect(() => { //FETCH MONTHLY DATA_1_MIN AGGREGATED BY 1 CHART DATA\r\n    if (transformer !== '') {\r\n      dispatch(setBackdropOpen(true))\r\n      fetchTimeseriesAggregates(transformer, 'DATA_1_MIN', 'day', 1, dateFrom, dateTo).then(res => {\r\n        dispatch(setBackdropOpen(false))\r\n        if (res.data && res.data.length > 0) {\r\n          setMonthly1minData(res.data)\r\n        }\r\n      }).catch(err => dispatch(setBackdropOpen(false)))\r\n    }\r\n  }, [dateFrom, dateTo, transformer, dispatch])\r\n\r\n  useEffect(() => { //SET CURRENT && THD CHARTS DATA\r\n    if (monthly1minData && monthly1minData.length > 0) {\r\n      const datasets = monthly1minData.map(dailyValue => {\r\n        return {\r\n          maxCurrentL1Data: {\r\n            x: new Date(dailyValue.starttime).valueOf(),\r\n            y: dailyValue.Current_L1 ? parseFloat((dailyValue.Current_L1.maxvalue).toFixed(3)) : 0\r\n          },\r\n          maxCurrentL2Data: {\r\n            x: new Date(dailyValue.starttime).valueOf(),\r\n            y: dailyValue.Current_L2 ? parseFloat((dailyValue.Current_L2.maxvalue).toFixed(3)) : 0\r\n          },\r\n          maxCurrentL3Data: {\r\n            x: new Date(dailyValue.starttime).valueOf(),\r\n            y: dailyValue.Current_L3 ? parseFloat((dailyValue.Current_L3.maxvalue).toFixed(3)) : 0\r\n          },\r\n          avgCurrentL1Data: {\r\n            x: new Date(dailyValue.starttime).valueOf(),\r\n            y: dailyValue.Current_L1 ? parseFloat((dailyValue.Current_L1.average).toFixed(3)) : 0\r\n          },\r\n          avgCurrentL2Data: {\r\n            x: new Date(dailyValue.starttime).valueOf(),\r\n            y: dailyValue.Current_L2 ? parseFloat((dailyValue.Current_L2.average).toFixed(3)) : 0\r\n          },\r\n          avgCurrentL3Data: {\r\n            x: new Date(dailyValue.starttime).valueOf(),\r\n            y: dailyValue.Current_L3 ? parseFloat((dailyValue.Current_L3.average).toFixed(3)) : 0\r\n          },\r\n          thdiL1: {\r\n            x: new Date(dailyValue.starttime).valueOf(),\r\n            y: dailyValue.THD_I_L1 ? parseFloat((dailyValue.THD_I_L1.average).toFixed(3)) : 0\r\n          },\r\n          thdiL2: {\r\n            x: new Date(dailyValue.starttime).valueOf(),\r\n            y: dailyValue.THD_I_L2 ? parseFloat((dailyValue.THD_I_L2.average).toFixed(3)) : 0\r\n          },\r\n          thdiL3: {\r\n            x: new Date(dailyValue.starttime).valueOf(),\r\n            y: dailyValue.THD_I_L3 ? parseFloat((dailyValue.THD_I_L3.average).toFixed(3)) : 0\r\n          },\r\n          thduL1: {\r\n            x: new Date(dailyValue.starttime).valueOf(),\r\n            y: dailyValue.THD_U_L1 ? parseFloat((dailyValue.THD_U_L1.average).toFixed(3)) : 0\r\n          },\r\n          thduL2: {\r\n            x: new Date(dailyValue.starttime).valueOf(),\r\n            y: dailyValue.THD_U_L2 ? parseFloat((dailyValue.THD_U_L2.average).toFixed(3)) : 0\r\n          },\r\n          thduL3: {\r\n            x: new Date(dailyValue.starttime).valueOf(),\r\n            y: dailyValue.THD_U_L3 ? parseFloat((dailyValue.THD_U_L3.average).toFixed(3)) : 0\r\n          },\r\n        }\r\n      })\r\n      setCurrentAndTHDChartData({\r\n        maxCurrentL1: datasets.map(el => el.maxCurrentL1Data),\r\n        maxCurrentL2: datasets.map(el => el.maxCurrentL2Data),\r\n        maxCurrentL3: datasets.map(el => el.maxCurrentL3Data),\r\n        avgCurrentL1: datasets.map(el => el.avgCurrentL1Data),\r\n        avgCurrentL2: datasets.map(el => el.avgCurrentL2Data),\r\n        avgCurrentL3: datasets.map(el => el.avgCurrentL3Data),\r\n        thdiL1: datasets.map(el => el.thdiL1),\r\n        thdiL2: datasets.map(el => el.thdiL2),\r\n        thdiL3: datasets.map(el => el.thdiL3),\r\n        thduL1: datasets.map(el => el.thduL1),\r\n        thduL2: datasets.map(el => el.thduL2),\r\n        thduL3: datasets.map(el => el.thduL3),\r\n      })\r\n    }\r\n  }, [monthly1minData, setCurrentAndTHDChartData])\r\n\r\n  useEffect(() => { // GATHER DIRECT OUTFEEDS BELONGING TO SELECTED INFEED\r\n    if (transformer !== '') {\r\n      let trDiagramIndex = null\r\n      let trSectionIndex = null\r\n      let trInfeedIndex = null\r\n      overview.diagrams.forEach((diagram, diagramIndex: number) => {\r\n        diagram.sections.forEach((section, sectionIndex: number) => {\r\n          if (section.infeeds) {\r\n            section.infeeds.forEach((infeed, infeedIndex: number) => {\r\n              if (infeed.breaker.assetID === transformer) {\r\n                trDiagramIndex = diagramIndex;\r\n                trSectionIndex = sectionIndex;\r\n                trInfeedIndex = infeedIndex;\r\n              }\r\n            })\r\n          }\r\n        })\r\n      })\r\n      if (trDiagramIndex !== null && trSectionIndex !== null && trInfeedIndex !== null) {\r\n        const infeedDirectOutfeeds: Array<{ assetID: string, assetName: string }> = []\r\n        overview.diagrams[trDiagramIndex].sections.forEach(section => {\r\n          if (section.breakers) {\r\n            section.breakers.forEach(breaker => {\r\n              infeedDirectOutfeeds.push({\r\n                assetID: breaker.assetID,\r\n                assetName: breaker.tableName\r\n              })\r\n            })\r\n          }\r\n        })\r\n        setDirectOutfeeds(infeedDirectOutfeeds)\r\n      }\r\n    }\r\n  }, [transformer, overview.diagrams, setDirectOutfeeds])\r\n\r\n  useEffect(() => { // SET SELECTED TRANSFORMER DIALOG DATA\r\n    if (transformer !== '') {\r\n      let trDiagramIndex = null\r\n      let trSectionIndex = null\r\n      let trInfeedIndex = null\r\n      overview.diagrams.forEach((diagram, diagramIndex: number) => {\r\n        diagram.sections.forEach((section, sectionIndex: number) => {\r\n          if (section.infeeds) {\r\n            section.infeeds.forEach((infeed, infeedIndex: number) => {\r\n              if (infeed.breaker.assetID === transformer) {\r\n                trDiagramIndex = diagramIndex;\r\n                trSectionIndex = sectionIndex;\r\n                trInfeedIndex = infeedIndex;\r\n              }\r\n            })\r\n          }\r\n        })\r\n      })\r\n      if (trDiagramIndex !== null && trSectionIndex !== null && trInfeedIndex !== null) {\r\n        setDialogData({\r\n          deviceName: overview.diagrams[trDiagramIndex].sections[trSectionIndex]?.infeeds?.[trInfeedIndex].tableName || '',\r\n          deviceType: overview.diagrams[trDiagramIndex].sections[trSectionIndex]?.infeeds?.[trInfeedIndex].type || '',\r\n          breakerName: overview.diagrams[trDiagramIndex].sections[trSectionIndex]?.infeeds?.[trInfeedIndex].breaker.name || '',\r\n          breakerType: overview.diagrams[trDiagramIndex].sections[trSectionIndex]?.infeeds?.[trInfeedIndex].breaker.type || '',\r\n          sectionName: `${t('deviceDataDialog.section')} ${overview.diagrams[trDiagramIndex].sections[trSectionIndex].name}`,\r\n          assetID: overview.diagrams[trDiagramIndex].sections[trSectionIndex]?.infeeds?.[trInfeedIndex].breaker.assetID || '',\r\n          switchboardAssetID: overview.diagrams[trDiagramIndex].assetID || ''\r\n        })\r\n      }\r\n    }\r\n  }, [transformer, overview.diagrams, setDialogData, t])\r\n\r\n  useEffect(() => { //  FETCH DIRECT OUTFEEDS 1 MIN DATA FOR THD CHARTS\r\n    if (directOutfeeds && directOutfeeds.length > 0) {\r\n      const promises = directOutfeeds.map(outfeed => {\r\n        return fetchTimeseriesAggregates(outfeed.assetID, 'DATA_1_MIN', 'day', 1, dateFrom, dateTo)\r\n      })\r\n      Promise.all(promises).then(res => {\r\n        const withNames = res.map((asset, index: number) => {\r\n          return {\r\n            ...asset,\r\n            assetName: directOutfeeds[index].assetName\r\n          }\r\n        })\r\n        setDirectOutfeeds1MinData(withNames)\r\n      }).catch(err => dispatch(setBackdropOpen(false)))\r\n    }\r\n  }, [directOutfeeds, dateFrom, dateTo, setDirectOutfeeds1MinData, dispatch])\r\n\r\n  useEffect(() => {\r\n    if (directOutfeeds1MinData && directOutfeeds1MinData.length > 0) {\r\n      const datasetsL1: Array<{\r\n        outfeedName: string, data: Array<{\r\n          x: number,\r\n          y: number\r\n        }>\r\n      }> = []\r\n      const datasetsL2: Array<{\r\n        outfeedName: string, data: Array<{\r\n          x: number,\r\n          y: number\r\n        }>\r\n      }> = []\r\n      const datasetsL3: Array<{\r\n        outfeedName: string, data: Array<{\r\n          x: number,\r\n          y: number\r\n        }>\r\n      }> = []\r\n      directOutfeeds1MinData.forEach(outfeed => {\r\n        datasetsL1.push({\r\n          outfeedName: outfeed.assetName,\r\n          data: outfeed.data.map(outfeedData => {\r\n            return {\r\n              x: new Date(outfeedData.starttime).valueOf(),\r\n              y: outfeedData.THD_I_L1 ? parseFloat((outfeedData.THD_I_L1.average).toFixed(3)) : 0\r\n            }\r\n          })\r\n        })\r\n        datasetsL2.push({\r\n          outfeedName: outfeed.assetName,\r\n          data: outfeed.data.map(outfeedData => {\r\n            return {\r\n              x: new Date(outfeedData.starttime).valueOf(),\r\n              y: outfeedData.THD_I_L2 ? parseFloat((outfeedData.THD_I_L2.average).toFixed(3)) : 0\r\n            }\r\n          })\r\n        })\r\n        datasetsL3.push({\r\n          outfeedName: outfeed.assetName,\r\n          data: outfeed.data.map(outfeedData => {\r\n            return {\r\n              x: new Date(outfeedData.starttime).valueOf(),\r\n              y: outfeedData.THD_I_L3 ? parseFloat((outfeedData.THD_I_L3.average).toFixed(3)) : 0\r\n            }\r\n          })\r\n        })\r\n      })\r\n      setDirectOutfeedsTHDChartDataL1(datasetsL1)\r\n      setDirectOutfeedsTHDChartDataL2(datasetsL2)\r\n      setDirectOutfeedsTHDChartDataL3(datasetsL3)\r\n    }\r\n  }, [directOutfeeds1MinData, setDirectOutfeedsTHDChartDataL1, setDirectOutfeedsTHDChartDataL2, setDirectOutfeedsTHDChartDataL3])\r\n\r\n  const setPrecision = (value: number) => {\r\n    return parseFloat(value.toFixed(3))\r\n  }\r\n\r\n  const setValueUnit = (value: number, unit: string) => {\r\n    return `${value} ${unit}`\r\n  }\r\n\r\n  const handleTransformerChange = (event: React.ChangeEvent<{ value: unknown }>) => {\r\n    setTransformer(event.target.value as string);\r\n  };\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <Grid container spacing={2}>\r\n        <Grid item xs={12} md={5} lg={5}>\r\n          <DatePicker\r\n            cancelLabel={t('datePicker.cancelButton')}\r\n            autoOk\r\n            label={t('reportsPage.chooseMonth')}\r\n            value={dateFrom}\r\n            onChange={(date) => date ? dispatch(setReportsDate(getUTCDate(date).startOfMonth, getUTCDate(date).endOfMonth)) : null}\r\n            fullWidth\r\n            views={['month']}\r\n            format=\"MM/yyyy\"\r\n          />\r\n        </Grid>\r\n        <Grid item xs={12} md={4} lg={4}>\r\n          {availableTransformers && availableTransformers.length > 0 ?\r\n            <FormControl className={classes.select}>\r\n              <InputLabel id=\"transformer-select-label\">{t('reportsPage.transformerChoice')}</InputLabel>\r\n              <Select\r\n                fullWidth\r\n                labelId=\"transformer-select-label\"\r\n                id=\"transformer-select\"\r\n                value={transformer}\r\n                onChange={handleTransformerChange}\r\n              >\r\n                {availableTransformers.map(transformer => {\r\n                  return <MenuItem key={transformer.breaker.assetID} value={transformer.breaker.assetID}>{transformer.tableName}</MenuItem>\r\n                })}\r\n              </Select>\r\n            </FormControl>\r\n            : null}\r\n        </Grid>\r\n        <Grid item xs={12} md={3} lg={3}>\r\n          <Button\r\n            fullWidth\r\n            variant=\"contained\"\r\n            color=\"primary\"\r\n            onClick={() => exportPDF()}\r\n          >\r\n            {t('reportsPage.exportToPDF')}\r\n          </Button>\r\n        </Grid>\r\n        {availableTransformers && transformerVoltageTableData && transformerCurrentTableData ?\r\n          <React.Fragment>\r\n            <Grid item xs={12} className={classes.sectionMargin}>\r\n              <Typography gutterBottom variant=\"h5\">{`${t('reportsPage.powerSupplyFrom')} ${availableTransformers.find(tr => tr.breaker.assetID === transformer)?.tableName}` || ''}</Typography>\r\n            </Grid>\r\n            <Grid item xs={12} lg={6}>\r\n              <Typography gutterBottom variant=\"body1\">{t('reportsPage.voltageParametersTitle')}</Typography>\r\n              <UniversalTable\r\n                columns={transformerVoltageTableData.columns}\r\n                rows={transformerVoltageTableData.rows}\r\n              />\r\n            </Grid>\r\n            <Grid item xs={12} lg={6}>\r\n              <Typography gutterBottom variant=\"body1\">{t('reportsPage.currentParametersTitle')}</Typography>\r\n              <UniversalTable\r\n                columns={transformerCurrentTableData.columns}\r\n                rows={transformerCurrentTableData.rows}\r\n              />\r\n            </Grid>\r\n          </React.Fragment>\r\n          : null}\r\n        {powerFactorChartData ?\r\n          <React.Fragment>\r\n            <Grid item xs={12} className={classes.sectionMargin}>\r\n              <Typography gutterBottom variant=\"h5\">{t('reportsPage.powerFactorChartTitle')}</Typography>\r\n            </Grid>\r\n            <Grid item xs={12}>\r\n              <LineChart\r\n                data={{\r\n                  datasets: [{\r\n                    label: t('reportsPage.reactiveImportPowerFactor'),\r\n                    backgroundColor: decideDataColor(0),\r\n                    borderColor: decideDataColor(0),\r\n                    fill: false,\r\n                    lineTension: 0,\r\n                    data: powerFactorChartData.importPFData,\r\n                    pointRadius: 0\r\n                  },\r\n                  {\r\n                    label: t('reportsPage.reactiveExportPowerFactor'),\r\n                    backgroundColor: decideDataColor(1),\r\n                    borderColor: decideDataColor(1),\r\n                    fill: false,\r\n                    lineTension: 0,\r\n                    data: powerFactorChartData.exportPFData,\r\n                    pointRadius: 0\r\n                  }]\r\n                }}\r\n                xAxisTitle={t('chart.timeAxisLabel')}\r\n                yAxisTitle={t('chart.valueAxisLabel')}\r\n                timeInterval='day'\r\n                tooltipFormat='PP'\r\n                yAxisUnit=''\r\n              />\r\n            </Grid>\r\n          </React.Fragment>\r\n          : null}\r\n        {currentAndTHDChartData ?\r\n          <React.Fragment>\r\n            <Grid item xs={12} className={classes.sectionMargin}>\r\n              <Typography gutterBottom variant=\"h5\">{t('reportsPage.currentFlows')}</Typography>\r\n            </Grid>\r\n            <Grid item xs={12}>\r\n              <LineChart\r\n                data={{\r\n                  datasets: [{\r\n                    label: `${t('reportsPage.maxCurrent')} L1`,\r\n                    backgroundColor: decideDataColor(0),\r\n                    borderColor: decideDataColor(0),\r\n                    fill: false,\r\n                    lineTension: 0,\r\n                    data: currentAndTHDChartData.maxCurrentL1,\r\n                    pointRadius: 0\r\n                  },\r\n                  {\r\n                    label: `${t('reportsPage.maxCurrent')} L2`,\r\n                    backgroundColor: decideDataColor(1),\r\n                    borderColor: decideDataColor(1),\r\n                    fill: false,\r\n                    lineTension: 0,\r\n                    data: currentAndTHDChartData.maxCurrentL2,\r\n                    pointRadius: 0\r\n                  },\r\n                  {\r\n                    label: `${t('reportsPage.maxCurrent')} L3`,\r\n                    backgroundColor: decideDataColor(2),\r\n                    borderColor: decideDataColor(2),\r\n                    fill: false,\r\n                    lineTension: 0,\r\n                    data: currentAndTHDChartData.maxCurrentL3,\r\n                    pointRadius: 0\r\n                  },\r\n                  {\r\n                    label: `${t('reportsPage.avgCurrent')} L1`,\r\n                    backgroundColor: decideDataColor(3),\r\n                    borderColor: decideDataColor(3),\r\n                    fill: false,\r\n                    lineTension: 0,\r\n                    data: currentAndTHDChartData.avgCurrentL1,\r\n                    pointRadius: 0\r\n                  },\r\n                  {\r\n                    label: `${t('reportsPage.avgCurrent')} L2`,\r\n                    backgroundColor: decideDataColor(4),\r\n                    borderColor: decideDataColor(4),\r\n                    fill: false,\r\n                    lineTension: 0,\r\n                    data: currentAndTHDChartData.avgCurrentL2,\r\n                    pointRadius: 0\r\n                  },\r\n                  {\r\n                    label: `${t('reportsPage.avgCurrent')} L3`,\r\n                    backgroundColor: decideDataColor(5),\r\n                    borderColor: decideDataColor(5),\r\n                    fill: false,\r\n                    lineTension: 0,\r\n                    data: currentAndTHDChartData.avgCurrentL3,\r\n                    pointRadius: 0\r\n                  }]\r\n                }}\r\n                xAxisTitle={t('chart.timeAxisLabel')}\r\n                yAxisTitle={t('chart.valueAxisLabel')}\r\n                timeInterval='day'\r\n                tooltipFormat='PP'\r\n                yAxisUnit='A'\r\n              />\r\n            </Grid>\r\n            <Grid item xs={12} className={classes.sectionMargin}>\r\n              <Typography gutterBottom variant=\"h5\">{t('reportsPage.totalTHD')}</Typography>\r\n            </Grid>\r\n            <LineChart\r\n              data={{\r\n                datasets: [{\r\n                  label: `THDI L1`,\r\n                  backgroundColor: decideDataColor(0),\r\n                  borderColor: decideDataColor(0),\r\n                  fill: false,\r\n                  lineTension: 0,\r\n                  data: currentAndTHDChartData.thdiL1,\r\n                  pointRadius: 0\r\n                },\r\n                {\r\n                  label: `THDI L2`,\r\n                  backgroundColor: decideDataColor(1),\r\n                  borderColor: decideDataColor(1),\r\n                  fill: false,\r\n                  lineTension: 0,\r\n                  data: currentAndTHDChartData.thdiL2,\r\n                  pointRadius: 0\r\n                },\r\n                {\r\n                  label: `THDI L3`,\r\n                  backgroundColor: decideDataColor(2),\r\n                  borderColor: decideDataColor(2),\r\n                  fill: false,\r\n                  lineTension: 0,\r\n                  data: currentAndTHDChartData.thdiL3,\r\n                  pointRadius: 0\r\n                },\r\n                {\r\n                  label: `THDU L1`,\r\n                  backgroundColor: decideDataColor(3),\r\n                  borderColor: decideDataColor(3),\r\n                  fill: false,\r\n                  lineTension: 0,\r\n                  data: currentAndTHDChartData.thduL1,\r\n                  pointRadius: 0\r\n                },\r\n                {\r\n                  label: `THDU L2`,\r\n                  backgroundColor: decideDataColor(4),\r\n                  borderColor: decideDataColor(4),\r\n                  fill: false,\r\n                  lineTension: 0,\r\n                  data: currentAndTHDChartData.thduL2,\r\n                  pointRadius: 0\r\n                },\r\n                {\r\n                  label: `THDU L3`,\r\n                  backgroundColor: decideDataColor(5),\r\n                  borderColor: decideDataColor(5),\r\n                  fill: false,\r\n                  lineTension: 0,\r\n                  data: currentAndTHDChartData.thduL3,\r\n                  pointRadius: 0\r\n                }]\r\n              }}\r\n              xAxisTitle={t('chart.timeAxisLabel')}\r\n              yAxisTitle={t('chart.valueAxisLabel')}\r\n              timeInterval='day'\r\n              tooltipFormat='PP'\r\n              yAxisUnit='%'\r\n            />\r\n          </React.Fragment>\r\n          : null}\r\n        {directOutfeedsTHDChartDataL1 ?\r\n          <React.Fragment>\r\n            <Grid item xs={12} className={classes.sectionMargin}>\r\n              <Typography gutterBottom variant=\"h5\">{`${t('reportsPage.currentTHDInPhase')} L1`}</Typography>\r\n            </Grid>\r\n            <Grid item xs={12}>\r\n              <LineChart\r\n                data={{\r\n                  datasets: directOutfeedsTHDChartDataL1.map((dataset, index: number) => {\r\n                    return {\r\n                      label: dataset.outfeedName,\r\n                      backgroundColor: decideDataColor(index),\r\n                      borderColor: decideDataColor(index),\r\n                      fill: false,\r\n                      lineTension: 0,\r\n                      data: dataset.data,\r\n                      pointRadius: 0\r\n                    }\r\n                  })\r\n                }}\r\n                xAxisTitle={t('chart.timeAxisLabel')}\r\n                yAxisTitle={t('chart.valueAxisLabel')}\r\n                timeInterval='day'\r\n                tooltipFormat='PP'\r\n                yAxisUnit='%'\r\n              />\r\n            </Grid>\r\n          </React.Fragment>\r\n          : null}\r\n        {directOutfeedsTHDChartDataL2 ?\r\n          <React.Fragment>\r\n            <Grid item xs={12} className={classes.sectionMargin}>\r\n              <Typography gutterBottom variant=\"h5\">{`${t('reportsPage.currentTHDInPhase')} L2`}</Typography>\r\n            </Grid>\r\n            <Grid item xs={12}>\r\n              <LineChart\r\n                data={{\r\n                  datasets: directOutfeedsTHDChartDataL2.map((dataset, index: number) => {\r\n                    return {\r\n                      label: dataset.outfeedName,\r\n                      backgroundColor: decideDataColor(index),\r\n                      borderColor: decideDataColor(index),\r\n                      fill: false,\r\n                      lineTension: 0,\r\n                      data: dataset.data,\r\n                      pointRadius: 0\r\n                    }\r\n                  })\r\n                }}\r\n                xAxisTitle={t('chart.timeAxisLabel')}\r\n                yAxisTitle={t('chart.valueAxisLabel')}\r\n                timeInterval='day'\r\n                tooltipFormat='PP'\r\n                yAxisUnit='%'\r\n              />\r\n            </Grid>\r\n          </React.Fragment>\r\n          : null}\r\n        {directOutfeedsTHDChartDataL3 ?\r\n          <React.Fragment>\r\n            <Grid item xs={12} className={classes.sectionMargin}>\r\n              <Typography gutterBottom variant=\"h5\">{`${t('reportsPage.currentTHDInPhase')} L3`}</Typography>\r\n            </Grid>\r\n            <Grid item xs={12}>\r\n              <LineChart\r\n                data={{\r\n                  datasets: directOutfeedsTHDChartDataL3.map((dataset, index: number) => {\r\n                    return {\r\n                      label: dataset.outfeedName,\r\n                      backgroundColor: decideDataColor(index),\r\n                      borderColor: decideDataColor(index),\r\n                      fill: false,\r\n                      lineTension: 0,\r\n                      data: dataset.data,\r\n                      pointRadius: 0\r\n                    }\r\n                  })\r\n                }}\r\n                xAxisTitle={t('chart.timeAxisLabel')}\r\n                yAxisTitle={t('chart.valueAxisLabel')}\r\n                timeInterval='day'\r\n                tooltipFormat='PP'\r\n                yAxisUnit='%'\r\n              />\r\n            </Grid>\r\n          </React.Fragment>\r\n          : null}\r\n      </Grid>\r\n    </React.Fragment >\r\n  )\r\n}","import React, { useState, useEffect, useCallback } from 'react';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport { DatePicker } from \"@material-ui/pickers\";\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport Select from '@material-ui/core/Select';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport Button from '@material-ui/core/Button';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { RootState } from '../../reducers/Root.reducer';\r\nimport { useTranslation } from 'react-i18next';\r\nimport { getUTCDate } from '../../utilities/GetUTCDate.utility';\r\nimport { setReportsDate } from '../../actions/Reports/CommonReports.action';\r\nimport { useStyles } from '../Reports.component';\r\nimport { exportPDF } from '../../utilities/ExportPDF.utility';\r\nimport { setBackdropOpen } from '../../actions/Backdrop.action';\r\nimport { fetchTimeseriesAggregates } from '../../services/FetchTimeseriesAggregatesAPI.service';\r\nimport { parseISO, format } from 'date-fns';\r\nimport { UniversalTable } from '../UniversalTable.component';\r\nimport { LineChart } from '../LineChart.component';\r\nimport { decideDataColor } from '../../utilities/SiemensColors.utility';\r\nimport { setDeviceDataDialogOpen } from '../../actions/DeviceDataDialog.action';\r\nimport { setDeviceDataDialogDateFrom } from '../../actions/DeviceDataDialog.action';\r\nimport { setUniversalTabsNameIndex } from '../../actions/UniversalTabs.action';\r\n\r\ninterface IAggregatedParameterValues {\r\n  maxtime: string\r\n  mintime: string\r\n  maxvalue: number\r\n  minvalue: number\r\n  firstvalue: number\r\n  average: number\r\n}\r\n\r\ninterface IOutfeedAggregatedValues {\r\n  Current_L1: IAggregatedParameterValues\r\n  Current_L2: IAggregatedParameterValues\r\n  Current_L3: IAggregatedParameterValues\r\n  THD_I_L1: IAggregatedParameterValues\r\n  THD_I_L2: IAggregatedParameterValues\r\n  THD_I_L3: IAggregatedParameterValues\r\n  THD_U_L1: IAggregatedParameterValues\r\n  THD_U_L2: IAggregatedParameterValues\r\n  THD_U_L3: IAggregatedParameterValues\r\n  Voltage_L1_L2: IAggregatedParameterValues\r\n  Voltage_L1_N: IAggregatedParameterValues\r\n  Voltage_L2_L3: IAggregatedParameterValues\r\n  Voltage_L2_N: IAggregatedParameterValues\r\n  Voltage_L3_L1: IAggregatedParameterValues\r\n  Voltage_L3_N: IAggregatedParameterValues,\r\n  starttime: string\r\n}\r\n\r\nexport const OutfeedParametersTab = () => {\r\n  const { t } = useTranslation();\r\n  const dispatch = useDispatch();\r\n  const classes = useStyles();\r\n  const dateFrom = useSelector((state: RootState) => state.commonReports.dateFrom);\r\n  const dateTo = useSelector((state: RootState) => state.commonReports.dateTo);\r\n  const overview = useSelector((state: RootState) => state.overview);\r\n  const [availableSwitchboards, setAvailableSwitchboards] = useState<Array<string>>()\r\n  const [switchboard, setSwitchboard] = useState<string>('');\r\n  const [availableOutfeeds, setAvailableOutfeeds] = useState<Array<{\r\n    name: string,\r\n    assetID: string\r\n  }>>()\r\n  const [dialogData, setDialogData] = useState<{\r\n    deviceName: string,\r\n    deviceType: string,\r\n    breakerName: string,\r\n    breakerType: string,\r\n    sectionName: string,\r\n    assetID: string,\r\n    switchboardAssetID: string\r\n  }>()\r\n  const [outfeedAssetID, setOutfeedAssetID] = useState<string>();\r\n  const [outfeedAssetName, setOutfeedAssetName] = useState<string>();\r\n  const [outfeedMonthlyAggregatedData, setOutfeedMonthlyAggregatedData] = useState<IOutfeedAggregatedValues>()\r\n  const [outfeedMonthlyAggregatedDataCurrentTable, setOutfeedMonthlyAggregatedDataCurrentTable] = useState<{ rows: Array<Array<number | string | React.ReactNode>>, columns: Array<string> }>()\r\n  const [outfeedMonthlyAggregatedDataTHDITable, setOutfeedMonthlyAggregatedDataTHDITable] = useState<{ rows: Array<Array<number | string | React.ReactNode>>, columns: Array<string> }>()\r\n  const [monthly1minData, setMonthly1minData] = useState<Array<IOutfeedAggregatedValues>>()\r\n  const [currentAndTHDChartData, setCurrentAndTHDChartData] = useState<{\r\n    maxCurrentL1: Array<{ x: number, y: number }>,\r\n    maxCurrentL2: Array<{ x: number, y: number }>,\r\n    maxCurrentL3: Array<{ x: number, y: number }>,\r\n    avgCurrentL1: Array<{ x: number, y: number }>,\r\n    avgCurrentL2: Array<{ x: number, y: number }>,\r\n    avgCurrentL3: Array<{ x: number, y: number }>,\r\n    maxThdiL1: Array<{ x: number, y: number }>,\r\n    maxThdiL2: Array<{ x: number, y: number }>,\r\n    maxThdiL3: Array<{ x: number, y: number }>,\r\n    avgThdiL1: Array<{ x: number, y: number }>,\r\n    avgThdiL2: Array<{ x: number, y: number }>,\r\n    avgThdiL3: Array<{ x: number, y: number }>\r\n  }>()\r\n\r\n  const buttonOnClickOpenDialog = useCallback((date: string, tabIndex: number) => {\r\n    if (dialogData) {\r\n      dispatch(setDeviceDataDialogDateFrom(new Date(date)))\r\n      dispatch(setUniversalTabsNameIndex('BreakerDeviceDetails', tabIndex)) // (name, value)\r\n      dispatch(setDeviceDataDialogOpen({\r\n        open: true,\r\n        deviceName: dialogData.deviceName,\r\n        deviceType: dialogData.deviceType,\r\n        breakerName: dialogData.breakerName,\r\n        sectionName: dialogData.sectionName,\r\n        assetID: dialogData.assetID,\r\n        switchboardAssetID: dialogData.switchboardAssetID\r\n      }))\r\n    }\r\n  }, [dispatch, dialogData])\r\n\r\n  const renderButton = useCallback((innerHTML: string, date: string, tabIndex: number) => {\r\n    return (\r\n      <Button\r\n        onClick={() => buttonOnClickOpenDialog(date, tabIndex)}\r\n        className={classes.smallerFont}>\r\n        {innerHTML}\r\n      </Button>\r\n    )\r\n  }, [classes.smallerFont, buttonOnClickOpenDialog])\r\n\r\n  useEffect(() => { //GATHER SWITCHBOARDS AVAILABLE\r\n    const switchboards = overview.diagrams.map(diagram => diagram.name)\r\n    if (switchboards.length > 0) {\r\n      setAvailableSwitchboards(switchboards)\r\n      setSwitchboard(switchboards[0])\r\n    }\r\n  }, [overview.diagrams, setAvailableSwitchboards, setSwitchboard])\r\n\r\n  useEffect(() => { //GATHER OUTFEEDS BELONGING TO SELECTED SWITCHBOARD\r\n    if (switchboard !== '') {\r\n      const switchboardContent = overview.diagrams.find(diagram => diagram.name === switchboard)\r\n      let breakers: Array<{\r\n        name: string,\r\n        assetID: string\r\n      }> = []\r\n      if (switchboardContent) {\r\n        switchboardContent.sections.forEach(section => {\r\n          if (section.breakers) {\r\n            breakers = breakers.concat(section.breakers.map(breaker => {\r\n              return {\r\n                name: `${breaker.name} - ${breaker.tableName}`,\r\n                assetID: breaker.assetID,\r\n              }\r\n            }))\r\n          }\r\n        })\r\n      }\r\n      setAvailableOutfeeds(breakers)\r\n      setOutfeedAssetID(breakers[0].assetID)\r\n      setOutfeedAssetName(breakers[0].name)\r\n    }\r\n  }, [switchboard, overview.diagrams, setAvailableOutfeeds, setOutfeedAssetName, setOutfeedAssetID])\r\n\r\n  useEffect(() => { // FETCH MONTHLY AGGREGATED OUTFEED DATA\r\n    if (outfeedAssetID && outfeedAssetName) {\r\n      dispatch(setBackdropOpen(true))\r\n      fetchTimeseriesAggregates(outfeedAssetID, 'DATA_1_MIN', 'month', 1, dateFrom, dateTo).then(res => {\r\n        dispatch(setBackdropOpen(false))\r\n        setOutfeedMonthlyAggregatedData(res)\r\n      }).catch(err => dispatch(setBackdropOpen(false)))\r\n    }\r\n  }, [outfeedAssetID, outfeedAssetName, dateFrom, dateTo, dispatch])\r\n\r\n  useEffect(() => { // CURRENT AND THDI TABLES INITIALIZATION\r\n    if (outfeedMonthlyAggregatedData && outfeedMonthlyAggregatedData.Current_L1) {\r\n      const columnsCurrentTable = [t('reportsPage.genericParameterTitle'), t('reportsPage.averageValue'), t('reportsPage.maxValue'), t('reportsPage.minValue')]\r\n      const rowsCurrentTable = [\r\n        [`${t('deviceDataDialog.current')} L1`,\r\n        setValueUnit(setPrecision(outfeedMonthlyAggregatedData.Current_L1.average), 'A'),\r\n        <React.Fragment><p>{setValueUnit(setPrecision(outfeedMonthlyAggregatedData.Current_L1.maxvalue), 'A')}</p>\r\n          {renderButton(format(parseISO(outfeedMonthlyAggregatedData.Current_L1.maxtime), 'dd/MM/yyyy, HH:mm'), outfeedMonthlyAggregatedData.Current_L1.maxtime, 1)}\r\n        </React.Fragment>,\r\n        <React.Fragment><p>{setValueUnit(setPrecision(outfeedMonthlyAggregatedData.Current_L1.minvalue), 'A')}\r\n        </p>{renderButton(format(parseISO(outfeedMonthlyAggregatedData.Current_L1.mintime), 'dd/MM/yyyy, HH:mm'), outfeedMonthlyAggregatedData.Current_L1.mintime, 1)}\r\n        </React.Fragment>\r\n        ],\r\n        [`${t('deviceDataDialog.current')} L2`,\r\n        setValueUnit(setPrecision(outfeedMonthlyAggregatedData.Current_L2.average), 'A'),\r\n        <React.Fragment><p>{setValueUnit(setPrecision(outfeedMonthlyAggregatedData.Current_L2.maxvalue), 'A')}\r\n        </p>{renderButton(format(parseISO(outfeedMonthlyAggregatedData.Current_L2.maxtime), 'dd/MM/yyyy, HH:mm'), outfeedMonthlyAggregatedData.Current_L2.maxtime, 1)}\r\n        </React.Fragment>,\r\n        <React.Fragment><p>{setValueUnit(setPrecision(outfeedMonthlyAggregatedData.Current_L2.minvalue), 'A')}\r\n        </p>{renderButton(format(parseISO(outfeedMonthlyAggregatedData.Current_L2.mintime), 'dd/MM/yyyy, HH:mm'), outfeedMonthlyAggregatedData.Current_L2.mintime, 1)}\r\n        </React.Fragment>\r\n        ],\r\n        [`${t('deviceDataDialog.current')} L3`,\r\n        setValueUnit(setPrecision(outfeedMonthlyAggregatedData.Current_L3.average), 'A'),\r\n        <React.Fragment><p>{setValueUnit(setPrecision(outfeedMonthlyAggregatedData.Current_L3.maxvalue), 'A')}\r\n        </p>{renderButton(format(parseISO(outfeedMonthlyAggregatedData.Current_L3.maxtime), 'dd/MM/yyyy, HH:mm'), outfeedMonthlyAggregatedData.Current_L3.maxtime, 1)}\r\n        </React.Fragment>,\r\n        <React.Fragment><p>{setValueUnit(setPrecision(outfeedMonthlyAggregatedData.Current_L3.minvalue), 'A')}\r\n        </p>{renderButton(format(parseISO(outfeedMonthlyAggregatedData.Current_L3.mintime), 'dd/MM/yyyy, HH:mm'), outfeedMonthlyAggregatedData.Current_L3.mintime, 1)}\r\n        </React.Fragment>\r\n        ]\r\n      ]\r\n      const columnsTHDITable = columnsCurrentTable\r\n      const rowsTHDITable = [\r\n        ['THDI L1',\r\n          setValueUnit(setPrecision(outfeedMonthlyAggregatedData.THD_I_L1.average), '%'),\r\n          <React.Fragment><p>{setValueUnit(setPrecision(outfeedMonthlyAggregatedData.THD_I_L1.maxvalue), '%')}\r\n          </p>{renderButton(format(parseISO(outfeedMonthlyAggregatedData.THD_I_L1.maxtime), 'dd/MM/yyyy, HH:mm'), outfeedMonthlyAggregatedData.THD_I_L1.maxtime, 3)}\r\n          </React.Fragment>,\r\n          <React.Fragment><p>{setValueUnit(setPrecision(outfeedMonthlyAggregatedData.THD_I_L1.minvalue), '%')}\r\n          </p>{renderButton(format(parseISO(outfeedMonthlyAggregatedData.THD_I_L1.mintime), 'dd/MM/yyyy, HH:mm'), outfeedMonthlyAggregatedData.THD_I_L1.mintime, 3)}\r\n          </React.Fragment>\r\n        ],\r\n        ['THDI L2',\r\n          setValueUnit(setPrecision(outfeedMonthlyAggregatedData.THD_I_L2.average), '%'),\r\n          <React.Fragment><p>{setValueUnit(setPrecision(outfeedMonthlyAggregatedData.THD_I_L2.maxvalue), '%')}\r\n          </p>{renderButton(format(parseISO(outfeedMonthlyAggregatedData.THD_I_L2.maxtime), 'dd/MM/yyyy, HH:mm'), outfeedMonthlyAggregatedData.THD_I_L2.maxtime, 3)}\r\n          </React.Fragment>,\r\n          <React.Fragment><p>{setValueUnit(setPrecision(outfeedMonthlyAggregatedData.THD_I_L2.minvalue), '%')}\r\n          </p>{renderButton(format(parseISO(outfeedMonthlyAggregatedData.THD_I_L2.mintime), 'dd/MM/yyyy, HH:mm'), outfeedMonthlyAggregatedData.THD_I_L2.mintime, 3)}\r\n          </React.Fragment>\r\n        ],\r\n        ['THDI L3',\r\n          setValueUnit(setPrecision(outfeedMonthlyAggregatedData.THD_I_L3.average), '%'),\r\n          <React.Fragment><p>{setValueUnit(setPrecision(outfeedMonthlyAggregatedData.THD_I_L3.maxvalue), '%')}\r\n          </p>{renderButton(format(parseISO(outfeedMonthlyAggregatedData.THD_I_L3.maxtime), 'dd/MM/yyyy, HH:mm'), outfeedMonthlyAggregatedData.THD_I_L3.maxtime, 3)}\r\n          </React.Fragment>,\r\n          <React.Fragment><p>{setValueUnit(setPrecision(outfeedMonthlyAggregatedData.THD_I_L3.minvalue), '%')}\r\n          </p>{renderButton(format(parseISO(outfeedMonthlyAggregatedData.THD_I_L3.mintime), 'dd/MM/yyyy, HH:mm'), outfeedMonthlyAggregatedData.THD_I_L3.mintime, 3)}\r\n          </React.Fragment>\r\n        ]\r\n      ]\r\n      setOutfeedMonthlyAggregatedDataCurrentTable({ rows: rowsCurrentTable, columns: columnsCurrentTable })\r\n      setOutfeedMonthlyAggregatedDataTHDITable({ rows: rowsTHDITable, columns: columnsTHDITable })\r\n    }\r\n    else {\r\n      setOutfeedMonthlyAggregatedDataCurrentTable(undefined)\r\n      setOutfeedMonthlyAggregatedDataTHDITable(undefined)\r\n    }\r\n  }, [outfeedMonthlyAggregatedData, classes.smallerFont, t, renderButton])\r\n\r\n  useEffect(() => { //FETCH MONTHLY DATA_1_MIN AGGREGATED BY 1 DAY CHART DATA\r\n    if (outfeedAssetName && outfeedAssetID) {\r\n      dispatch(setBackdropOpen(true))\r\n      fetchTimeseriesAggregates(outfeedAssetID, 'DATA_1_MIN', 'day', 1, dateFrom, dateTo).then(res => {\r\n        dispatch(setBackdropOpen(false))\r\n        if (res.data && res.data.length > 0) {\r\n          setMonthly1minData(res.data)\r\n        }\r\n      }).catch(err => dispatch(setBackdropOpen(false)))\r\n    }\r\n  }, [dateFrom, dateTo, outfeedAssetName, outfeedAssetID, dispatch])\r\n\r\n  useEffect(() => { //SET CURRENT && THD CHARTS DATA\r\n    if (monthly1minData && monthly1minData.length > 0) {\r\n      const datasets = monthly1minData.map(dailyValue => {\r\n        return {\r\n          maxCurrentL1Data: {\r\n            x: new Date(dailyValue.starttime).valueOf(),\r\n            y: dailyValue.Current_L1 ? parseFloat((dailyValue.Current_L1.maxvalue).toFixed(3)) : 0\r\n          },\r\n          maxCurrentL2Data: {\r\n            x: new Date(dailyValue.starttime).valueOf(),\r\n            y: dailyValue.Current_L2 ? parseFloat((dailyValue.Current_L2.maxvalue).toFixed(3)) : 0\r\n          },\r\n          maxCurrentL3Data: {\r\n            x: new Date(dailyValue.starttime).valueOf(),\r\n            y: dailyValue.Current_L3 ? parseFloat((dailyValue.Current_L3.maxvalue).toFixed(3)) : 0\r\n          },\r\n          avgCurrentL1Data: {\r\n            x: new Date(dailyValue.starttime).valueOf(),\r\n            y: dailyValue.Current_L1 ? parseFloat((dailyValue.Current_L1.average).toFixed(3)) : 0\r\n          },\r\n          avgCurrentL2Data: {\r\n            x: new Date(dailyValue.starttime).valueOf(),\r\n            y: dailyValue.Current_L2 ? parseFloat((dailyValue.Current_L2.average).toFixed(3)) : 0\r\n          },\r\n          avgCurrentL3Data: {\r\n            x: new Date(dailyValue.starttime).valueOf(),\r\n            y: dailyValue.Current_L3 ? parseFloat((dailyValue.Current_L3.average).toFixed(3)) : 0\r\n          },\r\n          maxThdiL1: {\r\n            x: new Date(dailyValue.starttime).valueOf(),\r\n            y: dailyValue.THD_I_L1 ? parseFloat((dailyValue.THD_I_L1.maxvalue).toFixed(3)) : 0\r\n          },\r\n          maxThdiL2: {\r\n            x: new Date(dailyValue.starttime).valueOf(),\r\n            y: dailyValue.THD_I_L2 ? parseFloat((dailyValue.THD_I_L2.maxvalue).toFixed(3)) : 0\r\n          },\r\n          maxThdiL3: {\r\n            x: new Date(dailyValue.starttime).valueOf(),\r\n            y: dailyValue.THD_I_L3 ? parseFloat((dailyValue.THD_I_L3.maxvalue).toFixed(3)) : 0\r\n          },\r\n          avgThdiL1: {\r\n            x: new Date(dailyValue.starttime).valueOf(),\r\n            y: dailyValue.THD_U_L1 ? parseFloat((dailyValue.THD_I_L1.average).toFixed(3)) : 0\r\n          },\r\n          avgThdiL2: {\r\n            x: new Date(dailyValue.starttime).valueOf(),\r\n            y: dailyValue.THD_U_L2 ? parseFloat((dailyValue.THD_I_L2.average).toFixed(3)) : 0\r\n          },\r\n          avgThdiL3: {\r\n            x: new Date(dailyValue.starttime).valueOf(),\r\n            y: dailyValue.THD_U_L3 ? parseFloat((dailyValue.THD_I_L3.average).toFixed(3)) : 0\r\n          },\r\n        }\r\n      })\r\n      setCurrentAndTHDChartData({\r\n        maxCurrentL1: datasets.map(el => el.maxCurrentL1Data),\r\n        maxCurrentL2: datasets.map(el => el.maxCurrentL2Data),\r\n        maxCurrentL3: datasets.map(el => el.maxCurrentL3Data),\r\n        avgCurrentL1: datasets.map(el => el.avgCurrentL1Data),\r\n        avgCurrentL2: datasets.map(el => el.avgCurrentL2Data),\r\n        avgCurrentL3: datasets.map(el => el.avgCurrentL3Data),\r\n        maxThdiL1: datasets.map(el => el.maxThdiL1),\r\n        maxThdiL2: datasets.map(el => el.maxThdiL2),\r\n        maxThdiL3: datasets.map(el => el.maxThdiL3),\r\n        avgThdiL1: datasets.map(el => el.avgThdiL1),\r\n        avgThdiL2: datasets.map(el => el.avgThdiL2),\r\n        avgThdiL3: datasets.map(el => el.avgThdiL3),\r\n      })\r\n    }\r\n  }, [monthly1minData, setCurrentAndTHDChartData])\r\n\r\n  useEffect(() => { // SET SELECTED OUTFEED DIALOG DATA\r\n    if (outfeedAssetID && outfeedAssetName && switchboard) {\r\n      const switchboardContent = overview.diagrams.find(diagram => diagram.name === switchboard)\r\n      let outfeedSectionIndex = null;\r\n      let outfeedBreakerIndex = null\r\n      if (switchboardContent) {\r\n        switchboardContent.sections.forEach((section, sectionIndex: number) => {\r\n          if (section.breakers) {\r\n            section.breakers.forEach((breaker, breakerIndex: number) => {\r\n              if (breaker.assetID === outfeedAssetID) {\r\n                outfeedSectionIndex = sectionIndex;\r\n                outfeedBreakerIndex = breakerIndex\r\n              }\r\n            })\r\n          }\r\n        })\r\n      }\r\n      if (outfeedSectionIndex !== null && outfeedBreakerIndex !== null && switchboardContent) {\r\n        setDialogData({\r\n          deviceName: switchboardContent.sections[outfeedSectionIndex]?.breakers?.[outfeedBreakerIndex].tableName || '',\r\n          deviceType: switchboardContent.sections[outfeedSectionIndex]?.breakers?.[outfeedBreakerIndex].type || '',\r\n          breakerName: switchboardContent.sections[outfeedSectionIndex]?.breakers?.[outfeedBreakerIndex].name || '',\r\n          breakerType: switchboardContent.sections[outfeedSectionIndex]?.breakers?.[outfeedBreakerIndex].type || '',\r\n          sectionName: `${switchboardContent.name} ${t('deviceDataDialog.section')} ${switchboardContent.sections[outfeedSectionIndex].name}`,\r\n          assetID: switchboardContent.sections[outfeedSectionIndex]?.breakers?.[outfeedBreakerIndex].assetID || '',\r\n          switchboardAssetID: switchboardContent.assetID || ''\r\n        })\r\n      }\r\n    }\r\n  }, [outfeedAssetID, switchboard, outfeedAssetName, overview.diagrams, t])\r\n\r\n  const setPrecision = (value: number) => {\r\n    return parseFloat(value.toFixed(3))\r\n  }\r\n\r\n  const setValueUnit = (value: number, unit: string) => {\r\n    return `${value} ${unit}`\r\n  }\r\n\r\n  const handleSwitchboardChange = (event: React.ChangeEvent<{ value: unknown }>) => {\r\n    setSwitchboard(event.target.value as string);\r\n  };\r\n\r\n  const handleOutfeedChange = (event: React.ChangeEvent<{ value: unknown }>) => {\r\n    setOutfeedAssetID(event.target.value as string);\r\n    if (availableOutfeeds) {\r\n      setOutfeedAssetName(availableOutfeeds[availableOutfeeds.findIndex(el => el.assetID === event.target.value)].name)\r\n    }\r\n  };\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <Grid container spacing={2}>\r\n        <Grid item xs={12} md={3} lg={3}>\r\n          <DatePicker\r\n            cancelLabel={t('datePicker.cancelButton')}\r\n            autoOk\r\n            label={t('reportsPage.chooseMonth')}\r\n            value={dateFrom}\r\n            onChange={(date) => date ? dispatch(setReportsDate(getUTCDate(date).startOfMonth, getUTCDate(date).endOfMonth)) : null}\r\n            fullWidth\r\n            views={['month']}\r\n            format=\"MM/yyyy\"\r\n          />\r\n        </Grid>\r\n        {availableSwitchboards && availableSwitchboards.length > 0 ?\r\n          <Grid item xs={12} md={3} lg={3}>\r\n            <FormControl className={classes.select}>\r\n              <InputLabel id=\"switchboard-select-label\">{t('reportsPage.switchboardChoice')}</InputLabel>\r\n              <Select\r\n                fullWidth\r\n                labelId=\"switchboard-select-label\"\r\n                id=\"switchboard-select\"\r\n                value={switchboard}\r\n                onChange={handleSwitchboardChange}\r\n              >\r\n                {availableSwitchboards.map(switchboard => {\r\n                  return <MenuItem key={switchboard} value={switchboard}>{switchboard}</MenuItem>\r\n                })}\r\n              </Select>\r\n            </FormControl>\r\n          </Grid>\r\n          : null}\r\n        {availableOutfeeds && outfeedAssetName && outfeedAssetID && availableOutfeeds.length > 0 ?\r\n          <Grid item xs={12} md={3} lg={3}>\r\n            <FormControl className={classes.select}>\r\n              <InputLabel id=\"outfeed-select-label\">{t('reportsPage.outfeedChoice')}</InputLabel>\r\n              <Select\r\n                fullWidth\r\n                labelId=\"outfeed-select-label\"\r\n                id=\"outfeed-select\"\r\n                value={outfeedAssetID}\r\n                onChange={handleOutfeedChange}\r\n              >\r\n                {availableOutfeeds.map(outfeed => {\r\n                  return <MenuItem key={outfeed.assetID} value={outfeed.assetID}>{outfeed.name}</MenuItem>\r\n                })}\r\n              </Select>\r\n            </FormControl>\r\n          </Grid>\r\n          : null}\r\n        <Grid item xs={12} md={3} lg={3}>\r\n          <Button\r\n            fullWidth\r\n            variant=\"contained\"\r\n            color=\"primary\"\r\n            onClick={() => exportPDF()}\r\n          >\r\n            {t('reportsPage.exportToPDF')}\r\n          </Button>\r\n        </Grid>\r\n        {outfeedMonthlyAggregatedDataCurrentTable && outfeedMonthlyAggregatedDataTHDITable && outfeedAssetName ?\r\n          <React.Fragment>\r\n            <Grid item xs={12} className={classes.sectionMargin}>\r\n              <Typography gutterBottom variant=\"h5\">{t('reportsPage.singleOutfeedParameters')} {outfeedAssetName}</Typography>\r\n            </Grid>\r\n            <Grid item xs={12} lg={6}>\r\n              <Typography gutterBottom variant=\"body1\">{t('reportsPage.voltageParametersTitle')}</Typography>\r\n              <UniversalTable\r\n                columns={outfeedMonthlyAggregatedDataCurrentTable.columns}\r\n                rows={outfeedMonthlyAggregatedDataCurrentTable.rows}\r\n              />\r\n            </Grid>\r\n            <Grid item xs={12} lg={6}>\r\n              <Typography gutterBottom variant=\"body1\">{t('reportsPage.voltageParametersTitle')}</Typography>\r\n              <UniversalTable\r\n                columns={outfeedMonthlyAggregatedDataTHDITable.columns}\r\n                rows={outfeedMonthlyAggregatedDataTHDITable.rows}\r\n              />\r\n            </Grid>\r\n          </React.Fragment>\r\n          : null}\r\n        {currentAndTHDChartData ?\r\n          <React.Fragment>\r\n            <Grid item xs={12} className={classes.sectionMargin}>\r\n              <Typography gutterBottom variant=\"h5\">{t('reportsPage.currentFlows')}</Typography>\r\n            </Grid>\r\n            <Grid item xs={12}>\r\n              <LineChart\r\n                data={{\r\n                  datasets: [{\r\n                    label: `${t('reportsPage.maxCurrent')} L1`,\r\n                    backgroundColor: decideDataColor(0),\r\n                    borderColor: decideDataColor(0),\r\n                    fill: false,\r\n                    lineTension: 0,\r\n                    data: currentAndTHDChartData.maxCurrentL1,\r\n                    pointRadius: 0\r\n                  },\r\n                  {\r\n                    label: `${t('reportsPage.maxCurrent')} L2`,\r\n                    backgroundColor: decideDataColor(1),\r\n                    borderColor: decideDataColor(1),\r\n                    fill: false,\r\n                    lineTension: 0,\r\n                    data: currentAndTHDChartData.maxCurrentL2,\r\n                    pointRadius: 0\r\n                  },\r\n                  {\r\n                    label: `${t('reportsPage.maxCurrent')} L3`,\r\n                    backgroundColor: decideDataColor(2),\r\n                    borderColor: decideDataColor(2),\r\n                    fill: false,\r\n                    lineTension: 0,\r\n                    data: currentAndTHDChartData.maxCurrentL3,\r\n                    pointRadius: 0\r\n                  },\r\n                  {\r\n                    label: `${t('reportsPage.avgCurrent')} L1`,\r\n                    backgroundColor: decideDataColor(3),\r\n                    borderColor: decideDataColor(3),\r\n                    fill: false,\r\n                    lineTension: 0,\r\n                    data: currentAndTHDChartData.avgCurrentL1,\r\n                    pointRadius: 0\r\n                  },\r\n                  {\r\n                    label: `${t('reportsPage.avgCurrent')} L2`,\r\n                    backgroundColor: decideDataColor(4),\r\n                    borderColor: decideDataColor(4),\r\n                    fill: false,\r\n                    lineTension: 0,\r\n                    data: currentAndTHDChartData.avgCurrentL2,\r\n                    pointRadius: 0\r\n                  },\r\n                  {\r\n                    label: `${t('reportsPage.avgCurrent')} L3`,\r\n                    backgroundColor: decideDataColor(5),\r\n                    borderColor: decideDataColor(5),\r\n                    fill: false,\r\n                    lineTension: 0,\r\n                    data: currentAndTHDChartData.avgCurrentL3,\r\n                    pointRadius: 0\r\n                  }]\r\n                }}\r\n                xAxisTitle={t('chart.timeAxisLabel')}\r\n                yAxisTitle={t('chart.valueAxisLabel')}\r\n                timeInterval='day'\r\n                tooltipFormat='PP'\r\n                yAxisUnit='A'\r\n              />\r\n            </Grid>\r\n            <Grid item xs={12} className={classes.sectionMargin}>\r\n              <Typography gutterBottom variant=\"h5\">{t('reportsPage.totalTHD')}</Typography>\r\n            </Grid>\r\n            <LineChart\r\n              data={{\r\n                datasets: [{\r\n                  label: `${t('reportsPage.maximum')} THDI L1`,\r\n                  backgroundColor: decideDataColor(0),\r\n                  borderColor: decideDataColor(0),\r\n                  fill: false,\r\n                  lineTension: 0,\r\n                  data: currentAndTHDChartData.maxThdiL1,\r\n                  pointRadius: 0\r\n                },\r\n                {\r\n                  label: `${t('reportsPage.maximum')} THDI L2`,\r\n                  backgroundColor: decideDataColor(1),\r\n                  borderColor: decideDataColor(1),\r\n                  fill: false,\r\n                  lineTension: 0,\r\n                  data: currentAndTHDChartData.maxThdiL2,\r\n                  pointRadius: 0\r\n                },\r\n                {\r\n                  label: `${t('reportsPage.maximum')} THDI L3`,\r\n                  backgroundColor: decideDataColor(2),\r\n                  borderColor: decideDataColor(2),\r\n                  fill: false,\r\n                  lineTension: 0,\r\n                  data: currentAndTHDChartData.maxThdiL3,\r\n                  pointRadius: 0\r\n                },\r\n                {\r\n                  label: `${t('reportsPage.average')} THDI L1`,\r\n                  backgroundColor: decideDataColor(3),\r\n                  borderColor: decideDataColor(3),\r\n                  fill: false,\r\n                  lineTension: 0,\r\n                  data: currentAndTHDChartData.avgThdiL1,\r\n                  pointRadius: 0\r\n                },\r\n                {\r\n                  label: `${t('reportsPage.average')} THDI L2`,\r\n                  backgroundColor: decideDataColor(4),\r\n                  borderColor: decideDataColor(4),\r\n                  fill: false,\r\n                  lineTension: 0,\r\n                  data: currentAndTHDChartData.avgThdiL2,\r\n                  pointRadius: 0\r\n                },\r\n                {\r\n                  label: `${t('reportsPage.average')} THDI L3`,\r\n                  backgroundColor: decideDataColor(5),\r\n                  borderColor: decideDataColor(5),\r\n                  fill: false,\r\n                  lineTension: 0,\r\n                  data: currentAndTHDChartData.avgThdiL3,\r\n                  pointRadius: 0\r\n                }]\r\n              }}\r\n              xAxisTitle={t('chart.timeAxisLabel')}\r\n              yAxisTitle={t('chart.valueAxisLabel')}\r\n              timeInterval='day'\r\n              tooltipFormat='PP'\r\n              yAxisUnit='%'\r\n            />\r\n          </React.Fragment>\r\n          : null}\r\n      </Grid>\r\n    </React.Fragment>\r\n  )\r\n}","import React, { useEffect } from 'react';\r\nimport { useTranslation } from 'react-i18next';\r\nimport { UniversalTabs } from './UniversalTabs.component';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { EnergyConsumptionTab } from './Reports/EnergyConsumptionTab.component';\r\nimport { EnergyUsageProfile } from './Reports/EnergyUsageProfileTab.component';\r\nimport { IGroupStructure } from '../reducers/Reports.reducer';\r\nimport { setAssetsReportsData } from '../actions/Reports/CommonReports.action';\r\nimport { RootState } from '../reducers/Root.reducer';\r\nimport { makeStyles, Theme, createStyles } from '@material-ui/core/styles';\r\nimport { PowerDemandTab } from './Reports/PowerDemandTab.component';\r\nimport { InfeedParametersTab } from './Reports/InfeedParametersTab.component';\r\nimport { OutfeedParametersTab } from './Reports/OutfeedParametersTab.component';\r\n\r\nexport const useStyles = makeStyles((theme: Theme) =>\r\n  createStyles({\r\n    select: {\r\n      width: '100%'\r\n    },\r\n    sectionMargin: {\r\n      marginTop: theme.spacing(3)\r\n    },\r\n    smallerFont: {\r\n      fontSize: '11px'\r\n    }\r\n  }),\r\n);\r\n\r\nexport const Reports = () => {\r\n  const { t } = useTranslation();\r\n  const dispatch = useDispatch();\r\n  const reports = useSelector((state: RootState) => state.reports);\r\n\r\n  useEffect(() => {\r\n    //initialize assets taking part in reports\r\n    const gatherAssetIDs = (group: IGroupStructure, assetObj?: any): any => {\r\n      let assetsObject: any = assetObj || {}\r\n      if (group.subgroups) {\r\n        group.subgroups.forEach(subgroup => gatherAssetIDs(subgroup, assetsObject))\r\n      }\r\n      if (group.assets) {\r\n        group.assets.forEach(asset => {\r\n          Object.defineProperty(assetsObject, asset.assetID, {\r\n            value: asset,\r\n            writable: true,\r\n            enumerable: true\r\n          });\r\n        })\r\n      }\r\n      return assetsObject\r\n    }\r\n    let assetsObject: { [key: string]: any } = {}\r\n    reports.groups.forEach((group) => {\r\n      const result = gatherAssetIDs(group)\r\n      assetsObject = { ...assetsObject, ...result }\r\n    })\r\n    dispatch(setAssetsReportsData(assetsObject))\r\n  }, [dispatch, reports.groups])\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <UniversalTabs\r\n        name='Reports'\r\n        tabs={[\r\n          {\r\n            label: t('reportsPage.monthlyEnergyUsage'),\r\n            content: <EnergyConsumptionTab />\r\n          },\r\n          {\r\n            label: t('reportsPage.energyUsageProfile'),\r\n            content: <EnergyUsageProfile />\r\n          },\r\n          {\r\n            label: t('reportsPage.powers15min'),\r\n            content: <PowerDemandTab />\r\n          },\r\n          {\r\n            label: t('reportsPage.infeedParameters'),\r\n            content: <InfeedParametersTab />\r\n          },\r\n          {\r\n            label: t('reportsPage.outgoingFeederParameters'),\r\n            content: <OutfeedParametersTab />\r\n          }\r\n        ]}\r\n      />\r\n    </React.Fragment>\r\n  )\r\n}","import React from 'react';\r\nimport { Route, Switch } from 'react-router-dom';\r\nimport { Overview } from '../components/Overview.component';\r\nimport { Powermonitor } from '../components/Powermonitor.component';\r\nimport { Events } from '../components/Events.component';\r\nimport { Elevation } from '../components/Elevation.component';\r\nimport { Reports } from '../components/Reports.component';\r\n\r\nexport default function DrawerRoutes() {\r\n  return (\r\n    <Switch>\r\n      <Route path=\"/reports\"><Reports /></Route>\r\n      <Route path=\"/events\"><Events /></Route>\r\n      <Route path=\"/powermonitor\"><Powermonitor /></Route>\r\n      <Route path=\"/elevation\"><Elevation /></Route>\r\n      <Route path=\"/\"><Overview /></Route>\r\n    </Switch>\r\n  )\r\n}","export const SET_LANGUAGE_DIALOG_OPEN = 'SET_LANGUAGE_DIALOG_OPEN';\r\n\r\nexport const setLanguageDialogOpen = (open: boolean) => ({ type: SET_LANGUAGE_DIALOG_OPEN, open })","export default __webpack_public_path__ + \"static/media/sie-logo-petrol-rgb.6feef1b1.svg\";","export default __webpack_public_path__ + \"static/media/sie-logo-white-rgb.f8f4614b.svg\";","export const SET_ASSET_DATA = 'SET_ASSET_DATA';\r\nexport const setAssetData = (assetID: string, parameters: object) => ({ type: SET_ASSET_DATA, assetID: assetID, parameters: parameters })","import { IDeviceData } from '../reducers/DeviceDataDialogElevationDataSource.reducer';\r\n\r\nexport const SET_DEVICE_DATA_DIALOG = 'SET_DEVICE_DATA_DIALOG';\r\nexport const setDeviceDataDialog = (assetID: string, parameters: IDeviceData) => (\r\n  {\r\n    type: SET_DEVICE_DATA_DIALOG,\r\n    assetID,\r\n    parameters\r\n  }\r\n);","export const SET_CIRCUIT_DIAGRAM = 'SET_CIRCUIT_DIAGRAM';\r\n\r\nexport const setCircuitDiagram = (diagrams: Array<object>) => ({ type: SET_CIRCUIT_DIAGRAM, diagrams })","export const SET_ELEVATION = 'SET_ELEVATION';\r\n\r\nexport const setElevation = (elevation: Array<object>) => ({ type: SET_ELEVATION, elevation })","export const SET_REPORTS_STRUCTURE = 'SET_REPORTS_STRUCTURE';\r\nexport const SET_REPORTS_POWER_DEMAND_STRUCTURE = 'SET_REPORTS_POWER_DEMAND_STRUCTURE';\r\nexport const setReports = (reportsStructure: Array<object>) => ({ type: SET_REPORTS_STRUCTURE, reportsStructure })\r\nexport const setReportsPowerDemand = (powerDemandStructure: object) => ({ type: SET_REPORTS_POWER_DEMAND_STRUCTURE, powerDemandStructure })","export const SET_USER_DATA = 'SET_USER_DATA';\r\nexport const setUserData = (appId: string, userId: string, plantName: string) => ({ type: SET_USER_DATA, appId, userId, plantName })","import React, { useEffect, useState } from 'react';\r\nimport clsx from 'clsx';\r\nimport { makeStyles, createStyles, Theme, useTheme } from '@material-ui/core/styles';\r\nimport Drawer from '@material-ui/core/Drawer';\r\nimport List from '@material-ui/core/List';\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\nimport Divider from '@material-ui/core/Divider';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport ChevronLeftIcon from '@material-ui/icons/ChevronLeft';\r\nimport ChevronRightIcon from '@material-ui/icons/ChevronRight';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport LanguageIcon from \"@material-ui/icons/Language\";\r\nimport { Link, useLocation } from \"react-router-dom\";\r\nimport BottomNavigation from '@material-ui/core/BottomNavigation';\r\nimport BottomNavigationAction from '@material-ui/core/BottomNavigationAction';\r\nimport AccountTreeIcon from '@material-ui/icons/AccountTree';\r\nimport EventNoteIcon from '@material-ui/icons/EventNote';\r\nimport DrawerRoutes from '../routes/Drawer.routes';\r\nimport { useTranslation } from 'react-i18next';\r\nimport StorageIcon from '@material-ui/icons/Storage';\r\nimport MultilineChartIcon from '@material-ui/icons/MultilineChart';\r\nimport BarChartIcon from '@material-ui/icons/BarChart';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { setLanguageDialogOpen } from '../actions/LanguageDialog.action';\r\nimport siemensLogoPetrol from '../assets/sie-logo-petrol-rgb.svg';\r\nimport siemensLogoWhite from '../assets/sie-logo-white-rgb.svg';\r\nimport Brightness2Icon from '@material-ui/icons/Brightness2';\r\nimport Brightness7Icon from '@material-ui/icons/Brightness7';\r\nimport { RootState } from '../reducers/Root.reducer';\r\nimport createWorker from \"workerize-loader!../workers/TimeseriesData.worker\"; //eslint-disable-line import/no-webpack-loader-syntax\r\nimport * as Worker from \"../workers/TimeseriesData.worker\";\r\nimport { setAssetData } from '../actions/SystemTopologyData.action';\r\nimport { setDeviceDataDialog } from '../actions/deviceDataDialogElevationDataSource.action';\r\nimport { fetchMe } from '../services/CustomAPI.service';\r\nimport { setCircuitDiagram } from '../actions/Overview.action';\r\nimport { setElevation } from '../actions/Elevation.action';\r\nimport { setReports, setReportsPowerDemand } from '../actions/Reports.action';\r\nimport { setUserData } from '../actions/Userdata.action';\r\n\r\nconst drawerWidth = 240;\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n  createStyles({\r\n    root: {\r\n      display: 'flex',\r\n      flexGrow: 1,\r\n    },\r\n    drawer: {\r\n      width: drawerWidth,\r\n      flexShrink: 0,\r\n      whiteSpace: 'nowrap',\r\n      [`${theme.breakpoints.down('sm')} and (orientation: portrait)`]: {\r\n        display: 'none'\r\n      },\r\n      [`${theme.breakpoints.down('sm')} and (orientation: landscape)`]: {\r\n        display: 'flex'\r\n      },\r\n    },\r\n    drawerOpen: {\r\n      width: drawerWidth,\r\n      transition: theme.transitions.create('width', {\r\n        easing: theme.transitions.easing.sharp,\r\n        duration: theme.transitions.duration.enteringScreen,\r\n      }),\r\n    },\r\n    drawerClose: {\r\n      transition: theme.transitions.create('width', {\r\n        easing: theme.transitions.easing.sharp,\r\n        duration: theme.transitions.duration.leavingScreen,\r\n      }),\r\n      overflowX: 'hidden',\r\n      width: theme.spacing(7) + 1,\r\n    },\r\n    content: {\r\n      flexGrow: 1,\r\n      width: `calc(100% - ${drawerWidth}px)`,\r\n      padding: theme.spacing(3),\r\n      [`${theme.breakpoints.down('sm')} and (orientation: portrait)`]: {\r\n        paddingBottom: theme.spacing(10),\r\n        paddingTop: theme.spacing(1),\r\n        paddingLeft: theme.spacing(1),\r\n        paddingRight: theme.spacing(1)\r\n      },\r\n    },\r\n    bottomNavi: {\r\n      position: 'fixed',\r\n      marginTop: '50px',\r\n      bottom: 0,\r\n      width: '100%',\r\n      borderTop: '1px solid rgba(0, 0, 0, 0.12)',\r\n      [`${theme.breakpoints.down('sm')} and (orientation: portrait)`]: {\r\n        display: 'flex'\r\n      },\r\n      [`${theme.breakpoints.down('sm')} and (orientation: landscape)`]: {\r\n        display: 'none'\r\n      },\r\n      [`${theme.breakpoints.up('md')}`]: {\r\n        display: 'none'\r\n      },\r\n      textAlign: 'center',\r\n    },\r\n    bottomNaviElement: {\r\n      minWidth: '0px'\r\n    },\r\n    siemensLogo: {\r\n      height: '17px',\r\n      verticalAlign: 'middle',\r\n      marginLeft: theme.spacing(2)\r\n    },\r\n    expandDrawerArrow: {\r\n      minWidth: '56px'\r\n    }\r\n  }));\r\n\r\ninterface IDrawer {\r\n  onThemeChange(): void\r\n}\r\n\r\nconst TimeseriesWorker = createWorker<typeof Worker>();\r\n\r\nexport const MiniDrawer: React.FC<IDrawer> = ({ onThemeChange }) => {\r\n  const classes = useStyles();\r\n  const [drawerOpen, setDrawerOpen] = useState<boolean>(true);\r\n  const [bottomNaviValue, setBottomNaviValue] = useState<string | null>(null);\r\n  const location = useLocation();\r\n  const { t } = useTranslation();\r\n  const dispatch = useDispatch();\r\n  const theme = useTheme();\r\n  const overview = useSelector((state: RootState) => state.overview);\r\n\r\n  useEffect(() => {\r\n    setBottomNaviValue(location.pathname)\r\n  }, [location])\r\n\r\n  useEffect(() => {\r\n    //initialize frontend structure from backend\r\n    fetchMe().then((res: {\r\n      appData: object,\r\n      plantsData: {\r\n        [key: string]: {\r\n          data: object,\r\n          config: {\r\n            overview: Array<object>,\r\n            elevation: Array<object>,\r\n            reports: Array<object>,\r\n            reportsPowerDemand: object\r\n          },\r\n          appId: string\r\n        }\r\n      },\r\n      userData: {\r\n        appId: string,\r\n        userId: string\r\n      }\r\n    }) => {\r\n      dispatch(setCircuitDiagram(Object.values(res.plantsData)[0].config.overview))\r\n      dispatch(setElevation(Object.values(res.plantsData)[0].config.elevation))\r\n      dispatch(setReports(Object.values(res.plantsData)[0].config.reports))\r\n      dispatch(setReportsPowerDemand(Object.values(res.plantsData)[0].config.reportsPowerDemand))\r\n      dispatch(setUserData(res.userData.appId, res.userData.userId, Object.keys(res.plantsData)[0]))\r\n    })\r\n  }, [dispatch])\r\n\r\n  useEffect(() => {\r\n    const handleSetAssetData = (message: MessageEvent) => {\r\n      if (message.data.length > 0) {\r\n        message.data.forEach((device: any) => {\r\n          dispatch(setAssetData(device.assetID, device))\r\n        })\r\n      }\r\n    }\r\n    TimeseriesWorker.addEventListener(\"message\", handleSetAssetData)\r\n    return () => {\r\n      TimeseriesWorker.removeEventListener(\"message\", handleSetAssetData)\r\n      TimeseriesWorker.terminate()\r\n    }\r\n  }, [dispatch])\r\n\r\n  useEffect(() => {\r\n    const deviceData: Array<{\r\n      assetID: string,\r\n      breakerName: string,\r\n      deviceName: string,\r\n      deviceType: string,\r\n      sectionName: string\r\n    }> = []\r\n    overview.diagrams.forEach((diagram) => {\r\n      diagram.sections.forEach((section) => {\r\n        section.infeeds?.forEach((infeed) => {\r\n          if (infeed.breaker.assetID !== '') {\r\n            deviceData.push(\r\n              {\r\n                assetID: infeed.breaker.assetID,\r\n                breakerName: infeed.breaker.name,\r\n                deviceName: infeed.tableName,\r\n                deviceType: infeed.breaker.type,\r\n                sectionName: section.name\r\n              })\r\n          }\r\n        })\r\n        section.breakers?.forEach((breaker) => {\r\n          deviceData.push(\r\n            {\r\n              assetID: breaker.assetID,\r\n              breakerName: breaker.name,\r\n              deviceName: breaker.tableName,\r\n              deviceType: breaker.type,\r\n              sectionName: section.name\r\n            })\r\n        })\r\n        if (section.coupling) {\r\n          deviceData.push(\r\n            {\r\n              assetID: section.coupling.assetID,\r\n              breakerName: section.coupling.name,\r\n              deviceName: '',\r\n              deviceType: section.coupling.type,\r\n              sectionName: section.name\r\n            })\r\n        }\r\n      })\r\n    })\r\n    TimeseriesWorker.postMessage({ deviceData })\r\n  }, [overview.diagrams, dispatch])\r\n\r\n  //initialize diagram structure\r\n  useEffect(() => {\r\n    overview.diagrams.forEach((diagram) => {\r\n      diagram.sections.forEach((section) => {\r\n        section.infeeds?.forEach((infeed) => {\r\n          dispatch(setDeviceDataDialog(`${diagram.name}-${infeed.breaker.assetID}`, {\r\n            infeedName: infeed.name,\r\n            infeedTableName: infeed.tableName,\r\n            infeedType: infeed.type,\r\n            breakerName: infeed.breaker.name,\r\n            breakerType: infeed.breaker.type,\r\n            breakerAssetID: infeed.breaker.assetID,\r\n            sectionName: section.name,\r\n            switchboardName: diagram.name\r\n          }))\r\n        })\r\n        section.breakers?.forEach((breaker) => {\r\n          dispatch(setDeviceDataDialog(`${diagram.name}-${breaker.assetID}`, {\r\n            breakerName: breaker.name,\r\n            breakerType: breaker.type,\r\n            breakerAssetID: breaker.assetID,\r\n            breakerTableName: breaker.tableName,\r\n            sectionName: section.name,\r\n            switchboardName: diagram.name\r\n          }))\r\n        })\r\n        if (section.coupling) {\r\n          dispatch(setDeviceDataDialog(`${diagram.name}-${section.coupling.assetID}`, {\r\n            breakerName: section.coupling.name,\r\n            breakerType: section.coupling.type,\r\n            breakerAssetID: section.coupling.assetID,\r\n            sectionName: section.name,\r\n            switchboardName: diagram.name\r\n          }))\r\n        }\r\n      }) //diagram loop end\r\n    }) //diagrams loop end\r\n  }, [dispatch, overview.diagrams])\r\n\r\n  const handleDrawerOpen = () => {\r\n    setDrawerOpen(true);\r\n  };\r\n\r\n  const handleDrawerClose = () => {\r\n    setDrawerOpen(false);\r\n  };\r\n\r\n  const handleThemeChange = () => {\r\n    onThemeChange()\r\n  }\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <React.Fragment>\r\n        <CssBaseline />\r\n        <Drawer\r\n          variant=\"permanent\"\r\n          className={clsx(classes.drawer, {\r\n            [classes.drawerOpen]: drawerOpen,\r\n            [classes.drawerClose]: !drawerOpen,\r\n          })}\r\n          classes={{\r\n            paper: clsx({\r\n              [classes.drawerOpen]: drawerOpen,\r\n              [classes.drawerClose]: !drawerOpen,\r\n            }),\r\n          }}\r\n        >\r\n          <div>\r\n            <IconButton onClick={drawerOpen ? handleDrawerClose : handleDrawerOpen} className={classes.expandDrawerArrow}>\r\n              {!drawerOpen ? <ChevronRightIcon /> : <ChevronLeftIcon />}\r\n            </IconButton>\r\n            <img src={theme.palette.type === 'dark' ? siemensLogoWhite : siemensLogoPetrol} alt='siemens logo' className={classes.siemensLogo} />\r\n          </div>\r\n          <Divider />\r\n          <List>\r\n            <ListItem button component={Link} to=\"/\" selected={location.pathname === \"/\"} >\r\n              <ListItemIcon>\r\n                <AccountTreeIcon />\r\n              </ListItemIcon>\r\n              <ListItemText primary={t('drawer.overviewRouteName')} />\r\n            </ListItem>\r\n            <ListItem button component={Link} to=\"/elevation\" selected={location.pathname === \"/elevation\"} >\r\n              <ListItemIcon>\r\n                <StorageIcon />\r\n              </ListItemIcon>\r\n              <ListItemText primary={t('drawer.elevationRouteName')} />\r\n            </ListItem>\r\n            <ListItem button component={Link} to=\"/events\" selected={location.pathname === \"/events\"} >\r\n              <ListItemIcon>\r\n                <EventNoteIcon />\r\n              </ListItemIcon>\r\n              <ListItemText primary={t('drawer.eventsRouteName')} />\r\n            </ListItem>\r\n            <ListItem button component={Link} to=\"/powermonitor\" selected={location.pathname === \"/powermonitor\"} >\r\n              <ListItemIcon>\r\n                <MultilineChartIcon />\r\n              </ListItemIcon>\r\n              <ListItemText primary={t('drawer.powermonitorRouteName')} />\r\n            </ListItem>\r\n            <ListItem button component={Link} to=\"/reports\" selected={location.pathname === \"/reports\"} >\r\n              <ListItemIcon>\r\n                <BarChartIcon />\r\n              </ListItemIcon>\r\n              <ListItemText primary={t('drawer.reportsRouteName')} />\r\n            </ListItem>\r\n            <Divider />\r\n            <ListItem button onClick={() => dispatch(setLanguageDialogOpen(true))}>\r\n              <ListItemIcon>\r\n                <LanguageIcon />\r\n              </ListItemIcon>\r\n              <ListItemText primary={t('drawer.languageSelectionName')} />\r\n            </ListItem>\r\n            <ListItem button onClick={() => handleThemeChange()}>\r\n              <ListItemIcon>\r\n                {theme.palette.type === 'dark' ? <Brightness7Icon /> : <Brightness2Icon />}\r\n              </ListItemIcon>\r\n              <ListItemText primary={theme.palette.type === 'dark' ? t('drawer.toggleLightMode') : t('drawer.toggleDarkMode')} />\r\n            </ListItem>\r\n          </List>\r\n        </Drawer>\r\n        <main className={classes.content}>\r\n          <DrawerRoutes />\r\n        </main>\r\n        <BottomNavigation\r\n          showLabels={false}\r\n          className={classes.bottomNavi}\r\n          value={bottomNaviValue}\r\n        >\r\n          <BottomNavigationAction className={classes.bottomNaviElement} value=\"/\" icon={<AccountTreeIcon />} component={Link} to=\"/\" />\r\n          <BottomNavigationAction className={classes.bottomNaviElement} value=\"/elevation\" icon={<StorageIcon />} component={Link} to=\"/elevation\" />\r\n          <BottomNavigationAction className={classes.bottomNaviElement} value=\"/events\" icon={<EventNoteIcon />} component={Link} to=\"/events\" />\r\n          <BottomNavigationAction className={classes.bottomNaviElement} value=\"/powermonitor\" icon={<MultilineChartIcon />} component={Link} to=\"/powermonitor\" />\r\n          <BottomNavigationAction className={classes.bottomNaviElement} value=\"/reports\" icon={<BarChartIcon />} component={Link} to=\"/reports\" />\r\n          <BottomNavigationAction className={classes.bottomNaviElement} icon={<LanguageIcon />} onClick={() => dispatch(setLanguageDialogOpen(true))} />\r\n        </BottomNavigation>\r\n      </React.Fragment>\r\n    </div>\r\n  );\r\n}","import i18n from \"i18next\";\r\nimport { initReactI18next } from \"react-i18next\";\r\nimport LanguageDetector from 'i18next-browser-languagedetector';\r\nimport { resources } from './translations';\r\n  \r\nconst options = {\r\n    // order and from where user language should be detected\r\n    order: ['querystring', 'cookie', 'localStorage', 'navigator', 'htmlTag', 'path', 'subdomain'],\r\n  \r\n    // keys or params to lookup language from\r\n    lookupQuerystring: 'lng',\r\n    lookupCookie: 'i18next',\r\n    lookupLocalStorage: 'i18nextLng',\r\n    lookupFromPathIndex: 0,\r\n    lookupFromSubdomainIndex: 0,\r\n  \r\n    // cache user language on\r\n    caches: ['localStorage', 'cookie'],\r\n    excludeCacheFor: ['cimode'], // languages to not persist (cookie, localStorage)\r\n  \r\n    // optional htmlTag with lang attribute, the default is:\r\n    htmlTag: document.documentElement,\r\n  \r\n    // only detect languages that are in the whitelist\r\n    checkWhitelist: true,\r\n  \r\n    // fallback to a similar whitelist language\r\n    // Example 1: Browser language is 'es'\r\n    // if 'es' is not found in whitelist, first fallback to any whitelist language that starts with 'es-', then fallback to fallbackLng ('es' -> 'es-*' -> fallbackLng)\r\n    // Example 2: Browser language is 'es-MX'\r\n    // if 'es-MX' is not found in whitelist, first fallback to 'es', then fallback to 'es-*', then fallback to fallbackLng ('es-MX' -> 'es' -> 'es-*' -> fallbackLng)\r\n    checkForSimilarInWhitelist: false,\r\n  \r\n    // optional set cookie options, reference:[MDN Set-Cookie docs](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Set-Cookie)\r\n    cookieOptions: {path:'/'}\r\n  }\r\n\r\ni18n\r\n    .use(LanguageDetector)\r\n    .use(initReactI18next) // passes i18n down to react-i18next\r\n    .init({\r\n        resources,\r\n        detection: options,\r\n        fallbackLng: \"en\",\r\n\r\n        keySeparator: \".\", // we do not use keys in form messages.welcome\r\n\r\n        interpolation: {\r\n            escapeValue: false // react already safes from xss\r\n        }\r\n    });\r\n\r\nexport default i18n;","export const resources = {\r\n  en: {\r\n    translation: {\r\n      drawer: {\r\n        overviewRouteName: \"System topology\",\r\n        elevationRouteName: \"Elevation\",\r\n        eventsRouteName: \"Events\",\r\n        powermonitorRouteName: \"Load monitoring\",\r\n        reportsRouteName: \"Reports\",\r\n        languageSelectionName: \"Language\",\r\n        toggleDarkMode: \"Night mode\",\r\n        toggleLightMode: \"Day mode\"\r\n      },\r\n      languageDialog: {\r\n        label: \"Choose application language\",\r\n        polishLanguage: \"Polish\",\r\n        englishLanguage: \"English\"\r\n      },\r\n      eventsPage: {\r\n        title: \"Events\",\r\n        dateFromLabel: \"From\",\r\n        dateToLabel: \"To\",\r\n        severity: \"Severity\",\r\n        time: \"Time\",\r\n        event: \"Event\",\r\n        switchboard: \"Switchboard\",\r\n        device: \"Device\",\r\n        allDevices: \"All\",\r\n        refreshButton: \"Refresh\",\r\n        startDate: \"Start date\",\r\n        endDate: \"End date\"\r\n      },\r\n      powermonitorPage: {\r\n        loadMonitoringTab: \"Load monitoring\",\r\n        settingsTab: \"Settings\",\r\n        energyUsage: \"Energy consumption [kWh]\",\r\n        warningThreshold: \"Warning threshold\",\r\n        alarmThreshold: \"Alarm threshold\",\r\n        transformersLosses: \"Transformers power loss\",\r\n        loadMonitorActive: \"Load monitoring enabled\",\r\n        sendEventsActive: \"Sending events enabled\",\r\n        sendEmailsActive: \"Sending emails enabled\",\r\n        notificationsActive: \"Notifications enabled\",\r\n        saveButton: \"Save\",\r\n        resetButton: \"Reset\",\r\n        predictedPower: \"Predicted power\",\r\n        current15minInterval: \"Current 15-min interval\",\r\n        tableValueColumn: \"Value\",\r\n        tableTimeColumn: \"Time\",\r\n        mailList: \"Mail list\",\r\n        addAddressButton: \"Add address\",\r\n        notifications: \"Notifications\",\r\n        notificationsRegister: \"Subscribe\",\r\n        notificationsDeregister: \"Unsubscribe\",\r\n        energyUsageLabel: \"Energy consumption\",\r\n        predictedUsageLabel: \"Predicted consumption\",\r\n        emailAddress: \"Email address\",\r\n        language: \"Language\",\r\n        addEmailLabel: \"Add email address\",\r\n        confirm: \"Confirm\",\r\n        cancel: \"Cancel\",\r\n        powermonitorInactive: \"Powermonitor is inactive\"\r\n      },\r\n      overviewPage: {\r\n        switchboard: \"Switchboard\"\r\n      },\r\n      elevationPage: {\r\n        title: \"Elevation\"\r\n      },\r\n      reportsPage: {\r\n        title: \"Reports\",\r\n        monthlyEnergyUsage: \"Monthly Energy consumption\",\r\n        energyUsageProfile: \"Energy consumption profile\",\r\n        powers15min: \"Power demand\",\r\n        infeedParameters: \"Infeed parameters\",\r\n        outgoingFeederParameters: \"Outfeed parameters\",\r\n        chooseMonth: \"Choose month\",\r\n        exportToPDF: \"PDF Export\",\r\n        exportToCSV: \"CSV Export\",\r\n        activeEnergyUsage: \"Active Energy consumption\",\r\n        groupName: \"Group name\",\r\n        totalValue: \"Total\",\r\n        activeEnergyImport: \"Active energy\",\r\n        reactiveEnergyExport: \"Reactive energy export\",\r\n        reactiveEnergyImport: \"Reactive energy import\",\r\n        totalActiveEnergyImport: \"Total Active energy import [kWh]\",\r\n        totalReactiveEnergyImport: \"Total Reactive energy import [kvar]\",\r\n        totalReactiveEnergyExport: \"Total Reactive energy export [kvar]\",\r\n        averageActivePower15Min: \"Average active power 15-min\",\r\n        alarmThreshold: \"Alarm threshold\",\r\n        warningThreshold: \"Warning threshold\",\r\n        powerExceedings: \"Power exceedings\",\r\n        tableColumnTime: \"Time\",\r\n        tableColumnPower: \"Power [kW]\",\r\n        tableColumnExceeding: \"Exceeding [kW]\",\r\n        tableColumnAlarmWarning: \"Alarm/warning\",\r\n        alarm: \"Alarm\",\r\n        warning: \"Warning\",\r\n        outfeedAverageActivePower: \"Outfeed average active power 15-min\",\r\n        othersDataTitle: \"Other\",\r\n        transformerChoice: \"Choose transformer\",\r\n        energyChoice: \"Energy\",\r\n        genericParameterTitle: \"Parameter\",\r\n        averageValue: \"Average value\",\r\n        maxValue: \"Max value\",\r\n        minValue: \"Min value\",\r\n        currentParametersTitle: \"Current parameters\",\r\n        voltageParametersTitle: \"Voltage parameters\",\r\n        powerSupplyFrom: \"Power supply from:\",\r\n        reactiveImportPowerFactor: \"Reactive Import Power Factor\",\r\n        reactiveExportPowerFactor: \"Reactive Export Power Factor\",\r\n        powerFactorChartTitle: \"Power Factor characteristics\",\r\n        maxCurrent: \"Max current\",\r\n        avgCurrent: \"Average current\",\r\n        currentFlows: \"Current flows\",\r\n        totalTHD: \"Total THD\",\r\n        currentTHDInPhase: \"Current distortion of outfeeds in\",\r\n        switchboardChoice: \"Choose switchboard\",\r\n        outfeedChoice: \"Choose outfeed\",\r\n        singleOutfeedParameters: \"Parameters of\",\r\n        maximum: \"Max\",\r\n        average: \"Average\",\r\n      },\r\n      datePicker: {\r\n        cancelButton: \"Cancel\",\r\n      },\r\n      deviceDataDialog: {\r\n        //tabs\r\n        overviewTab: \"Overview\",\r\n        currentTab: \"Current\",\r\n        powerTab: \"Power\",\r\n        THDITab: \"THD I\",\r\n        voltageLNTab: \"L-N Voltage\",\r\n        voltageLLTab: \"L-L Voltage\",\r\n        THDUTab: \"THD U\",\r\n        //parameters & state\r\n        switchingDeviceStateTitle: \"Switching device state\",\r\n        breakerClosed: \"Closed\",\r\n        breakerOpen: \"Open\",\r\n        breakerTripped: \"Tripped\",\r\n        breakerDrawnOut: \"Drawn out\",\r\n        lastTripTitle: \"Last trip\",\r\n        noTrippingOrAcknowledged: \"No tripping operation or last tripping operation acknowledged\",\r\n        current: \"Current\",\r\n        power: \"Power\",\r\n        activePower: \"Active Power\",\r\n        reactivePower: \"Reactive Power\",\r\n        apparentPower: \"Apparent Power\",\r\n        powerFactor: \"Power factor\",\r\n        voltageLL: \"L-L Voltage\",\r\n        voltageLN: \"L-N Voltage\",\r\n        voltageL1L2: \"L1-L2 Voltage\",\r\n        voltageL2L3: \"L2-L3 Voltage\",\r\n        voltageL3L1: \"L3-L1 Voltage\",\r\n        voltageL1N: \"L1-N Voltage\",\r\n        voltageL2N: \"L2-N Voltage\",\r\n        voltageL3N: \"L3-N Voltage\",\r\n        generatorReady: \"Ready\",\r\n        generatorStopped: \"Stop\",\r\n        generatorState: \"Generator state\",\r\n        showChartTooltip: \"Show chart\",\r\n        section: \"Section\",\r\n        events: \"Events\",\r\n        circuitBreaker: \"Circuit breaker\",\r\n        activePowerExport: \"Active power export\",\r\n        activePowerImport: \"Active power import\",\r\n        reactivePowerExport: \"Reactive power export\",\r\n        reactivePowerImport: \"Reactive power import\",\r\n        exportTitle: \"Export\"\r\n      },\r\n      tableWithSort: {\r\n        labelRowsPerPage: \"Rows per page\",\r\n        labelDisplayedRows: \"of\"\r\n      },\r\n      chart: {\r\n        timeAxisLabel: \"Time\",\r\n        valueAxisLabel: \"Value\"\r\n      },\r\n      svgCompartment: {\r\n        noConnection: 'No conn.'\r\n      }\r\n    }\r\n  },\r\n  pl: {\r\n    translation: {\r\n      drawer: {\r\n        overviewRouteName: \"Topologia systemu\",\r\n        elevationRouteName: \"Elewacja\",\r\n        eventsRouteName: \"Zdarzenia\",\r\n        powermonitorRouteName: \"Strażnik mocy\",\r\n        reportsRouteName: \"Raporty\",\r\n        languageSelectionName: \"Język\",\r\n        toggleDarkMode: \"Tryb nocny\",\r\n        toggleLightMode: \"Tryb dzienny\"\r\n      },\r\n      languageDialog: {\r\n        label: \"Wybierz język aplikacji\",\r\n        polishLanguage: \"Polski\",\r\n        englishLanguage: \"Angielski\"\r\n      },\r\n      eventsPage: {\r\n        title: \"Zdarzenia\",\r\n        dateFromLabel: \"Od\",\r\n        dateToLabel: \"Do\",\r\n        severity: \"Ważność\",\r\n        time: \"Czas\",\r\n        event: \"Zdarzenie\",\r\n        switchboard: \"Rozdzielnica\",\r\n        device: \"Urządzenie\",\r\n        allDevices: \"Wszystko\",\r\n        refreshButton: \"Odśwież\",\r\n        startDate: \"Data początkowa\",\r\n        endDate: \"Data końcowa\"\r\n      },\r\n      powermonitorPage: {\r\n        loadMonitoringTab: \"Strażnik mocy\",\r\n        settingsTab: \"Ustawienia\",\r\n        energyUsage: \"Zużycie energii [kWh]\",\r\n        warningThreshold: \"Próg ostrzeżenia\",\r\n        alarmThreshold: \"Próg alarmowy\",\r\n        transformersLosses: \"Straty mocy na transformatorach\",\r\n        loadMonitorActive: \"Strażnik mocy włączony\",\r\n        sendEventsActive: \"Wysyłanie zdarzeń włączone\",\r\n        sendEmailsActive: \"Wysyłanie emaili włączone\",\r\n        notificationsActive: \"Powiadomienia włączone\",\r\n        saveButton: \"Zapisz\",\r\n        resetButton: \"Resetuj\",\r\n        predictedPower: \"Przewidywana moc\",\r\n        current15minInterval: \"Aktualny okres 15-min\",\r\n        tableValueColumn: \"Wartość\",\r\n        tableTimeColumn: \"Czas\",\r\n        mailList: \"Lista mailowa\",\r\n        addAddressButton: \"Dodaj adres\",\r\n        notifications: \"Powiadomienia\",\r\n        notificationsRegister: \"Subskrybuj\",\r\n        notificationsDeregister: \"Wyrejestruj\",\r\n        energyUsageLabel: \"Zużycie energii\",\r\n        predictedUsageLabel: \"Przewidywane zużycie\",\r\n        emailAddress: \"Adres email\",\r\n        language: \"Język\",\r\n        addEmailLabel: \"Dodaj adres email\",\r\n        confirm: \"Potwierdź\",\r\n        cancel: \"Anuluj\",\r\n        powermonitorInactive: \"Strażnik mocy nieaktywny\"\r\n      },\r\n      overviewPage: {\r\n        switchboard: \"Rozdzielnica\"\r\n      },\r\n      elevationPage: {\r\n        title: \"Elewacja\"\r\n      },\r\n      reportsPage: {\r\n        title: \"Raporty\",\r\n        monthlyEnergyUsage: \"Miesięczne zużycie energii\",\r\n        energyUsageProfile: \"Profil zużycia energii\",\r\n        powers15min: \"Moce 15-minutowe\",\r\n        infeedParameters: \"Parametry zasilania\",\r\n        outgoingFeederParameters: \"Parametry odbiorów\",\r\n        chooseMonth: \"Wybierz miesiąc\",\r\n        exportToPDF: \"Eksport PDF\",\r\n        exportToCSV: \"Eksport CSV\",\r\n        activeEnergyUsage: \"Zużycie energii czynnej\",\r\n        groupName: \"Nazwa grupy\",\r\n        totalValue: \"Razem\",\r\n        activeEnergyImport: \"Energia czynna\",\r\n        reactiveEnergyExport: \"Energia bierna pojemnościowa\",\r\n        reactiveEnergyImport: \"Energia bierna indukcyjna\",\r\n        totalActiveEnergyImport: \"Całościowe zużycie energii czynnej [kWh]\",\r\n        totalReactiveEnergyImport: \"Całościowe zużycie energii biernej indukcyjnej [kvar]\",\r\n        totalReactiveEnergyExport: \"Całościowe oddanie energii biernej pojemnościowej [kvar]\",\r\n        averageActivePower15Min: \"Przebieg średniej mocy 15-minutowej\",\r\n        alarmThreshold: \"Granica alarmu\",\r\n        warningThreshold: \"Granica ostrzeżenia\",\r\n        powerExceedings: \"Przekroczenia mocy\",\r\n        tableColumnTime: \"Czas\",\r\n        tableColumnPower: \"Moc [kW]\",\r\n        tableColumnExceeding: \"Przekroczenie [kW]\",\r\n        tableColumnAlarmWarning: \"Alarm/ostrzeżenie\",\r\n        alarm: \"Alarm\",\r\n        warning: \"Ostrzeżenie\",\r\n        outfeedAverageActivePower: \"Przebieg średniej mocy 15-minutowej odbiorów\",\r\n        othersDataTitle: \"Pozostałe\",\r\n        transformerChoice: \"Wybierz transformator\",\r\n        energyChoice: \"Energia\",\r\n        genericParameterTitle: \"Parametr\",\r\n        averageValue: \"Wartość średnia\",\r\n        maxValue: \"Wartość maksymalna\",\r\n        minValue: \"Wartość minimalna\",\r\n        currentParametersTitle: \"Parametry prądu\",\r\n        voltageParametersTitle: \"Parametry napięcia\",\r\n        powerSupplyFrom: \"Zasilanie z:\",\r\n        reactiveImportPowerFactor: \"Współczynnik mocy biernej indukcyjnej\",\r\n        reactiveExportPowerFactor: \"Współczynnik mocy biernej pojemnościowej\",\r\n        powerFactorChartTitle: \"Przebieg współczynnika mocy\",\r\n        maxCurrent: \"Prąd maksymalny\",\r\n        avgCurrent: \"Prąd średni\",\r\n        currentFlows: \"Przepływ prądów\",\r\n        totalTHD: \"Całkowite odkształcenia zasilania\",\r\n        currentTHDInPhase: \"Odkształcenie prądu odbiorów w fazie\",\r\n        switchboardChoice: \"Wybierz rozdzielnicę\",\r\n        outfeedChoice: \"Wybierz odbiór\",\r\n        singleOutfeedParameters: \"Parametry odbioru\",\r\n        maximum: \"Maks.\",\r\n        average: \"Średnie\"\r\n      },\r\n      datePicker: {\r\n        cancelButton: \"Anuluj\",\r\n      },\r\n      deviceDataDialog: {\r\n        //tabs\r\n        overviewTab: \"Przegląd\",\r\n        currentTab: \"Prąd\",\r\n        powerTab: \"Moc\",\r\n        THDITab: \"THD I\",\r\n        voltageLNTab: \"Napięcie L-N\",\r\n        voltageLLTab: \"Napięcie L-L\",\r\n        THDUTab: \"THD U\",\r\n        //parameters & state\r\n        switchingDeviceStateTitle: \"Stan wyłącznika\",\r\n        breakerClosed: \"Załączony\",\r\n        breakerOpen: \"Wyłączony\",\r\n        breakerTripped: \"Wyzwolony\",\r\n        breakerDrawnOut: \"Wysunięty\",\r\n        lastTripTitle: \"Ostatnie wyzwolenie\",\r\n        noTrippingOrAcknowledged: \"Brak operacji wyzwolenia lub ostatnie wyzwolenie potwierdzone\",\r\n        current: \"Prąd\",\r\n        power: \"Moc\",\r\n        activePower: \"Moc czynna\",\r\n        reactivePower: \"Moc bierna\",\r\n        apparentPower: \"Moc pozorna\",\r\n        powerFactor: \"Współczynnik mocy\",\r\n        voltageLL: \"Napięcie L-L\",\r\n        voltageLN: \"Napięcie L-N\",\r\n        voltageL1L2: \"Napięcie L1-L2\",\r\n        voltageL2L3: \"Napięcie L2-L3\",\r\n        voltageL3L1: \"Napięcie L3-L1\",\r\n        voltageL1N: \"Napięcie L1-N\",\r\n        voltageL2N: \"Napięcie L2-N\",\r\n        voltageL3N: \"Napięcie L3-N\",\r\n        generatorReady: \"Gotowy\",\r\n        generatorStopped: \"Stop\",\r\n        generatorState: \"Stan generatora\",\r\n        showChartTooltip: \"Pokaż wykres\",\r\n        section: \"Sekcja\",\r\n        events: \"Zdarzenia\",\r\n        circuitBreaker: \"Wyłącznik\",\r\n        activePowerExport: \"Moc czynna oddana do sieci\",\r\n        activePowerImport: \"Moc czynna pobrana z sieci\",\r\n        reactivePowerExport: \"Moc bierna pojemnościowa\",\r\n        reactivePowerImport: \"Moc bierna indukcyjna\",\r\n        exportTitle: \"Eksportuj\"\r\n      },\r\n      tableWithSort: {\r\n        labelRowsPerPage: \"Wierszy na stronę\",\r\n        labelDisplayedRows: \"z\"\r\n      },\r\n      chart: {\r\n        timeAxisLabel: \"Czas\",\r\n        valueAxisLabel: \"Wartość\"\r\n      },\r\n      svgCompartment: {\r\n        noConnection: 'Brak poł.'\r\n      }\r\n    }\r\n  }\r\n};\r\n","import { SET_UNIVERSAL_TABS_NAME_INDEX } from '../actions/UniversalTabs.action';\r\n\r\ninterface IUniversalTabs {\r\n  type: string,\r\n  name: string,\r\n  index: number\r\n}\r\n\r\nconst initialState = {\r\n  //tabs instances added dynamically\r\n}\r\n\r\nexport const UniversalTabsReducer = (state: any = initialState, action: IUniversalTabs) => {\r\n  switch (action.type) {\r\n    case SET_UNIVERSAL_TABS_NAME_INDEX:\r\n      return {\r\n        ...state,\r\n        [action.name]: action.index\r\n      }\r\n    default:\r\n      return state\r\n  }\r\n}","import { SET_LANGUAGE_DIALOG_OPEN } from '../actions/LanguageDialog.action';\r\n\r\ninterface ILanguageDialog {\r\n  type: string,\r\n  open: boolean\r\n}\r\n\r\nconst initialState = {\r\n  open: false,\r\n}\r\n\r\nexport const LanguageDialogReducer = (state = initialState, action: ILanguageDialog) => {\r\n  switch (action.type) {\r\n    case SET_LANGUAGE_DIALOG_OPEN:\r\n      return {\r\n        ...state,\r\n        open: action.open\r\n      }\r\n    default:\r\n      return state\r\n  }\r\n}","import { SET_DEVICE_DATA_DIALOG_OPEN, SET_DEVICE_DATA_DIALOG_DATE_FROM } from '../actions/DeviceDataDialog.action';\r\n\r\nexport interface IDeviceDataDialog {\r\n  open: boolean,\r\n  deviceName: string,\r\n  deviceType: string,\r\n  breakerName: string,\r\n  sectionName: string,\r\n  assetID: string,\r\n  switchboardAssetID: string\r\n}\r\n\r\ninterface IDate extends IDeviceDataDialog {\r\n  dateFrom: Date\r\n}\r\n\r\ninterface IDeviceDataDialogReducer extends IDate {\r\n  type: string\r\n}\r\n\r\nconst initialState = {\r\n  open: false,\r\n  deviceName: '',\r\n  deviceType: '',\r\n  breakerName: '',\r\n  sectionName: '',\r\n  assetID: '',\r\n  switchboardAssetID: '',\r\n  // for charts\r\n  dateFrom: new Date()\r\n}\r\n\r\nexport const DeviceDataDialogReducer = (state = initialState, action: IDeviceDataDialogReducer) => {\r\n  switch (action.type) {\r\n    case SET_DEVICE_DATA_DIALOG_OPEN:\r\n      return {\r\n        ...state,\r\n        open: action.open,\r\n        deviceName: action.deviceName,\r\n        deviceType: action.deviceType,\r\n        breakerName: action.breakerName,\r\n        sectionName: action.sectionName,\r\n        assetID: action.assetID,\r\n        switchboardAssetID: action.switchboardAssetID\r\n      }\r\n    case SET_DEVICE_DATA_DIALOG_DATE_FROM:\r\n      return {\r\n        ...state,\r\n        dateFrom: action.dateFrom\r\n      }\r\n    default:\r\n      return state\r\n  }\r\n}","import { SET_BACKDROP_OPEN } from '../actions/Backdrop.action';\r\n\r\ninterface IBackdrop {\r\n  type: string,\r\n  open: boolean\r\n}\r\n\r\nconst initialState = {\r\n  open: false,\r\n}\r\n\r\nexport const BackdropReducer = (state = initialState, action: IBackdrop) => {\r\n  switch (action.type) {\r\n    case SET_BACKDROP_OPEN:\r\n      return {\r\n        ...state,\r\n        open: action.open\r\n      }\r\n    default:\r\n      return state\r\n  }\r\n}","import { SET_ELEVATION } from '../actions/Elevation.action';\r\n\r\ninterface IElevation {\r\n  type: string,\r\n  elevation: Array<{\r\n    name: string,\r\n    assetID?: string,\r\n    panels: Array<{\r\n      name: string,\r\n      compartments: Array<{\r\n        rowSpan: number,\r\n        columns: Array<{\r\n          type: string,\r\n          name: string,\r\n          assetID: string | false,\r\n          nonInteractive: boolean\r\n        }>\r\n      }>\r\n    }>\r\n  }>\r\n}\r\n\r\nexport interface IElevationSchema {\r\n  switchboards: Array<{\r\n    name: string,\r\n    assetID?: string,\r\n    panels: Array<{\r\n      name: string,\r\n      compartments: Array<{\r\n        rowSpan: number,\r\n        columns: Array<{\r\n          type: string,\r\n          name: string,\r\n          assetID: string | false,\r\n          nonInteractive: boolean\r\n        }>\r\n      }>\r\n    }>\r\n  }>\r\n}\r\n\r\nconst initialState: IElevationSchema = {\r\n  switchboards: []\r\n}\r\n\r\nexport const ElevationReducer = (state = initialState, action: IElevation) => {\r\n  switch (action.type) {\r\n    case SET_ELEVATION:\r\n      return {\r\n        ...state,\r\n        switchboards: action.elevation\r\n      }\r\n    default:\r\n      return state\r\n  }\r\n}","import { SET_CIRCUIT_DIAGRAM } from '../actions/Overview.action';\r\n\r\ninterface IDiagramAction {\r\n  type: string,\r\n  diagrams: Array<{\r\n    name: string,\r\n    assetID?: string,\r\n    sections: Array<{\r\n      name: string,\r\n      infeeds?: Array<{\r\n        name: string,\r\n        tableName: string,\r\n        type: string,\r\n        breaker: {\r\n          name: string,\r\n          type: string,\r\n          assetID: string,\r\n          state?: number,\r\n          tableName?: string\r\n        }\r\n      }>,\r\n      breakers?: Array<{\r\n        name: string,\r\n        tableName: string,\r\n        type: string,\r\n        assetID: string\r\n        nextSwitchboardName?: string,\r\n        state?: number\r\n      }>,\r\n      coupling?: {\r\n        name: string,\r\n        type: string,\r\n        assetID: string,\r\n        tableName?: string\r\n      }\r\n    }>\r\n  }>\r\n}\r\n\r\nexport interface IDiagramStructure {\r\n  diagrams: Array<{\r\n    name: string,\r\n    assetID?: string,\r\n    sections: Array<{\r\n      name: string,\r\n      infeeds?: Array<{\r\n        name: string,\r\n        tableName: string,\r\n        type: string,\r\n        breaker: {\r\n          name: string,\r\n          type: string,\r\n          assetID: string,\r\n          state?: number,\r\n          tableName?: string\r\n        }\r\n      }>,\r\n      breakers?: Array<{\r\n        name: string,\r\n        tableName: string,\r\n        type: string,\r\n        assetID: string\r\n        nextSwitchboardName?: string,\r\n        state?: number\r\n      }>,\r\n      coupling?: {\r\n        name: string,\r\n        type: string,\r\n        assetID: string,\r\n        tableName?: string\r\n      }\r\n    }>\r\n  }>\r\n}\r\n\r\nconst initialState: IDiagramStructure = {\r\n  diagrams: []\r\n}\r\n\r\nexport const OverviewReducer = (state = initialState, action: IDiagramAction) => {\r\n  switch (action.type) {\r\n    case SET_CIRCUIT_DIAGRAM:\r\n      return {\r\n        ...state,\r\n        diagrams: action.diagrams\r\n      }\r\n    default:\r\n      return state\r\n  }\r\n}","import { SET_ASSET_DATA } from '../actions/SystemTopologyData.action';\r\n\r\nexport interface IDeviceParameters1Min {\r\n  Active_Energy_Export: number\r\n  Active_Energy_Export_qc: number\r\n  Active_Energy_Import: number\r\n  Active_Energy_Import_qc: number\r\n  Breaker_State: number\r\n  Breaker_State_qc: number\r\n  Connection_State: number\r\n  Connection_State_qc: number\r\n  Current_L1: number\r\n  Current_L1_qc: number\r\n  Current_L2: number\r\n  Current_L2_qc: number\r\n  Current_L3: number\r\n  Current_L3_qc: number\r\n  Reactive_Energy_Export: number\r\n  Reactive_Energy_Export_qc: number\r\n  Reactive_Energy_Import: number\r\n  Reactive_Energy_Import_qc: number\r\n  THD_I_L1: number\r\n  THD_I_L1_qc: number\r\n  THD_I_L2: number\r\n  THD_I_L2_qc: number\r\n  THD_I_L3: number\r\n  THD_I_L3_qc: number\r\n  THD_U_L1: number\r\n  THD_U_L1_qc: number\r\n  THD_U_L2: number\r\n  THD_U_L2_qc: number\r\n  THD_U_L3: number\r\n  THD_U_L3_qc: number\r\n  Voltage_L1_L2: number\r\n  Voltage_L1_L2_qc: number\r\n  Voltage_L1_N: number\r\n  Voltage_L1_N_qc: number\r\n  Voltage_L2_L3: number\r\n  Voltage_L2_L3_qc: number\r\n  Voltage_L2_N: number\r\n  Voltage_L2_N_qc: number\r\n  Voltage_L3_L1: number\r\n  Voltage_L3_L1_qc: number\r\n  Voltage_L3_N: number\r\n  Voltage_L3_N_qc: number\r\n  _time: string\r\n}\r\n\r\ninterface IDeviceParameters15Min extends IDeviceParameters1Min {\r\n  Active_Power_Export: number\r\n  Active_Power_Export_qc: number\r\n  Active_Power_Import: number\r\n  Active_Power_Import_qc: number\r\n  Reactive_Power_Export: number\r\n  Reactive_Power_Export_qc: number\r\n  Reactive_Power_Import: number\r\n  Reactive_Power_Import_qc: number\r\n}\r\n\r\ninterface IDeviceParameters extends IDeviceParameters15Min {\r\n  assetID: string,\r\n  breakerName: string,\r\n  deviceName: string,\r\n  deviceType: string,\r\n  sectionName: string,\r\n}\r\n\r\ninterface ISystemTopologyData {\r\n  type: string,\r\n  assetID: string,\r\n  parameters: IDeviceParameters\r\n}\r\n\r\ninterface DeviceID {\r\n  [index: string]: IDeviceParameters\r\n}\r\n\r\nconst initialState: DeviceID = {}\r\n\r\nexport const SystemTopologyData = (state = initialState, action: ISystemTopologyData) => {\r\n  switch (action.type) {\r\n    case SET_ASSET_DATA:\r\n      return {\r\n        ...state,\r\n        [action.assetID]: {\r\n          ...state[action.assetID],\r\n          ...action.parameters\r\n        }\r\n      }\r\n    default:\r\n      return state\r\n  }\r\n}","import { SET_DEVICE_DATA_DIALOG } from '../actions/deviceDataDialogElevationDataSource.action';\r\n\r\nexport interface IDeviceData {\r\n  infeedName?: string,\r\n  infeedTableName?: string,\r\n  infeedType?: string,\r\n  breakerName: string,\r\n  breakerType: string,\r\n  breakerAssetID: string,\r\n  sectionName: string,\r\n  switchboardName: string,\r\n  breakerTableName?: string\r\n}\r\n\r\ninterface IDeviceDataDialog {\r\n  type: string,\r\n  assetID: string,\r\n  parameters: IDeviceData\r\n}\r\n\r\ninterface IDeviceID {\r\n  [index: string]: IDeviceData\r\n}\r\n\r\nconst initialState: IDeviceID = {}\r\n\r\nexport const DeviceDataDialogElevationDataSource = (state = initialState, action: IDeviceDataDialog) => {\r\n  switch (action.type) {\r\n    case SET_DEVICE_DATA_DIALOG:\r\n      return {\r\n        ...state,\r\n        [action.assetID]: {\r\n          ...state[action.assetID],\r\n          ...action.parameters\r\n        }\r\n      }\r\n    default:\r\n      return state\r\n  }\r\n}","import { SET_EVENTS } from '../actions/Events.action';\r\n\r\nexport interface IEvent {\r\n  description: string,\r\n  entityId: string, //switchboard assetID\r\n  severity: number,\r\n  source: string, //circuit breaker assetID\r\n  timestamp: string\r\n}\r\n\r\ninterface IEventsAction {\r\n  type: string,\r\n  switchboardName: string,\r\n  events: Array<IEvent>\r\n}\r\n\r\ninterface IEvents {\r\n  [switchboardName: string]: Array<IEvent>\r\n}\r\n\r\nconst initialState: IEvents = {\r\n}\r\n\r\nexport const EventsReducer = (state = initialState, action: IEventsAction) => {\r\n  switch (action.type) {\r\n    case SET_EVENTS:\r\n      return {\r\n        ...state,\r\n        [action.switchboardName]: action.events\r\n      }\r\n    default:\r\n      return state\r\n  }\r\n}","import { SET_REPORTS_STRUCTURE } from '../actions/Reports.action';\r\n\r\ninterface IReports {\r\n  type: string,\r\n  reportsStructure: Array<IGroupStructure>\r\n}\r\n\r\nexport interface IGroupsStructure {\r\n  groups: Array<IGroupStructure>\r\n}\r\n\r\nexport interface IGroupStructure {\r\n  name: string,\r\n  plName: string,\r\n  enName: string,\r\n  subgroups?: Array<IGroupStructure>\r\n  assets?: Array<IGroupElementStructure>\r\n}\r\n\r\nexport interface IGroupElementStructure {\r\n  feederName: string,\r\n  feederDescription: string,\r\n  assetID: string,\r\n}\r\n\r\nconst initialState: IGroupsStructure = {\r\n  groups: []\r\n}\r\n\r\nexport const ReportsReducer = (state = initialState, action: IReports) => {\r\n  switch (action.type) {\r\n    case SET_REPORTS_STRUCTURE:\r\n      return {\r\n        ...state,\r\n        groups: action.reportsStructure\r\n      }\r\n    default:\r\n      return state\r\n  }\r\n}","import {\r\n  SET_ASSETS_REPORTS_DATA,\r\n  SET_REPORTS_DATE\r\n} from '../../actions/Reports/CommonReports.action';\r\nimport { startOfMonth, add } from 'date-fns'\r\n\r\ninterface ICommonReportsReducerAction {\r\n  type: string,\r\n  assetID: string,\r\n  assetData: any,\r\n  dateFrom: string,\r\n  dateTo: string\r\n}\r\n\r\ninterface IAssetIDProperty extends ICommonReportsDate {\r\n  assets: {\r\n    [assetID: string]: any\r\n  }\r\n}\r\n\r\ninterface ICommonReportsDate {\r\n  dateFrom: string,\r\n  dateTo: string\r\n}\r\n\r\nconst initialState: IAssetIDProperty = {\r\n  assets: {},\r\n  dateFrom: startOfMonth(new Date()).toISOString(),\r\n  dateTo: startOfMonth(add((new Date()), {\r\n    months: 1\r\n  })).toISOString()\r\n}\r\n\r\nexport const CommonReportsReducer = (state = initialState, action: ICommonReportsReducerAction) => {\r\n  switch (action.type) {\r\n    case SET_ASSETS_REPORTS_DATA:\r\n      return {\r\n        ...state,\r\n        assets: {\r\n          ...action.assetData\r\n        }\r\n      }\r\n    case SET_REPORTS_DATE:\r\n      return {\r\n        ...state,\r\n        dateFrom: action.dateFrom,\r\n        dateTo: action.dateTo\r\n      }\r\n\r\n    default:\r\n      return state\r\n  }\r\n}","import {\r\n  SET_REPORTS_POWER_DEMAND_STRUCTURE\r\n} from '../../actions/Reports.action';\r\n\r\ninterface ICommonReportsReducerAction {\r\n  type: string,\r\n  powerDemandStructure: IPowerDemandTabState\r\n}\r\n\r\ninterface IPowerDemandTabState {\r\n  infeeds: Array<string> | undefined,\r\n  outfeeds: Array<string> | undefined,\r\n  warningThreshold: number | undefined,\r\n  alarmThreshold: number | undefined,\r\n  transformerLosses: number | undefined\r\n}\r\n\r\nconst initialState: IPowerDemandTabState = {\r\n  infeeds: undefined,\r\n  outfeeds: undefined,\r\n  warningThreshold: undefined,\r\n  alarmThreshold: undefined,\r\n  transformerLosses: undefined\r\n}\r\n\r\nexport const PowerDemandTabReducer = (state = initialState, action: ICommonReportsReducerAction) => {\r\n  switch (action.type) {\r\n    case SET_REPORTS_POWER_DEMAND_STRUCTURE:\r\n      return {\r\n        ...state,\r\n        ...action.powerDemandStructure\r\n      }\r\n    default:\r\n      return state\r\n  }\r\n}","import { SET_USER_DATA } from '../actions/Userdata.action';\r\n\r\ninterface IUserdataAction {\r\n  type: string,\r\n  appId: string,\r\n  userId: string,\r\n  plantName: string\r\n}\r\n\r\nconst initialState = {\r\n  appId: '',\r\n  userId: '',\r\n  plantName: ''\r\n}\r\n\r\nexport const UserdataReducer = (state = initialState, action: IUserdataAction) => {\r\n  switch (action.type) {\r\n    case SET_USER_DATA:\r\n      return {\r\n        ...state,\r\n        appId: action.appId,\r\n        userId: action.userId,\r\n        plantName: action.plantName\r\n      }\r\n    default:\r\n      return state\r\n  }\r\n}","import { SET_POWERMONITOR_CONFIG } from '../actions/Powermonitor.action';\r\n\r\nexport interface IPowermonitorConfig {\r\n  appId: string,\r\n  plantId: string,\r\n  sampleTime: number,\r\n  serviceType: string,\r\n  enabled: boolean,\r\n  tenant: string,\r\n  assetIds: Array<{\r\n    assetId: string,\r\n    aspectId: string,\r\n    variableName: string,\r\n    multiplier: number\r\n  }>\r\n  powerLosses: number,\r\n  alertLimit: number,\r\n  warningLimit: number,\r\n  mailingList: Array<{\r\n    email: string,\r\n    language: string\r\n  }>,\r\n  interval: number,\r\n  id: string\r\n}\r\n\r\ninterface IPowermonitorAction {\r\n  type: string,\r\n  config: IPowermonitorConfig\r\n}\r\n\r\nconst initialState: IPowermonitorConfig = {\r\n  appId: '',\r\n  plantId: '',\r\n  sampleTime: 0,\r\n  serviceType: '',\r\n  enabled: false,\r\n  tenant: '',\r\n  assetIds: [],\r\n  powerLosses: 0,\r\n  alertLimit: 0,\r\n  warningLimit: 0,\r\n  mailingList: [],\r\n  interval: 0,\r\n  id: ''\r\n}\r\n\r\nexport const PowermonitorReducer = (state = initialState, action: IPowermonitorAction) => {\r\n  switch (action.type) {\r\n    case SET_POWERMONITOR_CONFIG:\r\n      return {\r\n        ...state,\r\n        appId: action.config.appId,\r\n        plantId: action.config.plantId,\r\n        sampleTime: action.config.sampleTime,\r\n        serviceType: action.config.serviceType,\r\n        enabled: action.config.enabled,\r\n        tenant: action.config.tenant,\r\n        assetIds: action.config.assetIds,\r\n        powerLosses: action.config.powerLosses,\r\n        alertLimit: action.config.alertLimit,\r\n        warningLimit: action.config.warningLimit,\r\n        mailingList: action.config.mailingList,\r\n        interval: action.config.interval,\r\n        id: action.config.id\r\n      }\r\n    default:\r\n      return state\r\n  }\r\n}","import { combineReducers } from 'redux';\r\nimport { UniversalTabsReducer } from './UniversalTabs.reducer';\r\nimport { LanguageDialogReducer } from './LanguageDialog.reducer';\r\nimport { DeviceDataDialogReducer } from './DeviceDataDialog.reducer';\r\nimport { BackdropReducer } from './Backdrop.reducer';\r\nimport { ElevationReducer } from './Elevation.reducer';\r\nimport { OverviewReducer } from './Overview.reducer';\r\nimport { SystemTopologyData } from './SystemTopologyData.reducer';\r\nimport { DeviceDataDialogElevationDataSource } from './DeviceDataDialogElevationDataSource.reducer';\r\nimport { EventsReducer } from './Events.reducer';\r\nimport { ReportsReducer } from './Reports.reducer';\r\nimport { CommonReportsReducer } from './Reports/CommonReports.reducer';\r\nimport { PowerDemandTabReducer } from './Reports/PowerDemandTab.reducer';\r\nimport { UserdataReducer } from './Userdata.reducer';\r\nimport { PowermonitorReducer } from './Powermonitor.reducer';\r\n\r\nexport const rootReducer = combineReducers({\r\n  universalTabs: UniversalTabsReducer,\r\n  languageDialog: LanguageDialogReducer,\r\n  deviceDataDialog: DeviceDataDialogReducer,\r\n  deviceDataDialogElevationDataSource: DeviceDataDialogElevationDataSource,\r\n  backdrop: BackdropReducer,\r\n  elevation: ElevationReducer,\r\n  overview: OverviewReducer,\r\n  systemTopologyData: SystemTopologyData,\r\n  events: EventsReducer,\r\n  reports: ReportsReducer,\r\n  commonReports: CommonReportsReducer,\r\n  powerDemandTab: PowerDemandTabReducer,\r\n  userData: UserdataReducer,\r\n  powermonitor: PowermonitorReducer\r\n})\r\n\r\nexport type RootState = ReturnType<typeof rootReducer>","import React from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Avatar from '@material-ui/core/Avatar';\r\nimport List from '@material-ui/core/List';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemAvatar from '@material-ui/core/ListItemAvatar';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport { blue } from '@material-ui/core/colors';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { setLanguageDialogOpen } from '../actions/LanguageDialog.action';\r\nimport { useTranslation } from 'react-i18next';\r\nimport { RootState } from '../reducers/Root.reducer';\r\n\r\nconst useStyles = makeStyles({\r\n  avatar: {\r\n    backgroundColor: blue[100],\r\n    color: blue[600],\r\n  },\r\n  title: {\r\n    textAlign: 'center'\r\n  }\r\n});\r\n\r\nexport const LanguageDialog = () => {\r\n  const classes = useStyles();\r\n  const { t, i18n } = useTranslation();\r\n  const open = useSelector((state: RootState) => state.languageDialog.open);\r\n  const dispatch = useDispatch();\r\n\r\n  const chooseLanguage = (language: string) => {\r\n    dispatch(setLanguageDialogOpen(false))\r\n    i18n.changeLanguage(language)\r\n  }\r\n\r\n  return (\r\n    <Dialog onClose={() => dispatch(setLanguageDialogOpen(false))} aria-labelledby=\"simple-dialog-title\" open={open} fullWidth={true} maxWidth=\"sm\">\r\n      <DialogTitle className={classes.title} id=\"simple-dialog-title\">{t('languageDialog.label')}</DialogTitle>\r\n      <List>\r\n        <ListItem button onClick={() => chooseLanguage('pl')}>\r\n          <ListItemAvatar>\r\n            <Avatar className={classes.avatar}>\r\n              PL\r\n            </Avatar>\r\n          </ListItemAvatar>\r\n          <ListItemText primary={t('languageDialog.polishLanguage')} />\r\n        </ListItem>\r\n        <ListItem button onClick={() => chooseLanguage('en')}>\r\n          <ListItemAvatar>\r\n            <Avatar className={classes.avatar}>\r\n              EN\r\n            </Avatar>\r\n          </ListItemAvatar>\r\n          <ListItemText primary={t('languageDialog.englishLanguage')} />\r\n        </ListItem>\r\n      </List>\r\n    </Dialog>\r\n  )\r\n}","import React from 'react';\r\nimport Backdrop from '@material-ui/core/Backdrop';\r\nimport CircularProgress from '@material-ui/core/CircularProgress';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport { useSelector } from 'react-redux';\r\nimport { RootState } from '../reducers/Root.reducer';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  backdrop: {\r\n    zIndex: theme.zIndex.drawer + 1,\r\n    color: '#fff',\r\n  },\r\n}));\r\n\r\nexport const SimpleBackdrop: React.FC = () => {\r\n  const classes = useStyles();\r\n  const open = useSelector((state: RootState) => state.backdrop.open);\r\n\r\n  return (\r\n    <Backdrop className={classes.backdrop} open={open}>\r\n      <CircularProgress color=\"inherit\" />\r\n    </Backdrop>\r\n  );\r\n}\r\n","import React, { useEffect } from 'react';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport { makeStyles, Theme, createStyles } from '@material-ui/core/styles';\r\nimport { LineChart } from '../LineChart.component';\r\nimport { DatePicker } from \"@material-ui/pickers\";\r\nimport { useTranslation } from 'react-i18next';\r\nimport { fetchTimeseriesInterval } from '../../services/FetchTimeseriesAPI.service';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { RootState } from '../../reducers/Root.reducer';\r\nimport { setDeviceDataDialogDateFrom } from '../../actions/DeviceDataDialog.action';\r\nimport { decideDataColor } from '../../utilities/SiemensColors.utility';\r\n\r\ninterface ICurrent {\r\n  Current_L1: number\r\n  Current_L2: number\r\n  Current_L3: number\r\n  _time: string\r\n}\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n  createStyles({\r\n    timePickersContainer: {\r\n      marginTop: theme.spacing(2),\r\n      paddingTop: theme.spacing(2),\r\n      paddingBottom: theme.spacing(2),\r\n    }\r\n  }),\r\n);\r\n\r\nexport const CurrentTab = () => {\r\n  const classes = useStyles();\r\n  const { t } = useTranslation();\r\n  const [l1, setL1] = React.useState<Array<{ x: number | Date, y: number }>>([{ x: 0, y: 0 }])\r\n  const [l2, setL2] = React.useState<Array<{ x: number | Date, y: number }>>([{ x: 0, y: 0 }])\r\n  const [l3, setL3] = React.useState<Array<{ x: number | Date, y: number }>>([{ x: 0, y: 0 }])\r\n  const assetID = useSelector((state: RootState) => state.deviceDataDialog.assetID);\r\n  const dateFrom = useSelector((state: RootState) => state.deviceDataDialog.dateFrom);\r\n  const dispatch = useDispatch();\r\n\r\n  useEffect(() => {\r\n    if (dateFrom) {\r\n      fetchTimeseriesInterval(assetID, 1, new Date(new Date(dateFrom.setHours(0, 0, 0, 0))).toISOString(), new Date(new Date(dateFrom.setHours(23, 59, 59, 999))).toISOString(), 'Current_L1,Current_L2,Current_L3').then(res => {\r\n        const pointsL1: Array<{ x: number, y: number }> = []\r\n        const pointsL2: Array<{ x: number, y: number }> = []\r\n        const pointsL3: Array<{ x: number, y: number }> = []\r\n        res.forEach((point: ICurrent) => {\r\n          pointsL1.push({\r\n            x: new Date(point._time).valueOf(),\r\n            y: point.Current_L1\r\n          })\r\n          pointsL2.push({\r\n            x: new Date(point._time).valueOf(),\r\n            y: point.Current_L2\r\n          })\r\n          pointsL3.push({\r\n            x: new Date(point._time).valueOf(),\r\n            y: point.Current_L3\r\n          })\r\n        })\r\n        setL1(pointsL1)\r\n        setL2(pointsL2)\r\n        setL3(pointsL3)\r\n      })\r\n    }\r\n  }, [dateFrom, assetID])\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <Grid container spacing={2}>\r\n        <Grid item xs={12}>\r\n          <LineChart\r\n            data={{\r\n              datasets: [\r\n                {\r\n                  label: `${t('deviceDataDialog.current')} L1 [A]`,\r\n                  backgroundColor: decideDataColor(0),\r\n                  borderColor: decideDataColor(0),\r\n                  fill: false,\r\n                  lineTension: 0,\r\n                  data: l1,\r\n                  pointRadius: 0\r\n                },\r\n                {\r\n                  label: `${t('deviceDataDialog.current')} L2 [A]`,\r\n                  backgroundColor: decideDataColor(1),\r\n                  borderColor: decideDataColor(1),\r\n                  fill: false,\r\n                  lineTension: 0,\r\n                  data: l2,\r\n                  pointRadius: 0\r\n                },\r\n                {\r\n                  label: `${t('deviceDataDialog.current')} L3 [A]`,\r\n                  backgroundColor: decideDataColor(2),\r\n                  borderColor: decideDataColor(2),\r\n                  fill: false,\r\n                  lineTension: 0,\r\n                  data: l3,\r\n                  pointRadius: 0\r\n                }\r\n              ]\r\n            }}\r\n          />\r\n        </Grid>\r\n      </Grid>\r\n      <Grid container spacing={2} className={classes.timePickersContainer}>\r\n        <Grid item xs={12} md={6}>\r\n          <DatePicker\r\n            variant='static'\r\n            autoOk\r\n            label={t('eventsPage.dateFromLabel')}\r\n            value={dateFrom}\r\n            onChange={(date) => dispatch(setDeviceDataDialogDateFrom(date))}\r\n            fullWidth\r\n            disableFuture\r\n          />\r\n        </Grid>\r\n      </Grid>\r\n    </React.Fragment>\r\n  )\r\n}","import React from 'react';\r\nimport { lineLength, useStyles } from '../Overview.component';\r\n\r\ninterface IOverviewTabCircuitBreakerSVG {\r\n  x: number,\r\n  y: number,\r\n  closed: boolean,\r\n  name: string,\r\n  sectionName?: string,\r\n  outgoingFeederName?: string,\r\n  bottomSection?: boolean,\r\n  topSection?: boolean\r\n}\r\n\r\nexport const OverviewTabCircuitBreakerSVG: React.FC<IOverviewTabCircuitBreakerSVG> = (\r\n  {\r\n    x,\r\n    y,\r\n    closed,\r\n    name,\r\n    sectionName,\r\n    outgoingFeederName,\r\n    bottomSection,\r\n    topSection\r\n  }\r\n) => {\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <React.Fragment>\r\n      {/* top line */}\r\n      <line\r\n        x1={x}\r\n        y1={y}\r\n        x2={x}\r\n        y2={y + lineLength}\r\n        className={classes.lineStyle}\r\n      />\r\n      {/* 'X' symbol - 2 * 90deg crossed lines*/}\r\n      <line\r\n        x1={x}\r\n        y1={y + 0.75 * lineLength}\r\n        x2={x}\r\n        y2={y + 1.25 * lineLength}\r\n        className={classes.lineStyle}\r\n        transform={`rotate(45 ${x} ${y + lineLength})`}\r\n      />\r\n      <line\r\n        x1={x}\r\n        y1={y + 0.75 * lineLength}\r\n        x2={x}\r\n        y2={y + 1.25 * lineLength}\r\n        className={classes.lineStyle}\r\n        transform={`rotate(-45 ${x} ${y + lineLength})`}\r\n      />\r\n      {/* breaker's rotating element */}\r\n      <line\r\n        x1={x}\r\n        y1={y + lineLength}\r\n        x2={x}\r\n        y2={y + 2 * lineLength}\r\n        transform={closed === false ? `rotate(-45 ${x} ${y + 2 * lineLength})` : `rotate(0 ${x} ${y + 2 * lineLength})`}\r\n        className={classes.lineStyle}\r\n      />\r\n      {/* end line */}\r\n      <line\r\n        x1={x}\r\n        y1={y + 2 * lineLength}\r\n        x2={x}\r\n        y2={y + 3 * lineLength}\r\n        className={classes.lineStyle}\r\n      />\r\n      {topSection ?\r\n        <React.Fragment>\r\n          {/* topSection name */}\r\n          <text\r\n            x={x}\r\n            y={y - 1}\r\n            className={classes.overviewTabSVGTextsCentralAnchor}\r\n          >\r\n            {sectionName}\r\n          </text>\r\n          {/* topSection horizontal line */}\r\n          <line\r\n            x1={x - lineLength}\r\n            y1={y}\r\n            x2={x + lineLength}\r\n            y2={y}\r\n            className={classes.lineStyle}\r\n          />\r\n          {/* outgoing feeder name */}\r\n          <text\r\n            x={x}\r\n            y={y + 3.2 * lineLength}\r\n            className={classes.overviewTabSVGTextsCentralAnchor}\r\n          >\r\n            {outgoingFeederName}\r\n          </text>\r\n        </React.Fragment>\r\n        : null\r\n      }\r\n      {bottomSection ?\r\n        <React.Fragment>\r\n          {/* infeed name */}\r\n          <text\r\n            x={x}\r\n            y={y -1}\r\n            className={classes.overviewTabSVGTextsCentralAnchor}\r\n          >\r\n            {outgoingFeederName}\r\n          </text>\r\n          {/* bottomSection name */}\r\n          <text\r\n            x={x}\r\n            y={y + 3.2 * lineLength}\r\n            className={classes.overviewTabSVGTextsCentralAnchor}\r\n          >\r\n            {sectionName}\r\n          </text>\r\n          {/* bottomSection horizontal line */}\r\n          <line\r\n            x1={x - lineLength}\r\n            y1={y + 3 * lineLength}\r\n            x2={x + lineLength}\r\n            y2={y + 3 * lineLength}\r\n            className={classes.lineStyle}\r\n          />\r\n        </React.Fragment>\r\n        : null}\r\n      {/* central circuit breaker name */}\r\n      <text\r\n        x={x}\r\n        y={y + 1.5 * lineLength}\r\n        className={classes.overviewTabSVGTextsCentralLeftAnchor}\r\n      >\r\n        &nbsp;&nbsp;{name}\r\n      </text>\r\n    </React.Fragment>\r\n  )\r\n}","import React from 'react';\r\nimport { lineLength, circleRadius, useStyles } from '../Overview.component';\r\n\r\nexport interface IOverviewTabTransformerSVG {\r\n  x: number,\r\n  y: number,\r\n  name: string,\r\n  voltageApplied?: boolean,\r\n}\r\n\r\nexport const OverviewTabTransformerSVG: React.FC<IOverviewTabTransformerSVG> = ({ x, y, name, voltageApplied }) => {\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <React.Fragment>\r\n      {/* main symbol - 2 lines & 2 circles */}\r\n      <line\r\n        x1={x}\r\n        y1={y}\r\n        x2={x}\r\n        y2={y + 0.5 * lineLength}\r\n        className={voltageApplied ? classes.lineStyleVoltageApplied : classes.lineStyle}\r\n      />\r\n      <circle\r\n        cx={x}\r\n        cy={y + 0.5 * lineLength + circleRadius}\r\n        r={circleRadius}\r\n        className={voltageApplied ? classes.circleStyleVoltageApplied : classes.circleStyle}\r\n      />\r\n      <circle\r\n        cx={x}\r\n        cy={y + 0.5 * lineLength + 2 * circleRadius}\r\n        r={circleRadius}\r\n        className={voltageApplied ? classes.circleStyleVoltageApplied : classes.circleStyle}\r\n      />\r\n      {/* <line\r\n        x1={x}\r\n        y1={y + 0.5 * lineLength + 3 * circleRadius}\r\n        x2={x}\r\n        y2={y + 0.75 * lineLength + 3 * circleRadius}\r\n        className={voltageApplied ? classes.lineStyleVoltageApplied : classes.lineStyle}\r\n      /> */}\r\n      <text\r\n        x={x}\r\n        y={y}\r\n        className={classes.overviewTabSVGTextsCentralLeftAnchor}\r\n      >\r\n        &nbsp;&nbsp;{name}\r\n      </text>\r\n    </React.Fragment>\r\n  )\r\n}","import React from 'react';\r\nimport { circleRadius, useStyles } from '../Overview.component';\r\nimport { IOverviewTabTransformerSVG } from './OverviewTabTransformerSVG.component';\r\n\r\nexport const OverviewTabGeneratorSVG: React.FC<IOverviewTabTransformerSVG> = ({ x, y, name, voltageApplied }) => {\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <React.Fragment>\r\n      {/* circle, 'G' symbol & end line */}\r\n      <circle\r\n        cx={x}\r\n        cy={y + circleRadius}\r\n        r={circleRadius}\r\n        className={voltageApplied ? classes.circleStyleVoltageApplied : classes.circleStyle}\r\n      />\r\n      <text\r\n        x={x}\r\n        y={y + circleRadius}\r\n        className={classes.generatorSymbolTextStyle}\r\n      >\r\n        G\r\n      </text>\r\n\r\n      <text\r\n        x={x + circleRadius}\r\n        y={y}\r\n        className={classes.overviewTabSVGTextsCentralLeftAnchor}\r\n      >\r\n        &nbsp;&nbsp;{name}\r\n      </text>\r\n    </React.Fragment>\r\n  )\r\n}","import React, { useEffect } from 'react';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport { makeStyles, Theme, createStyles } from '@material-ui/core/styles';\r\nimport { Alert, AlertTitle } from '@material-ui/lab';\r\nimport { UniversalTable } from '../UniversalTable.component';\r\nimport { useTranslation } from 'react-i18next';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { RootState } from '../../reducers/Root.reducer';\r\nimport { DeviceTypes } from '../../utilities/DeviceTypes.utility';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport TimelineIcon from '@material-ui/icons/Timeline';\r\nimport { setUniversalTabsNameIndex } from '../../actions/UniversalTabs.action';\r\nimport Tooltip from '@material-ui/core/Tooltip';\r\nimport { OverviewTabCircuitBreakerSVG } from './OverviewTabCircuitBreakerSVG.component';\r\nimport { OverviewTabTransformerSVG } from './OverviewTabTransformerSVG.component';\r\nimport { OverviewTabGeneratorSVG } from './OverviewTabGeneratorSVG.component';\r\nimport WarningIcon from '@material-ui/icons/Warning';\r\nimport InfoIcon from '@material-ui/icons/Info';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport { powerFactorCalculator } from '../../utilities/PowerFactorCalculator.utility';\r\nimport { decodeState } from '../../utilities/DecodeState.utility';\r\nimport { TableWithSort } from '../TableWithSort.component';\r\nimport { fetchEvents } from '../../services/FetchEventsAPI.service';\r\nimport { setBackdropOpen } from '../../actions/Backdrop.action';\r\nimport { setEvents } from '../../actions/Events.action';\r\nimport ErrorIcon from '@material-ui/icons/Error';\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n  createStyles({\r\n    masonryLayout: {\r\n      columnGap: 10,\r\n      webkitColumnGap: 10,\r\n      width: '100%',\r\n      [`${theme.breakpoints.down('xl')}`]: {\r\n        columnCount: 3,\r\n        webkitColumnCount: 3,\r\n      },\r\n      [`${theme.breakpoints.down('lg')}`]: {\r\n        columnCount: 2,\r\n        webkitColumnCount: 2,\r\n      },\r\n      [`${theme.breakpoints.down('md')}`]: {\r\n        columnCount: 1,\r\n        webkitColumnCount: 1,\r\n      },\r\n    },\r\n    masonryLayoutPanel: {\r\n      breakInside: 'avoid',\r\n      WebkitColumnBreakInside: 'avoid',\r\n      padding: '5px'\r\n    },\r\n    overviewTabSVGMaxHeight: {\r\n      maxHeight: '600px',\r\n      boxShadow: '0px 2px 1px -1px rgb(0 0 0 / 20%), 0px 1px 1px 0px rgb(0 0 0 / 14%), 0px 1px 3px 0px rgb(0 0 0 / 12%)'\r\n    },\r\n    warning: {\r\n      color: 'orange'\r\n    },\r\n    info: {\r\n      color: '#2196f3'\r\n    },\r\n    error: {\r\n      color: 'red'\r\n    },\r\n  }),\r\n);\r\n\r\nexport const OverviewTab = () => {\r\n  const classes = useStyles();\r\n  const { t, i18n } = useTranslation();\r\n  const deviceType = useSelector((state: RootState) => state.deviceDataDialog.deviceType);\r\n  const deviceName = useSelector((state: RootState) => state.deviceDataDialog.deviceName);\r\n  const breakerName = useSelector((state: RootState) => state.deviceDataDialog.breakerName);\r\n  const sectionName = useSelector((state: RootState) => state.deviceDataDialog.sectionName);\r\n  const assetID = useSelector((state: RootState) => state.deviceDataDialog.assetID);\r\n  const switchboardAssetID = useSelector((state: RootState) => state.deviceDataDialog.switchboardAssetID);\r\n  const systemTopologyData = useSelector((state: RootState) => state.systemTopologyData);\r\n  const events = useSelector((state: RootState) => state.events);\r\n  const dispatch = useDispatch();\r\n\r\n  const setSeverityIcon = (severity: number) => {\r\n    switch (severity) {\r\n      case 20:\r\n        return <ErrorIcon className={classes.error} />\r\n      case 30:\r\n        return <WarningIcon className={classes.warning} />\r\n      case 40:\r\n        return <InfoIcon className={classes.info} />\r\n      default:\r\n        return <InfoIcon className={classes.info} />\r\n    }\r\n  }\r\n\r\n  useEffect(() => {\r\n    if (!events[switchboardAssetID]) {\r\n      //no data - need to refresh events\r\n      dispatch(setBackdropOpen(true))\r\n      fetchEvents(switchboardAssetID, new Date(new Date().setMonth(new Date().getMonth() - 1)).toISOString(), new Date().toISOString()).then(res => {\r\n        if (res._embedded && res._embedded.events && switchboardAssetID) {\r\n          dispatch(setEvents(switchboardAssetID, res._embedded.events))\r\n          dispatch(setBackdropOpen(false))\r\n        }\r\n        else {\r\n          dispatch(setEvents(switchboardAssetID, []))\r\n          dispatch(setBackdropOpen(false))\r\n        }\r\n      }).catch(err => {\r\n        console.log(err)\r\n        dispatch(setBackdropOpen(false))\r\n      })\r\n    }\r\n  }, [dispatch, events, switchboardAssetID])\r\n\r\n  const eventTable = (\r\n    <div className={classes.masonryLayoutPanel}>\r\n      <TableWithSort\r\n        defaultOrderColumnIndex={2}\r\n        columns={[t('eventsPage.severity'), t('eventsPage.event'), t('eventsPage.time')]}\r\n        //rows={deviceEvents.map((ev)=> [ev.severity, ev.description, ev.timestamp])}\r\n        rows={events[switchboardAssetID]? events[switchboardAssetID].filter((el) => el.source === assetID).map(ev => [setSeverityIcon(ev.severity),\r\n        i18n.language === 'pl' ? JSON.parse(ev.description).pl : JSON.parse(ev.description).en, new Date(Date.parse(ev.timestamp))]) : [[]]}\r\n      />\r\n    </div>\r\n  )\r\n\r\n  const currentTable = (\r\n    <div className={classes.masonryLayoutPanel}>\r\n      <UniversalTable\r\n        columns={[t('deviceDataDialog.current'),\r\n        <Tooltip title={t<string>('deviceDataDialog.showChartTooltip')} placement=\"left\">\r\n          <IconButton aria-label=\"delete\" size=\"small\" onClick={() => dispatch(setUniversalTabsNameIndex('TransformerDeviceDetails', 3))}>\r\n            <TimelineIcon />\r\n          </IconButton>\r\n        </Tooltip>]}\r\n        rows={[[`${t('deviceDataDialog.current')} L1`, `${systemTopologyData[assetID]?.Current_L1 || 0} A`],\r\n        [`${t('deviceDataDialog.current')} L2`, `${systemTopologyData[assetID]?.Current_L2 || 0} A`],\r\n        [`${t('deviceDataDialog.current')} L3`, `${systemTopologyData[assetID]?.Current_L3 || 0} A`]]}\r\n        small />\r\n    </div>\r\n  )\r\n  const powerTable = (\r\n    <div className={classes.masonryLayoutPanel}>\r\n      <UniversalTable\r\n        columns={[t('deviceDataDialog.power'),\r\n        <Tooltip title={t<string>('deviceDataDialog.showChartTooltip')} placement=\"left\">\r\n          <IconButton aria-label=\"delete\" size=\"small\" onClick={() => dispatch(setUniversalTabsNameIndex('TransformerDeviceDetails', 4))}>\r\n            <TimelineIcon />\r\n          </IconButton>\r\n        </Tooltip>]}\r\n        rows={[[t('deviceDataDialog.activePowerImport'), `${systemTopologyData[assetID]?.Active_Power_Import || 0} kW`],\r\n        [t('deviceDataDialog.activePowerExport'), `${systemTopologyData[assetID]?.Active_Power_Export || 0} kW`],\r\n        [t('deviceDataDialog.reactivePowerImport'), `${systemTopologyData[assetID]?.Reactive_Power_Import || 0} kvar`],\r\n        [t('deviceDataDialog.reactivePowerExport'), `${systemTopologyData[assetID]?.Reactive_Power_Import || 0} kvar`],\r\n        [t('deviceDataDialog.powerFactor'), `${systemTopologyData[assetID] ? powerFactorCalculator(systemTopologyData[assetID].Active_Power_Import, systemTopologyData[assetID].Reactive_Power_Import) : 0} PF`]]}\r\n        small />\r\n    </div>\r\n  )\r\n  const thdiTable = (\r\n    <div className={classes.masonryLayoutPanel}>\r\n      <UniversalTable\r\n        columns={['THD I',\r\n          <Tooltip title={t<string>('deviceDataDialog.showChartTooltip')} placement=\"left\">\r\n            <IconButton aria-label=\"delete\" size=\"small\" onClick={() => dispatch(setUniversalTabsNameIndex('TransformerDeviceDetails', 6))}>\r\n              <TimelineIcon />\r\n            </IconButton>\r\n          </Tooltip>]}\r\n        rows={[['THD I L1', `${systemTopologyData[assetID]?.THD_I_L1 || 0} %`],\r\n        ['THD I L2', `${systemTopologyData[assetID]?.THD_I_L2 || 0} %`],\r\n        ['THD I L3', `${systemTopologyData[assetID]?.THD_I_L3 || 0} %`]]}\r\n        small />\r\n    </div>\r\n  )\r\n  const thduTable = (\r\n    <div className={classes.masonryLayoutPanel}>\r\n      <UniversalTable\r\n        columns={['THD U',\r\n          <Tooltip title={t<string>('deviceDataDialog.showChartTooltip')} placement=\"left\">\r\n            <IconButton aria-label=\"delete\" size=\"small\" onClick={() => dispatch(setUniversalTabsNameIndex('TransformerDeviceDetails', 5))}>\r\n              <TimelineIcon />\r\n            </IconButton>\r\n          </Tooltip>]}\r\n        rows={[['THD U L1', `${systemTopologyData[assetID]?.THD_U_L1 || 0} %`],\r\n        ['THD U L2', `${systemTopologyData[assetID]?.THD_U_L2 || 0} %`],\r\n        ['THD U L3', `${systemTopologyData[assetID]?.THD_U_L3 || 0} %`]]}\r\n        small />\r\n    </div>\r\n  )\r\n  const voltageLLTable = (\r\n    <div className={classes.masonryLayoutPanel}>\r\n      <UniversalTable\r\n        columns={[t('deviceDataDialog.voltageLL'),\r\n        <Tooltip title={t<string>('deviceDataDialog.showChartTooltip')} placement=\"left\">\r\n          <IconButton aria-label=\"delete\" size=\"small\" onClick={() => dispatch(setUniversalTabsNameIndex('TransformerDeviceDetails', 2))}>\r\n            <TimelineIcon />\r\n          </IconButton>\r\n        </Tooltip>]}\r\n        rows={[[t('deviceDataDialog.voltageL1L2'), `${systemTopologyData[assetID]?.Voltage_L1_L2 || 0} V`],\r\n        [t('deviceDataDialog.voltageL2L3'), `${systemTopologyData[assetID]?.Voltage_L2_L3 || 0} V`],\r\n        [t('deviceDataDialog.voltageL3L1'), `${systemTopologyData[assetID]?.Voltage_L3_L1 || 0} V`]]}\r\n        small />\r\n    </div>\r\n  )\r\n  const voltageLNTable = (\r\n    <div className={classes.masonryLayoutPanel}>\r\n      <UniversalTable\r\n        columns={[t('deviceDataDialog.voltageLN'),\r\n        <Tooltip title={t<string>('deviceDataDialog.showChartTooltip')} placement=\"left\">\r\n          <IconButton aria-label=\"delete\" size=\"small\" onClick={() => dispatch(setUniversalTabsNameIndex('TransformerDeviceDetails', 1))}>\r\n            <TimelineIcon />\r\n          </IconButton>\r\n        </Tooltip>]}\r\n        rows={[[t('deviceDataDialog.voltageL1N'), `${systemTopologyData[assetID]?.Voltage_L1_N || 0} V`],\r\n        [t('deviceDataDialog.voltageL2N'), `${systemTopologyData[assetID]?.Voltage_L2_N || 0} V`],\r\n        [t('deviceDataDialog.voltageL3N'), `${systemTopologyData[assetID]?.Voltage_L3_N || 0} V`]]}\r\n        small />\r\n    </div>\r\n  )\r\n  const breakerStateAlert = () => {\r\n    const state = decodeState(systemTopologyData[assetID]?.Breaker_State || 0)\r\n    if (state.drawnOut) {\r\n      //red alert\r\n      return (\r\n        <Grid item xs={12}>\r\n          <Alert severity='error'>\r\n            <AlertTitle>{t('deviceDataDialog.breakerDrawnOut')}</AlertTitle>\r\n            {t('deviceDataDialog.switchingDeviceStateTitle')}\r\n          </Alert>\r\n        </Grid>\r\n      )\r\n    }\r\n    else if (state.tripped) {\r\n      //red alert\r\n      return (\r\n        <Grid item xs={12}>\r\n          <Alert severity='error'>\r\n            <AlertTitle>{t('deviceDataDialog.breakerTripped')}</AlertTitle>\r\n            {t('deviceDataDialog.switchingDeviceStateTitle')}\r\n          </Alert>\r\n        </Grid>\r\n      )\r\n    }\r\n    else if (!state.closed) {\r\n      //yellow alert\r\n      return (\r\n        <Grid item xs={12}>\r\n          <Alert severity='warning'>\r\n            <AlertTitle>{t('deviceDataDialog.breakerOpen')}</AlertTitle>\r\n            {t('deviceDataDialog.switchingDeviceStateTitle')}\r\n          </Alert>\r\n        </Grid>\r\n      )\r\n    }\r\n    //all ok\r\n    return (\r\n      <Grid item xs={12}>\r\n        <Alert severity='success'>\r\n          <AlertTitle>{t('deviceDataDialog.breakerClosed')}</AlertTitle>\r\n          {t('deviceDataDialog.switchingDeviceStateTitle')}\r\n        </Alert>\r\n      </Grid>\r\n    )\r\n  }\r\n\r\n  const svgVisualization = () => {\r\n    switch (deviceType) {\r\n      case DeviceTypes.circuitBreaker:\r\n        return (\r\n          <svg width='100%' viewBox={`0 -2 16 24`} className={classes.overviewTabSVGMaxHeight}>\r\n            <OverviewTabCircuitBreakerSVG\r\n              x={8}\r\n              y={0}\r\n              closed={decodeState(systemTopologyData[assetID]?.Breaker_State || 0).closed}\r\n              sectionName={sectionName}\r\n              outgoingFeederName={deviceName}\r\n              name={breakerName}\r\n              topSection\r\n            />\r\n          </svg>\r\n        )\r\n      case DeviceTypes.transformer:\r\n        return (\r\n          <svg width='100%' viewBox={`0 -2 16 36`} className={classes.overviewTabSVGMaxHeight}>\r\n            <OverviewTabTransformerSVG\r\n              x={8}\r\n              y={0}\r\n              name={deviceName}\r\n            />\r\n            <OverviewTabCircuitBreakerSVG\r\n              x={8}\r\n              y={12}\r\n              closed={decodeState(systemTopologyData[assetID]?.Breaker_State || 0).closed}\r\n              name={breakerName}\r\n              sectionName={sectionName}\r\n              bottomSection\r\n            />\r\n          </svg>\r\n        )\r\n      case DeviceTypes.generator:\r\n        return (\r\n          <svg width='100%' viewBox={`0 -2 16 32`} className={classes.overviewTabSVGMaxHeight}>\r\n            <OverviewTabGeneratorSVG\r\n              x={8}\r\n              y={0}\r\n              name={deviceName}\r\n            />\r\n            <OverviewTabCircuitBreakerSVG\r\n              x={8}\r\n              y={6}\r\n              closed={decodeState(systemTopologyData[assetID]?.Breaker_State || 0).closed}\r\n              name={breakerName}\r\n              sectionName={sectionName}\r\n              bottomSection\r\n            />\r\n          </svg>\r\n        )\r\n      case DeviceTypes.infeedBreaker:\r\n        return (\r\n          <svg width='100%' viewBox={`0 -2 16 24`} className={classes.overviewTabSVGMaxHeight}>\r\n            <OverviewTabCircuitBreakerSVG\r\n              x={8}\r\n              y={0}\r\n              closed={decodeState(systemTopologyData[assetID]?.Breaker_State || 0).closed}\r\n              sectionName={sectionName}\r\n              outgoingFeederName={deviceName}\r\n              name={breakerName}\r\n              bottomSection\r\n            />\r\n          </svg>\r\n        )\r\n      case DeviceTypes.couplingBreaker:\r\n        return (\r\n          <svg width='100%' viewBox={`0 -2 16 24`} className={classes.overviewTabSVGMaxHeight}>\r\n            <OverviewTabCircuitBreakerSVG\r\n              x={8}\r\n              y={0}\r\n              closed={decodeState(systemTopologyData[assetID]?.Breaker_State || 0).closed}\r\n              sectionName=''\r\n              outgoingFeederName=''\r\n              name={breakerName}\r\n              topSection\r\n              bottomSection\r\n            />\r\n          </svg>\r\n        )\r\n      default:\r\n        return null\r\n    }\r\n  }\r\n\r\n  return (\r\n    <Grid container justify='center' alignItems='flex-start' spacing={2}>\r\n      <Grid container spacing={1} item xs={12} sm={12} md={4}>\r\n        <Grid item xs={12}>\r\n          {svgVisualization()}\r\n        </Grid>\r\n        {events[switchboardAssetID] ?\r\n          <React.Fragment>\r\n            <Grid item xs={12}>\r\n              <Typography variant='h5'>{t('deviceDataDialog.events')}</Typography>\r\n            </Grid>\r\n            <Grid item xs={12}>\r\n              {eventTable}\r\n            </Grid>\r\n          </React.Fragment>\r\n          : null}\r\n      </Grid>\r\n      <Grid container spacing={1} item xs={12} sm={12} md={8}>\r\n        {breakerStateAlert()}\r\n        <Grid item xs={12}>\r\n          <div className={classes.masonryLayout}>\r\n            {currentTable}\r\n            {powerTable}\r\n            {thdiTable}\r\n            {deviceType === DeviceTypes.transformer || deviceType === DeviceTypes.generator ? thduTable : null}\r\n            {deviceType === DeviceTypes.transformer || deviceType === DeviceTypes.generator ? voltageLLTable : null}\r\n            {deviceType === DeviceTypes.transformer || deviceType === DeviceTypes.generator ? voltageLNTable : null}\r\n          </div>\r\n        </Grid>\r\n      </Grid>\r\n    </Grid>\r\n  )\r\n}","import React, { useEffect } from 'react';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport { makeStyles, Theme, createStyles } from '@material-ui/core/styles';\r\nimport { LineChart } from '../LineChart.component';\r\nimport { DatePicker } from \"@material-ui/pickers\";\r\nimport { useTranslation } from 'react-i18next';\r\nimport { fetchTimeseriesInterval } from '../../services/FetchTimeseriesAPI.service';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { RootState } from '../../reducers/Root.reducer';\r\nimport { setDeviceDataDialogDateFrom } from '../../actions/DeviceDataDialog.action';\r\nimport { decideDataColor } from '../../utilities/SiemensColors.utility';\r\n\r\ninterface IPower {\r\n  Active_Power_Export: number\r\n  Active_Power_Import: number\r\n  Reactive_Power_Export: number\r\n  Reactive_Power_Import: number\r\n  _time: string\r\n}\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n  createStyles({\r\n    timePickersContainer: {\r\n      marginTop: theme.spacing(2),\r\n      paddingTop: theme.spacing(2),\r\n      paddingBottom: theme.spacing(2),\r\n    }\r\n  }),\r\n);\r\n\r\nexport const PowerTab = () => {\r\n  const classes = useStyles();\r\n  const { t } = useTranslation();\r\n  const [activePowerExport, setActivePowerExport] = React.useState<Array<{ x: number | Date, y: number }>>([{ x: 0, y: 0 }])\r\n  const [reactivePowerExport, setReactivePowerExport] = React.useState<Array<{ x: number | Date, y: number }>>([{ x: 0, y: 0 }])\r\n  const [activePowerImport, setActivePowerImport] = React.useState<Array<{ x: number | Date, y: number }>>([{ x: 0, y: 0 }])\r\n  const [reactivePowerImport, setRectivePowerImport] = React.useState<Array<{ x: number | Date, y: number }>>([{ x: 0, y: 0 }])\r\n  const assetID = useSelector((state: RootState) => state.deviceDataDialog.assetID);\r\n  const dateFrom = useSelector((state: RootState) => state.deviceDataDialog.dateFrom);\r\n  const dispatch = useDispatch();\r\n\r\n  useEffect(() => {\r\n    if (dateFrom) {\r\n      fetchTimeseriesInterval(assetID, 15, \r\n        new Date(new Date(dateFrom.setHours(0, 0, 0, 0))).toISOString(), \r\n        new Date(new Date(dateFrom.setHours(23, 59, 59, 999))).toISOString(), \r\n        'Active_Power_Export,Active_Power_Import,Reactive_Power_Export,Reactive_Power_Import').then(res => {\r\n        const activePowerExportPoints: Array<{ x: number, y: number }> = []\r\n        const reactivePowerExportPoints: Array<{ x: number, y: number }> = []\r\n        const activePowerImportPoints: Array<{ x: number, y: number }> = []\r\n        const reactivePowerImportPoints: Array<{ x: number, y: number }> = []\r\n        res.forEach((point: IPower) => {\r\n          activePowerExportPoints.push({\r\n            x: new Date(point._time).valueOf(),\r\n            y: point.Active_Power_Export\r\n          })\r\n          reactivePowerExportPoints.push({\r\n            x: new Date(point._time).valueOf(),\r\n            y: point.Reactive_Power_Export\r\n          })\r\n          activePowerImportPoints.push({\r\n            x: new Date(point._time).valueOf(),\r\n            y: point.Active_Power_Import\r\n          })\r\n          reactivePowerImportPoints.push({\r\n            x: new Date(point._time).valueOf(),\r\n            y: point.Reactive_Power_Import\r\n          })\r\n        })\r\n        setActivePowerExport(activePowerExportPoints)\r\n        setReactivePowerExport(reactivePowerExportPoints)\r\n        setActivePowerImport(activePowerImportPoints)\r\n        setRectivePowerImport(reactivePowerImportPoints)\r\n      })\r\n    }\r\n  }, [dateFrom, assetID])\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <Grid container spacing={2}>\r\n        <Grid item xs={12}>\r\n          <LineChart\r\n            data={{\r\n              datasets: [\r\n                {\r\n                  label: `${t('deviceDataDialog.activePowerExport')} [kW]`,\r\n                  backgroundColor: decideDataColor(0),\r\n                  borderColor: decideDataColor(0),\r\n                  fill: false,\r\n                  lineTension: 0,\r\n                  data: activePowerExport,\r\n                  pointRadius: 0\r\n                },\r\n                {\r\n                  label: `${t('deviceDataDialog.activePowerImport')} [kW]`,\r\n                  backgroundColor: decideDataColor(1),\r\n                  borderColor: decideDataColor(1),\r\n                  fill: false,\r\n                  lineTension: 0,\r\n                  data: activePowerImport,\r\n                  pointRadius: 0\r\n                },\r\n                {\r\n                  label: `${t('deviceDataDialog.reactivePowerExport')} [kvar]`,\r\n                  backgroundColor: decideDataColor(2),\r\n                  borderColor: decideDataColor(2),\r\n                  fill: false,\r\n                  lineTension: 0,\r\n                  data: reactivePowerExport,\r\n                  pointRadius: 0\r\n                },\r\n                {\r\n                  label: `${t('deviceDataDialog.reactivePowerImport')} [kvar]`,\r\n                  backgroundColor: decideDataColor(3),\r\n                  borderColor: decideDataColor(3),\r\n                  fill: false,\r\n                  lineTension: 0,\r\n                  data: reactivePowerImport,\r\n                  pointRadius: 0\r\n                }\r\n              ]\r\n            }}\r\n          />\r\n        </Grid>\r\n      </Grid>\r\n      <Grid container spacing={2} className={classes.timePickersContainer}>\r\n        <Grid item xs={12} md={6}>\r\n          <DatePicker\r\n            variant='static'\r\n            autoOk\r\n            label={t('eventsPage.dateFromLabel')}\r\n            value={dateFrom}\r\n            onChange={(date) => dispatch(setDeviceDataDialogDateFrom(date))}\r\n            fullWidth\r\n            disableFuture\r\n          />\r\n        </Grid>\r\n      </Grid>\r\n    </React.Fragment>\r\n  )\r\n}","import React, { useEffect } from 'react';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport { makeStyles, Theme, createStyles } from '@material-ui/core/styles';\r\nimport { LineChart } from '../LineChart.component';\r\nimport { DatePicker } from \"@material-ui/pickers\";\r\nimport { useTranslation } from 'react-i18next';\r\nimport { fetchTimeseriesInterval } from '../../services/FetchTimeseriesAPI.service';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { RootState } from '../../reducers/Root.reducer';\r\nimport { setDeviceDataDialogDateFrom } from '../../actions/DeviceDataDialog.action';\r\nimport { decideDataColor } from '../../utilities/SiemensColors.utility';\r\n\r\ninterface ITHDI {\r\n  THD_I_L1: number\r\n  THD_I_L2: number\r\n  THD_I_L3: number\r\n  _time: string\r\n}\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n  createStyles({\r\n    timePickersContainer: {\r\n      marginTop: theme.spacing(2),\r\n      paddingTop: theme.spacing(2),\r\n      paddingBottom: theme.spacing(2),\r\n    }\r\n  }),\r\n);\r\n\r\nexport const THDITab = () => {\r\n  const classes = useStyles();\r\n  const { t } = useTranslation();\r\n  const [l1, setL1] = React.useState<Array<{ x: number | Date, y: number }>>([{ x: 0, y: 0 }])\r\n  const [l2, setL2] = React.useState<Array<{ x: number | Date, y: number }>>([{ x: 0, y: 0 }])\r\n  const [l3, setL3] = React.useState<Array<{ x: number | Date, y: number }>>([{ x: 0, y: 0 }])\r\n  const assetID = useSelector((state: RootState) => state.deviceDataDialog.assetID);\r\n  const dateFrom = useSelector((state: RootState) => state.deviceDataDialog.dateFrom);\r\n  const dispatch = useDispatch();\r\n\r\n  useEffect(() => {\r\n    if (dateFrom) {\r\n      fetchTimeseriesInterval(assetID, 1, new Date(new Date(dateFrom.setHours(0, 0, 0, 0))).toISOString(), new Date(new Date(dateFrom.setHours(23, 59, 59, 999))).toISOString(), 'THD_I_L1,THD_I_L2,THD_I_L3').then(res => {\r\n        const pointsL1: Array<{ x: number, y: number }> = []\r\n        const pointsL2: Array<{ x: number, y: number }> = []\r\n        const pointsL3: Array<{ x: number, y: number }> = []\r\n        res.forEach((point: ITHDI) => {\r\n          pointsL1.push({\r\n            x: new Date(point._time).valueOf(),\r\n            y: point.THD_I_L1\r\n          })\r\n          pointsL2.push({\r\n            x: new Date(point._time).valueOf(),\r\n            y: point.THD_I_L2\r\n          })\r\n          pointsL3.push({\r\n            x: new Date(point._time).valueOf(),\r\n            y: point.THD_I_L3\r\n          })\r\n        })\r\n        setL1(pointsL1)\r\n        setL2(pointsL2)\r\n        setL3(pointsL3)\r\n      })\r\n    }\r\n  }, [dateFrom, assetID])\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <Grid container spacing={2}>\r\n        <Grid item xs={12}>\r\n        <LineChart\r\n            data={{\r\n              datasets: [\r\n                {\r\n                  label: `THD I L1 [%]`,\r\n                  backgroundColor: decideDataColor(0),\r\n                  borderColor: decideDataColor(0),\r\n                  fill: false,\r\n                  lineTension: 0,\r\n                  data: l1,\r\n                  pointRadius: 0\r\n                },\r\n                {\r\n                  label: `THD I L2 [%]`,\r\n                  backgroundColor: decideDataColor(1),\r\n                  borderColor: decideDataColor(1),\r\n                  fill: false,\r\n                  lineTension: 0,\r\n                  data: l2,\r\n                  pointRadius: 0\r\n                },\r\n                {\r\n                  label: `THD I L3 [%]`,\r\n                  backgroundColor: decideDataColor(2),\r\n                  borderColor: decideDataColor(2),\r\n                  fill: false,\r\n                  lineTension: 0,\r\n                  data: l3,\r\n                  pointRadius: 0\r\n                }\r\n              ]\r\n            }}\r\n          />\r\n        </Grid>\r\n      </Grid>\r\n      <Grid container spacing={2} className={classes.timePickersContainer}>\r\n        <Grid item xs={12} md={6}>\r\n          <DatePicker\r\n            variant='static'\r\n            autoOk\r\n            label={t('eventsPage.dateFromLabel')}\r\n            value={dateFrom}\r\n            onChange={(date) => dispatch(setDeviceDataDialogDateFrom(date))}\r\n            fullWidth\r\n            disableFuture\r\n          />\r\n        </Grid>\r\n      </Grid>\r\n    </React.Fragment>\r\n  )\r\n}","import React from 'react';\r\nimport { UniversalTabs } from '../UniversalTabs.component';\r\nimport { CurrentTab } from './CurrentTab.component';\r\nimport { OverviewTab } from './OverviewTab.component';\r\nimport { PowerTab } from './PowerTab.component';\r\nimport { THDITab } from './THDITab.component';\r\nimport { useTranslation } from 'react-i18next';\r\n\r\nexport const BreakerDevice = () => {\r\n  const { t } = useTranslation();\r\n\r\n  return (\r\n    <UniversalTabs\r\n      name='BreakerDeviceDetails'\r\n      tabs={[\r\n        {\r\n          label: t('deviceDataDialog.overviewTab'), content: <OverviewTab />\r\n        },\r\n        {\r\n          label: t('deviceDataDialog.currentTab'), content: <CurrentTab />\r\n        },\r\n        {\r\n          label: t('deviceDataDialog.powerTab'), content: <PowerTab />\r\n        },\r\n        {\r\n          label: t('deviceDataDialog.THDITab'), content: <THDITab />\r\n        }]}\r\n    />\r\n  )\r\n}","import React, { useEffect } from 'react';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport { makeStyles, Theme, createStyles } from '@material-ui/core/styles';\r\nimport { LineChart } from '../LineChart.component';\r\nimport { DatePicker } from \"@material-ui/pickers\";\r\nimport { useTranslation } from 'react-i18next';\r\nimport { fetchTimeseriesInterval } from '../../services/FetchTimeseriesAPI.service';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { RootState } from '../../reducers/Root.reducer';\r\nimport { setDeviceDataDialogDateFrom } from '../../actions/DeviceDataDialog.action';\r\nimport { decideDataColor } from '../../utilities/SiemensColors.utility';\r\n\r\ninterface ITHDU {\r\n  THD_U_L1: number\r\n  THD_U_L2: number\r\n  THD_U_L3: number\r\n  _time: string\r\n}\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n  createStyles({\r\n    timePickersContainer: {\r\n      marginTop: theme.spacing(2),\r\n      paddingTop: theme.spacing(2),\r\n      paddingBottom: theme.spacing(2),\r\n    }\r\n  }),\r\n);\r\n\r\nexport const THDUTab = () => {\r\n  const classes = useStyles();\r\n  const { t } = useTranslation();\r\n  const [l1, setL1] = React.useState<Array<{ x: number | Date, y: number }>>([{ x: 0, y: 0 }])\r\n  const [l2, setL2] = React.useState<Array<{ x: number | Date, y: number }>>([{ x: 0, y: 0 }])\r\n  const [l3, setL3] = React.useState<Array<{ x: number | Date, y: number }>>([{ x: 0, y: 0 }])\r\n  const assetID = useSelector((state: RootState) => state.deviceDataDialog.assetID);\r\n  const dateFrom = useSelector((state: RootState) => state.deviceDataDialog.dateFrom);\r\n  const dispatch = useDispatch();\r\n\r\n  useEffect(() => {\r\n    if (dateFrom) {\r\n      fetchTimeseriesInterval(assetID, 1, new Date(new Date(dateFrom.setHours(0, 0, 0, 0))).toISOString(), new Date(new Date(dateFrom.setHours(23, 59, 59, 999))).toISOString(), 'THD_U_L1,THD_U_L2,THD_U_L3').then(res => {\r\n        const pointsL1: Array<{ x: number, y: number }> = []\r\n        const pointsL2: Array<{ x: number, y: number }> = []\r\n        const pointsL3: Array<{ x: number, y: number }> = []\r\n        res.forEach((point: ITHDU) => {\r\n          pointsL1.push({\r\n            x: new Date(point._time).valueOf(),\r\n            y: point.THD_U_L1\r\n          })\r\n          pointsL2.push({\r\n            x: new Date(point._time).valueOf(),\r\n            y: point.THD_U_L2\r\n          })\r\n          pointsL3.push({\r\n            x: new Date(point._time).valueOf(),\r\n            y: point.THD_U_L3\r\n          })\r\n        })\r\n        setL1(pointsL1)\r\n        setL2(pointsL2)\r\n        setL3(pointsL3)\r\n      })\r\n    }\r\n  }, [dateFrom, assetID])\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <Grid container spacing={2}>\r\n        <Grid item xs={12}>\r\n          <LineChart\r\n            data={{\r\n              datasets: [\r\n                {\r\n                  label: `THD U L1 [%]`,\r\n                  backgroundColor: decideDataColor(0),\r\n                  borderColor: decideDataColor(0),\r\n                  fill: false,\r\n                  lineTension: 0,\r\n                  data: l1,\r\n                  pointRadius: 0\r\n                },\r\n                {\r\n                  label: `THD U L2 [%]`,\r\n                  backgroundColor: decideDataColor(1),\r\n                  borderColor: decideDataColor(1),\r\n                  fill: false,\r\n                  lineTension: 0,\r\n                  data: l2,\r\n                  pointRadius: 0\r\n                },\r\n                {\r\n                  label: `THD U L3 [%]`,\r\n                  backgroundColor: decideDataColor(2),\r\n                  borderColor: decideDataColor(2),\r\n                  fill: false,\r\n                  lineTension: 0,\r\n                  data: l3,\r\n                  pointRadius: 0\r\n                }\r\n              ]\r\n            }}\r\n          />\r\n        </Grid>\r\n      </Grid>\r\n      <Grid container spacing={2} className={classes.timePickersContainer}>\r\n        <Grid item xs={12} md={6}>\r\n          <DatePicker\r\n            variant='static'\r\n            autoOk\r\n            label={t('eventsPage.dateFromLabel')}\r\n            value={dateFrom}\r\n            onChange={(date) => dispatch(setDeviceDataDialogDateFrom(date))}\r\n            fullWidth\r\n            disableFuture\r\n          />\r\n        </Grid>\r\n      </Grid>\r\n    </React.Fragment>\r\n  )\r\n}","import React, { useEffect } from 'react';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport { makeStyles, Theme, createStyles } from '@material-ui/core/styles';\r\nimport { LineChart } from '../LineChart.component';\r\nimport { DatePicker } from \"@material-ui/pickers\";\r\nimport { useTranslation } from 'react-i18next';\r\nimport { fetchTimeseriesInterval } from '../../services/FetchTimeseriesAPI.service';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { RootState } from '../../reducers/Root.reducer';\r\nimport { setDeviceDataDialogDateFrom } from '../../actions/DeviceDataDialog.action';\r\nimport { decideDataColor } from '../../utilities/SiemensColors.utility';\r\n\r\ninterface IVoltageLN {\r\n  Voltage_L1_N: number\r\n  Voltage_L2_N: number\r\n  Voltage_L3_N: number\r\n  _time: string\r\n}\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n  createStyles({\r\n    timePickersContainer: {\r\n      marginTop: theme.spacing(2),\r\n      paddingTop: theme.spacing(2),\r\n      paddingBottom: theme.spacing(2),\r\n    }\r\n  }),\r\n);\r\n\r\nexport const VoltageLNTab = () => {\r\n  //const [dateFrom, changeDateFrom] = React.useState<Date | null>(new Date());\r\n  const classes = useStyles();\r\n  const { t } = useTranslation();\r\n  const [l1, setL1] = React.useState<Array<{ x: number | Date, y: number }>>([{ x: 0, y: 0 }])\r\n  const [l2, setL2] = React.useState<Array<{ x: number | Date, y: number }>>([{ x: 0, y: 0 }])\r\n  const [l3, setL3] = React.useState<Array<{ x: number | Date, y: number }>>([{ x: 0, y: 0 }])\r\n  const assetID = useSelector((state: RootState) => state.deviceDataDialog.assetID);\r\n  const dateFrom = useSelector((state: RootState) => state.deviceDataDialog.dateFrom);\r\n  const dispatch = useDispatch();\r\n\r\n  useEffect(() => {\r\n    if (dateFrom) {\r\n      fetchTimeseriesInterval(assetID, 1, new Date(new Date(dateFrom.setHours(0, 0, 0, 0))).toISOString(), new Date(new Date(dateFrom.setHours(23, 59, 59, 999))).toISOString(), 'Voltage_L1_N,Voltage_L2_N,Voltage_L3_N').then(res => {\r\n        const pointsL1: Array<{ x: number, y: number }> = []\r\n        const pointsL2: Array<{ x: number, y: number }> = []\r\n        const pointsL3: Array<{ x: number, y: number }> = []\r\n        res.forEach((point: IVoltageLN) => {\r\n          pointsL1.push({\r\n            x: new Date(point._time).valueOf(),\r\n            y: point.Voltage_L1_N\r\n          })\r\n          pointsL2.push({\r\n            x: new Date(point._time).valueOf(),\r\n            y: point.Voltage_L2_N\r\n          })\r\n          pointsL3.push({\r\n            x: new Date(point._time).valueOf(),\r\n            y: point.Voltage_L3_N\r\n          })\r\n        })\r\n        setL1(pointsL1)\r\n        setL2(pointsL2)\r\n        setL3(pointsL3)\r\n      })\r\n    }\r\n  }, [dateFrom, assetID])\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <Grid container spacing={2}>\r\n        <Grid item xs={12}>\r\n          <LineChart\r\n            data={{\r\n              datasets: [\r\n                {\r\n                  label: `${t('deviceDataDialog.voltageL1N')} [V]`,\r\n                  backgroundColor: decideDataColor(0),\r\n                  borderColor: decideDataColor(0),\r\n                  fill: false,\r\n                  lineTension: 0,\r\n                  data: l1,\r\n                  pointRadius: 0\r\n                },\r\n                {\r\n                  label: `${t('deviceDataDialog.voltageL2N')} [V]`,\r\n                  backgroundColor: decideDataColor(1),\r\n                  borderColor: decideDataColor(1),\r\n                  fill: false,\r\n                  lineTension: 0,\r\n                  data: l2,\r\n                  pointRadius: 0\r\n                },\r\n                {\r\n                  label: `${t('deviceDataDialog.voltageL3N')} [V]`,\r\n                  backgroundColor: decideDataColor(2),\r\n                  borderColor: decideDataColor(2),\r\n                  fill: false,\r\n                  lineTension: 0,\r\n                  data: l3,\r\n                  pointRadius: 0\r\n                }\r\n              ]\r\n            }}\r\n          />\r\n        </Grid>\r\n      </Grid>\r\n      <Grid container spacing={2} className={classes.timePickersContainer}>\r\n        <Grid item xs={12} md={6}>\r\n          <DatePicker\r\n            variant='static'\r\n            autoOk\r\n            label={t('eventsPage.dateFromLabel')}\r\n            value={dateFrom}\r\n            onChange={(date) => dispatch(setDeviceDataDialogDateFrom(date))}\r\n            fullWidth\r\n            disableFuture\r\n          />\r\n        </Grid>\r\n      </Grid>\r\n    </React.Fragment>\r\n  )\r\n}","import React, { useEffect } from 'react';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport { makeStyles, Theme, createStyles } from '@material-ui/core/styles';\r\nimport { LineChart } from '../LineChart.component';\r\nimport { DatePicker } from \"@material-ui/pickers\";\r\nimport { useTranslation } from 'react-i18next';\r\nimport { fetchTimeseriesInterval } from '../../services/FetchTimeseriesAPI.service';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { RootState } from '../../reducers/Root.reducer';\r\nimport { setDeviceDataDialogDateFrom } from '../../actions/DeviceDataDialog.action';\r\nimport { decideDataColor } from '../../utilities/SiemensColors.utility';\r\n\r\ninterface IVoltageLL {\r\n  Voltage_L1_L2: number\r\n  Voltage_L2_L3: number\r\n  Voltage_L3_L1: number\r\n  _time: string\r\n}\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n  createStyles({\r\n    timePickersContainer: {\r\n      marginTop: theme.spacing(2),\r\n      paddingTop: theme.spacing(2),\r\n      paddingBottom: theme.spacing(2),\r\n    }\r\n  }),\r\n);\r\n\r\nexport const VoltageLLTab = () => {\r\n  const classes = useStyles();\r\n  const { t } = useTranslation();\r\n  const [l1, setL1] = React.useState<Array<{ x: number | Date, y: number }>>([{ x: 0, y: 0 }])\r\n  const [l2, setL2] = React.useState<Array<{ x: number | Date, y: number }>>([{ x: 0, y: 0 }])\r\n  const [l3, setL3] = React.useState<Array<{ x: number | Date, y: number }>>([{ x: 0, y: 0 }])\r\n  const assetID = useSelector((state: RootState) => state.deviceDataDialog.assetID);\r\n  const dateFrom = useSelector((state: RootState) => state.deviceDataDialog.dateFrom);\r\n  const dispatch = useDispatch();\r\n\r\n  useEffect(() => {\r\n    if (dateFrom) {\r\n      fetchTimeseriesInterval(assetID, 1, new Date(new Date(dateFrom.setHours(0, 0, 0, 0))).toISOString(), new Date(new Date(dateFrom.setHours(23, 59, 59, 999))).toISOString(), 'Voltage_L1_L2,Voltage_L2_L3,Voltage_L3_L1').then(res => {\r\n        const pointsL1: Array<{ x: number, y: number }> = []\r\n        const pointsL2: Array<{ x: number, y: number }> = []\r\n        const pointsL3: Array<{ x: number, y: number }> = []\r\n        res.forEach((point: IVoltageLL) => {\r\n          pointsL1.push({\r\n            x: new Date(point._time).valueOf(),\r\n            y: point.Voltage_L1_L2\r\n          })\r\n          pointsL2.push({\r\n            x: new Date(point._time).valueOf(),\r\n            y: point.Voltage_L2_L3\r\n          })\r\n          pointsL3.push({\r\n            x: new Date(point._time).valueOf(),\r\n            y: point.Voltage_L3_L1\r\n          })\r\n        })\r\n        setL1(pointsL1)\r\n        setL2(pointsL2)\r\n        setL3(pointsL3)\r\n      })\r\n    }\r\n  }, [dateFrom, assetID])\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <Grid container spacing={2}>\r\n        <Grid item xs={12}>\r\n          <LineChart\r\n            data={{\r\n              datasets: [\r\n                {\r\n                  label: `${t('deviceDataDialog.voltageL1L2')} [V]`,\r\n                  backgroundColor: decideDataColor(0),\r\n                  borderColor: decideDataColor(0),\r\n                  fill: false,\r\n                  lineTension: 0,\r\n                  data: l1,\r\n                  pointRadius: 0\r\n                },\r\n                {\r\n                  label: `${t('deviceDataDialog.voltageL2L3')} [V]`,\r\n                  backgroundColor: decideDataColor(1),\r\n                  borderColor: decideDataColor(1),\r\n                  fill: false,\r\n                  lineTension: 0,\r\n                  data: l2,\r\n                  pointRadius: 0\r\n                },\r\n                {\r\n                  label: `${t('deviceDataDialog.voltageL3L1')} [V]`,\r\n                  backgroundColor: decideDataColor(2),\r\n                  borderColor: decideDataColor(2),\r\n                  fill: false,\r\n                  lineTension: 0,\r\n                  data: l3,\r\n                  pointRadius: 0\r\n                }\r\n              ]\r\n            }}\r\n          />\r\n        </Grid>\r\n      </Grid>\r\n      <Grid container spacing={2} className={classes.timePickersContainer}>\r\n        <Grid item xs={12} md={6}>\r\n          <DatePicker\r\n            variant='static'\r\n            autoOk\r\n            label={t('eventsPage.dateFromLabel')}\r\n            value={dateFrom}\r\n            onChange={(date) => dispatch(setDeviceDataDialogDateFrom(date))}\r\n            fullWidth\r\n            disableFuture\r\n          />\r\n        </Grid>\r\n      </Grid>\r\n    </React.Fragment>\r\n  )\r\n}","import React from 'react';\r\nimport { UniversalTabs } from '../UniversalTabs.component';\r\nimport { CurrentTab } from './CurrentTab.component';\r\nimport { OverviewTab } from './OverviewTab.component';\r\nimport { PowerTab } from './PowerTab.component';\r\nimport { THDITab } from './THDITab.component';\r\nimport { THDUTab } from './THDUTab.component';\r\nimport { VoltageLNTab } from './VoltageLNTab.component';\r\nimport { VoltageLLTab } from './VoltageLLTab.component';\r\nimport { useTranslation } from 'react-i18next';\r\n\r\nexport const TransformerDevice = () => {\r\n  const { t } = useTranslation();\r\n\r\n  return (\r\n    <UniversalTabs\r\n      name='TransformerDeviceDetails'\r\n      tabs={[\r\n        {\r\n          label: t('deviceDataDialog.overviewTab'), content: <OverviewTab />\r\n        },\r\n        {\r\n          label: t('deviceDataDialog.voltageLNTab'), content: <VoltageLNTab />\r\n        },\r\n        {\r\n          label: t('deviceDataDialog.voltageLLTab'), content: <VoltageLLTab />\r\n        },\r\n        {\r\n          label: t('deviceDataDialog.currentTab'), content: <CurrentTab />\r\n        },\r\n        {\r\n          label: t('deviceDataDialog.powerTab'), content: <PowerTab />\r\n        },\r\n        {\r\n          label: t('deviceDataDialog.THDUTab'), content: <THDUTab />\r\n        },\r\n        {\r\n          label: t('deviceDataDialog.THDITab'), content: <THDITab />\r\n        }]}\r\n    />\r\n  )\r\n}","import React from 'react';\r\nimport { createStyles, makeStyles, Theme } from '@material-ui/core/styles';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\nimport Slide from '@material-ui/core/Slide';\r\nimport { TransitionProps } from '@material-ui/core/transitions';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { RootState } from '../reducers/Root.reducer';\r\nimport { setDeviceDataDialogOpen } from '../actions/DeviceDataDialog.action';\r\nimport { BreakerDevice } from './DeviceDataDialog/BreakerDevice.component';\r\nimport { TransformerDevice } from './DeviceDataDialog/TransformerDevice.component';\r\nimport { DeviceTypes } from '../utilities/DeviceTypes.utility';\r\nimport { useTranslation } from 'react-i18next';\r\nimport Button from '@material-ui/core/Button';\r\nimport { exportPDF } from '../utilities/ExportPDF.utility';\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n  createStyles({\r\n    appBar: {\r\n      position: 'relative',\r\n    },\r\n    title: {\r\n      marginLeft: theme.spacing(2),\r\n      flex: 1,\r\n    },\r\n  }),\r\n);\r\n\r\nconst Transition = React.forwardRef(function Transition(\r\n  props: TransitionProps & { children?: React.ReactElement },\r\n  ref: React.Ref<unknown>,\r\n) {\r\n  return <Slide direction=\"up\" ref={ref} {...props} />;\r\n});\r\n\r\nexport const DeviceDataDialog: React.FC = () => {\r\n  const classes = useStyles();\r\n  const open = useSelector((state: RootState) => state.deviceDataDialog.open);\r\n  const deviceName = useSelector((state: RootState) => state.deviceDataDialog.deviceName);\r\n  const deviceType = useSelector((state: RootState) => state.deviceDataDialog.deviceType);\r\n  const breakerName = useSelector((state: RootState) => state.deviceDataDialog.breakerName);\r\n  const sectionName = useSelector((state: RootState) => state.deviceDataDialog.sectionName);\r\n  const assetID = useSelector((state: RootState) => state.deviceDataDialog.assetID);\r\n  const switchboardAssetID = useSelector((state: RootState) => state.deviceDataDialog.switchboardAssetID);\r\n  const dispatch = useDispatch();\r\n  const { t } = useTranslation();\r\n\r\n  const showTabsAccordingToDeviceType = () => {\r\n    switch (deviceType) {\r\n      case DeviceTypes.circuitBreaker:\r\n      case DeviceTypes.infeedBreaker:\r\n      case DeviceTypes.couplingBreaker:\r\n        return <BreakerDevice />\r\n      case DeviceTypes.generator:\r\n      case DeviceTypes.transformer:\r\n        return <TransformerDevice />\r\n      default:\r\n        return null\r\n    }\r\n  }\r\n\r\n  return (\r\n    <Dialog fullScreen open={open} onClose={() => dispatch(setDeviceDataDialogOpen({\r\n      open: false,\r\n      deviceName: deviceName,\r\n      deviceType: deviceType,\r\n      breakerName: breakerName,\r\n      sectionName: sectionName,\r\n      assetID: assetID,\r\n      switchboardAssetID: switchboardAssetID\r\n    }))} TransitionComponent={Transition}>\r\n      <AppBar className={classes.appBar}>\r\n        <Toolbar>\r\n          <IconButton edge=\"start\" color=\"inherit\" onClick={() => dispatch(setDeviceDataDialogOpen({\r\n            open: false,\r\n            deviceName: deviceName,\r\n            deviceType: deviceType,\r\n            breakerName: breakerName,\r\n            sectionName: sectionName,\r\n            assetID: assetID,\r\n            switchboardAssetID: switchboardAssetID\r\n          }))} aria-label=\"close\">\r\n            <CloseIcon />\r\n          </IconButton>\r\n          <Typography variant=\"h6\" className={classes.title}>\r\n            {deviceType === DeviceTypes.circuitBreaker || deviceType === DeviceTypes.infeedBreaker || deviceType === DeviceTypes.couplingBreaker ?\r\n              `${t('deviceDataDialog.circuitBreaker')} ${breakerName}`\r\n              : deviceName}\r\n          </Typography>\r\n          <Button\r\n            color=\"inherit\"\r\n            onClick={() => exportPDF()}\r\n          >\r\n            {t('deviceDataDialog.exportTitle')}</Button>\r\n        </Toolbar>\r\n      </AppBar>\r\n      {showTabsAccordingToDeviceType()}\r\n    </Dialog>\r\n  );\r\n}","import React from 'react';\nimport './App.css';\nimport {\n  createMuiTheme,\n  ThemeProvider\n} from '@material-ui/core/styles';\nimport { BrowserRouter as Router } from 'react-router-dom';\nimport { Provider } from 'react-redux';\nimport { createStore } from 'redux';\nimport { MiniDrawer } from './components/Drawer.component';\nimport './i18n';\nimport { rootReducer } from './reducers/Root.reducer';\nimport { LanguageDialog } from './components/LanguageDialog.component';\nimport { SimpleBackdrop } from './components/Backdrop.component';\nimport { DeviceDataDialog } from './components/DeviceDataDialog.component';\nimport { MuiPickersUtilsProvider } from '@material-ui/pickers';\nimport DateFnsUtils from '@date-io/date-fns';\nimport { pl, enUS } from 'date-fns/locale';\nimport { useTranslation } from 'react-i18next';\nimport { SiemensAccentTeal, SiemensAccentRed, SiemensAccentYellow, SiemensAccentBlue } from './utilities/SiemensColors.utility';\n\nconst store = createStore(rootReducer);\n\nconst themeLight = createMuiTheme({\n  palette: {\n    type: 'light',\n    primary: {\n      light: SiemensAccentTeal.light3,\n      main: SiemensAccentTeal.light1,\n      dark: SiemensAccentTeal.dark3,\n      contrastText: '#fff',\n    },\n    secondary: {\n      light: SiemensAccentRed.light4,\n      main: SiemensAccentRed.light2,\n      dark: SiemensAccentRed.dark3,\n      contrastText: '#fff',\n    },\n  },\n});\n\nconst themeDark = createMuiTheme({\n  palette: {\n    type: 'dark',\n    primary: {\n      light: SiemensAccentYellow.light3,\n      main: SiemensAccentYellow.dark6,\n      dark: SiemensAccentYellow.dark3,\n      contrastText: '#fff',\n    },\n    secondary: {\n      light: SiemensAccentBlue.light6,\n      main: SiemensAccentBlue.light3,\n      dark: SiemensAccentBlue.dark4,\n      contrastText: '#fff',\n    },\n  },\n});\n\nexport const App = () => {\n  const { i18n } = useTranslation();\n  const [darkTheme, setDarkTheme] = React.useState<boolean>(localStorage.getItem('theme') === 'dark' ? true : false);\n\n  const handleThemeChange = () => {\n    if (darkTheme === true) {\n      setDarkTheme(false)\n      localStorage.setItem('theme', 'light')\n    }\n    else {\n      setDarkTheme(true)\n      localStorage.setItem('theme', 'dark')\n    }\n  }\n\n  return (\n    <React.Fragment>\n      <MuiPickersUtilsProvider utils={DateFnsUtils} locale={i18n.language === 'pl' ? pl : enUS}>\n        <ThemeProvider theme={darkTheme ? themeDark : themeLight}>\n          <Provider store={store}>\n            <Router>\n              <MiniDrawer onThemeChange={handleThemeChange} />\n            </Router>\n            {/* temporary appearing components (popups) */}\n            <LanguageDialog />\n            <DeviceDataDialog />\n            <SimpleBackdrop />\n          </Provider>\n        </ThemeProvider>\n      </MuiPickersUtilsProvider>\n    </React.Fragment>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\nimport LocalServiceWorkerRegister from './swReg';\n\nReactDOM.render(\n  // <React.StrictMode>\n    <App />\n  // </React.StrictMode>\n  ,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.register();\n\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\nLocalServiceWorkerRegister();","export default function LocalServiceWorkerRegister() {\r\n  const swPath = `${process.env.PUBLIC_URL}/sw1.js`;\r\n  if ('serviceWorker' in navigator) {\r\n    window.addEventListener('load', function() {\r\n      navigator.serviceWorker.register(swPath).then(function(registration) {\r\n        // Registration was successful\r\n        console.log('ServiceWorker registration successful with scope: ', registration.scope);\r\n      }, function(err) {\r\n        // registration failed :(\r\n        console.log('ServiceWorker registration failed: ', err);\r\n      });\r\n    });\r\n  }\r\n}"],"sourceRoot":""}